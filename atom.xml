<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Magical Bean</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wsx1128.cn/"/>
  <updated>2019-10-11T10:31:05.472Z</updated>
  <id>http://wsx1128.cn/</id>
  
  <author>
    <name>五光君</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Data Compression --- the course of algorithm</title>
    <link href="http://wsx1128.cn/2019/10/10/Data-Compression-the-course-of-algorithm/"/>
    <id>http://wsx1128.cn/2019/10/10/Data-Compression-the-course-of-algorithm/</id>
    <published>2019-10-10T08:33:38.000Z</published>
    <updated>2019-10-11T10:31:05.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2><h3 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h3><p>压缩数据可以节省存储数据需要的空间和传输数据需要的时间，虽然摩尔定律说集成芯片上的晶体管每 18-24 个月翻一倍，帕金森定律说数据会自己拓展来填满可用空间，但数据压缩还是最经济的做法。</p><p>数据压缩的基本模型如下，很简单，压缩和解压，压缩率即 C(B) 和 B 的比特数之比。</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/1.png" alt=""></p><p>数据压缩对象的本质实际上就是将二进制文件，抽象层次为比特流， 下面直接给出了相应读写二进制的类</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/2.png" alt=""><br>这里 java的默认处理是基于8位字节流<br><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/3.png" alt=""></p><p>这里我举出一个简单的数据压缩的例子</p><p>将日期 12/31/1990 这个字符串进行压缩</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/4.png" alt=""></p><p>上面就可以轻而易举的看出来 压缩的好处。<br>第一张图就是原来的写法，第二张图就是将其换成int类型进行压缩<br>第三张图<br>则按照特定的压缩进行压缩</p><p><strong>这里需要注意的是，并不存在通用的压缩算法</strong></p><p>当然，这里存在一种可以供人类阅读的比特流形式，这个被称为 转储。<br>下面图，就是一些例子：</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/5.png" alt=""></p><p>BinaryDump 将比特流按 0 和 1 输出来；HexDump 将比特流组织成 8 位并用两位的 16 进制数表示；PictureDump 则将比特流变为 Picture 对象，其中白色像素表示 0，黑色像素表示 1。</p><h3 id="run-length-Coding"><a href="#run-length-Coding" class="headerlink" title="run-length Coding"></a>run-length Coding</h3><p>游程编码，就是专门用来处理冗杂的数据，他是通过计算重复的个数，来最终决定压缩的形式，就像下图：</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/6.png" alt=""></p><p>上面这里就是用的4位计数，而下面的代码则是使用了8位计数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunLength</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> R = <span class="number">256</span>;    <span class="comment">// maximum run-length conut</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> lgR = <span class="number">8</span>;    <span class="comment">// number of bits per conut</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b, old = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!BinaryStdIn.isEmpty()) &#123;</span><br><span class="line">            b = BinaryStdIn.readBoolean();</span><br><span class="line">            <span class="keyword">if</span> (b != old) &#123;</span><br><span class="line">                BinaryStdOut.write(cnt);</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">                old = !old;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 由于这个地方是八位计数，所以最大的限制也就是255</span></span><br><span class="line">                <span class="keyword">if</span> (cnt == <span class="number">255</span>) &#123;</span><br><span class="line">                    BinaryStdOut.write(cnt);</span><br><span class="line">                    cnt = <span class="number">0</span>;</span><br><span class="line">                    BinaryStdOut.write(cnt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        BinaryStdOut.write(cnt);</span><br><span class="line">        BinaryStdOut.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">expand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> bit = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!BinaryStdIn.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> run = BinaryStdIn.readInt(lgR); <span class="comment">// read 8-bit conut from standard input</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; run; i++)</span><br><span class="line">                BinaryStdOut.write(bit);        <span class="comment">// write 1 bit to standard output</span></span><br><span class="line">            bit = !bit;</span><br><span class="line">        &#125;</span><br><span class="line">        BinaryStdOut.close();                  <span class="comment">// pad 0s for byte alignment</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种策略专门对付经常出现的，冗杂的比特流是十分有效的，游程编码的一个应用就是压缩位图，位图被广泛的用于保存图片和扫描文档。</p><p>就像这张图，左边经过压缩之后极大程度上小了很多。</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/7.png" alt=""></p><p>这里的游程编码不适用于含有大量短游程的输入，而不是所有我们希望压缩的比特都能像上面一样重复个数多，且冗杂。所以接下来我们就介绍两种适用于多种类型的文件压缩算法。</p><h3 id="Huffman-Compression"><a href="#Huffman-Compression" class="headerlink" title="Huffman Compression"></a>Huffman Compression</h3><p>哈夫曼压缩</p><p>这里直接介绍了一个摩斯密码，但是像摩斯密码这一类的编码很容易产生多义性，所以密码之间还有一定的间隙隔开。</p><p>多义性的本质原因是有些字符的编码是其它字符编码的前缀，所以才可能会有不同的解读。而有种特殊的变长编码——前缀码（prefix-free code），字符编码肯定不是其它字符编码的前缀，也就不存在多义性的问题。</p><p>这里表示这种前缀码，可以很自然的使用字典树来进行表示</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/8.png" alt=""></p><h3 id="节点代码"><a href="#节点代码" class="headerlink" title="节点代码"></a>节点代码</h3><p>这里直接用代码表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> ch;    <span class="comment">// used only for leaf nodes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> freq;   <span class="comment">// used only for compress</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node left, right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">char</span> ch, <span class="keyword">int</span> freq, Node left, Node right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ch = ch;</span><br><span class="line">        <span class="keyword">this</span>.freq = freq;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.freq - that.freq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符频率在下面生成最优前缀码的时候会使用到。</p><p>当然，在下面使用前，得将这个表示前缀码的字典树一样给压缩进入到比特流，而这里就直接使用前序遍历了。</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/9.png" alt=""></p><p>当然，需要将叶子节点与其他的节点区分开来的话，到叶子节点的时候会先输出一个true，意思就是1，而其他的节点则是0，附在开头的Trie相对就会显得很小，没有什么关系。</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/10.png" alt=""></p><p>上面已经将压缩字典树，以及解压缩字典树都讲到了，接下来就是构造这个前缀码字典树了。</p><p>实际上，哈夫曼的做法很好描述：首先你要知道字符出现的频率，然后每次挑两个最小的加起来，加起来的值再和原来的那些一起重复挑两个最小的加起来，从下往上接成 Trie。</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/11.png" alt=""></p><h3 id="构造代码"><a href="#构造代码" class="headerlink" title="构造代码"></a>构造代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">buildTrie</span><span class="params">(<span class="keyword">int</span>[] freq)</span> </span>&#123;</span><br><span class="line">    MinPQ&lt;Node&gt; pq = <span class="keyword">new</span> MinPQ&lt;Node&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> i = <span class="number">0</span>; i &lt; R; i++)</span><br><span class="line">        <span class="keyword">if</span> (freq[i] &gt; <span class="number">0</span>)</span><br><span class="line">            pq.insert(<span class="function">New <span class="title">Node</span><span class="params">(i, freq[i], <span class="keyword">null</span>, <span class="keyword">null</span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// merge two smallest tries</span></span><br><span class="line">    <span class="keyword">while</span> (pq.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        Node x = pq.delMin();</span><br><span class="line">        Node y = pq.delMin();</span><br><span class="line">        Node parent = <span class="keyword">new</span> Node(<span class="string">'\0'</span>, x.freq + y.freq, x, y);</span><br><span class="line">        <span class="comment">// 这里有点类似于广搜的操作，这样的做法就是直接将每一个最小的值弄出来，然后分别给其设置父亲节点</span></span><br><span class="line">        pq.insert(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一定一定就是根节点了。</span></span><br><span class="line">    <span class="keyword">return</span> pa.delMin();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最优解证明"><a href="#最优解证明" class="headerlink" title="最优解证明"></a>最优解证明</h3><p>这个地方目前对自己不作要求，贴两个网址</p><p><a href="https://www.cnblogs.com/mingyueanyao/p/9516423.html" target="_blank" rel="noopener">文字讲解</a></p><p><a href="https://www.coursera.org/lecture/algorithms/058ha-fu-man-suan-fa-de-zheng-que-xing-zheng-ming-nLQya" target="_blank" rel="noopener">视频讲解</a></p><h3 id="LZW-compression"><a href="#LZW-compression" class="headerlink" title="LZW-compression"></a>LZW-compression</h3><p>LZW 压缩算法是自适应性的（adaptive）模型，在读入文本的时候学习并更新模型，不需要将模型附在比特流中用于解压，但解压的时候只能从文本开头开始。</p><h3 id="压缩例子"><a href="#压缩例子" class="headerlink" title="压缩例子"></a>压缩例子</h3><p>展开和压缩类似，有下面几个步骤：</p><p>创建符号表，但这次编码为键，对应的字符串为值。<br>初始化符号表，加入单个字符的键值对。<br>从压缩文件读入 W 位的编码，输出编码对应的字符串。<br>预读下一个编码，得到下个字符，类似地更新符号表。<br>重复上两步直到读入结束编码。<br>例图即展开上面压缩形成的编码。</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/12.png" alt=""></p><p>一开始读入 8 位编码 41，从符号表可知对应字符串 A，输出 A 后预读下一个编码 42，对应 B，于是往符号表中加入新键值对 (81, AB)；现在读到编码 42，输出 B 并预读 52 得到 R，所以加入 (82, BR) … 直到读入编码 80，表示文件结束。</p><p>似乎展开和压缩差不多，甚至更简单，因为不需要找最长前缀，符号表直接用数组简单实现。但是，展开有时会碰到一个特殊的情况：</p><p><img src="/2019/10/10/Data-Compression-the-course-of-algorithm/13.png" alt=""></p><p>压缩字符串 ABABABA 编码成 41 42 81 83 80，现在对这编码进行展开。编码 41 输出 A，预读 42 后加入 (81, AB) 更新符号表；编码 42 输出 B，预读 81 知道下个字符是 A，加入 (82, BA)；编码 81 输出 AB，预读 83 卡住，因为符号表中还没有这个键。</p><p>但是，这种时候我们还是可以知道 AB 的下一个字符是什么的。假设 AB 后面的字符分别为 𝑐1，𝑐2，𝑐3，卡住的时候（更新要加入的编码和预读到的编码一样）肯定有 AB𝑐1=𝑐1𝑐2𝑐3,所以下个字符即 A，加入 (83, ABA) 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">expand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;                                      <span class="comment">// 当前更新符号表要加入的编码</span></span><br><span class="line">    String[] st = <span class="keyword">new</span> String[L];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; R; i++)</span><br><span class="line">        st[i] = <span class="string">""</span> + (<span class="keyword">char</span>) i;</span><br><span class="line">    st[i++] = <span class="string">" "</span>;                             <span class="comment">// 例图中表示文件结束的 0x80</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> codeword = BinaryStdIn.readInt(W);</span><br><span class="line">    String val = st[codeword];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        BinaryStdOut.write(val);</span><br><span class="line">        codeword = BinaryStdIn.readInt(W);    <span class="comment">// 预读的编码</span></span><br><span class="line">        <span class="keyword">if</span> (codeword == R) <span class="keyword">break</span>;</span><br><span class="line">        String s = st[codeword];</span><br><span class="line">        <span class="keyword">if</span> (i == codeword)                   <span class="comment">// 要加入的编码和预读的编码相同</span></span><br><span class="line">            s = val + val.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; L)</span><br><span class="line">            st[i++] = val + s.charAt(<span class="number">0</span>);</span><br><span class="line">        val = s;</span><br><span class="line">    &#125;</span><br><span class="line">    BinaryStdOut.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于第二种压缩方式 有点不是很好理解，可以配合算法视频课一起食用，这里就可以不用传输模型展开压缩，编码文件了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.cn/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
      <category term="数据压缩" scheme="http://wsx1128.cn/tags/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>Regular Expressions --- the course of algorithm</title>
    <link href="http://wsx1128.cn/2019/10/09/Regular-Expressions-the-course-of-algorithm/"/>
    <id>http://wsx1128.cn/2019/10/09/Regular-Expressions-the-course-of-algorithm/</id>
    <published>2019-10-09T11:11:42.000Z</published>
    <updated>2019-10-09T12:52:28.485Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>在文本中查找子字符串只是寻找一个单一的字符串，但经常的我们可能不知道这个字符串的完整信息，或是寻找的是吻合某种模式的一些字符串，即所谓 模式匹配（Pattern Matching）。</p><p>正则表达式（Regular Expressions） 就是用来描述模式的，表示符合某种模式的字符串的集合（可能是无限的），它有下面几种基本操作：</p><p><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/1.png" alt=""></p><p>就是普通的正则表达式里面的操作。</p><p>连接、或、闭包和括号，都不难理解。其中闭包表示若干个自身连接，可以是零个。</p><p>然后他一般有以下这些缩略方式</p><p><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/2.png" alt=""></p><p>关于完整的正则表达式 可以去看看</p><p><a href="https://www.jb51.net/tools/regexsc.htm" target="_blank" rel="noopener">正则表达式速查表</a></p><p><a href="https://blog.csdn.net/carechere/article/details/52315728" target="_blank" rel="noopener">基本上常用的正则表达式</a></p><p>因为之前接触过正则表达式，所以这个地方也就不再多余赘述了。</p><h3 id="REs-And-NFAs"><a href="#REs-And-NFAs" class="headerlink" title="REs And NFAs"></a>REs And NFAs</h3><p>其实，正则表达式和确定型有穷自动机间存在着二元性（duality），即 Kleene 定理所说：对任意 DFA 存在着描述同样字符串集合的正则表达式，对任意正则表达式存在着识别同样字符串集合的 DFA。</p><p>就像之前学习KMP的时候构造的DFA，这里其实也可以构造一个DFA，就像这样<br><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/3.png" alt=""></p><p>当然应用在KMP上面的DFA是线性时间的性能保证，但是这个办法并不可行，因为正则表达式对应的DFA的状态数目可能是指数级的。</p><p>于是，就来了解一下 非确定型有限状态自动机，状态之间的转移并不是确定的。</p><ul><li><p>正则表达式用括号括起。</p></li><li><p>正则每个符号对应 NFA 一个状态，再加个接受状态。</p></li><li><p>接受空串𝜖，不扫描下个字符而直接改变状态（下图红线），不确定性所在。</p></li><li><p>扫描字符，匹配转移到一下个状态（下图黑线）。</p></li><li><p>在扫描完全部文本字符后，如果有 任一 转移序列到达接受状态，则匹配成功。</p></li></ul><p><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/4.png" alt=""></p><h3 id="NFA-construction"><a href="#NFA-construction" class="headerlink" title="NFA-construction"></a>NFA-construction</h3><p>首先先讲一下它的构造过程</p><p>最先开始的状态，最后一个位置表示完成匹配<br><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/5.png" alt=""></p><p>所有字符直接指向下一个<br><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/6.png" alt=""></p><p>括号或者空的，就直接往下面指就行了<br><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/7.png" alt=""></p><p>闭包，比较巧妙<br><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/8.png" alt=""></p><p>不过分两种情况，例子里面的就是第一种情况<br><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/9.png" alt=""></p><p>符号 ‘|’<br><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/10.png" alt=""></p><p>最后再来两个空转移<br><img src="/2019/10/09/Regular-Expressions-the-course-of-algorithm/11.png" alt=""></p><p>当然，在完成上面的构造的过程中，需要借助数据结构栈，碰到左括号或者‘|’的时候就直接将其的编号压到栈内，碰到右括号就弹出栈顶，如果对于的是其他东西，就直接根据上面的图来顺应结果，具体看代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里就是直接用有向图来进行表示。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Digraph <span class="title">buildNFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Digraph g = <span class="keyword">new</span> Digraph(M + <span class="number">1</span>); <span class="comment">// 顶点数加1</span></span><br><span class="line">    Stack&lt;Integer&gt; ops = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> lp = i;</span><br><span class="line">        <span class="keyword">if</span> (re[i] == <span class="string">'('</span> || re[i] == <span class="string">'|'</span>) ops.push(i);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (re[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> or = ops.pop();</span><br><span class="line">            <span class="keyword">if</span> (re[or] == <span class="string">'|'</span>) &#123;</span><br><span class="line">                lp = ops.pop();</span><br><span class="line">                g.addEdge(lp, or + <span class="number">1</span>);</span><br><span class="line">                g.addEdge(or + <span class="number">1</span>, lp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> lp = or;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; M - <span class="number">1</span> &amp;&amp; re[i + <span class="number">1</span>] == <span class="string">'*'</span>) &#123;</span><br><span class="line">            g.addEdge(lp, i + <span class="number">1</span>);</span><br><span class="line">            g.addEdge(i + <span class="number">1</span>, lp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (re[i] == <span class="string">'('</span> || re[i] == <span class="string">'*'</span> || re[i] == <span class="string">')'</span>)</span><br><span class="line">            g.addEdge(i, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NFA-simulation"><a href="#NFA-simulation" class="headerlink" title="NFA-simulation"></a>NFA-simulation</h3><p>首先我们这样来表示 NFA：用整数 0 到 M（正则长度）来标号状态（像上图），用数组 re 来存储正则表达式，用有向图来存储空转移</p><p>至于怎么模拟 NFA 输入文本运行，感觉类似广搜，维护每一步所有可能走到的状态，下一步再拓展这些状态，要是文本流结束那步的状态里包含接受状态，就表示匹配成功。例图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NFA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] re;    <span class="comment">// match transitions</span></span><br><span class="line">    <span class="keyword">private</span> Digraph G;    <span class="comment">// epsilon transition digraph</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> M;        <span class="comment">// number of states</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NFA</span><span class="params">(String regexp)</span> </span>&#123;</span><br><span class="line">        M = regexp.length();</span><br><span class="line">        re = regexp.toCharArray();    </span><br><span class="line">        G = buildEpsilonTransitionDigraph();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">recognizes</span><span class="params">(String txt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// states reachable from start by epsilon transitions</span></span><br><span class="line">        Bag&lt;Integer&gt; pc = <span class="keyword">new</span> Bag&lt;Integer&gt;();</span><br><span class="line">        DirectedDFS dfs = <span class="keyword">new</span> DirectedDFS(G, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; G.V(); v++)</span><br><span class="line">            <span class="keyword">if</span> (dfs.marked(v)) pc.add(v);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; txt.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// states reachable after scanning past txt.charAt(i)</span></span><br><span class="line">            Bag&lt;Integer&gt; match = <span class="keyword">new</span> Bag&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v : pc) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v == M) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// 匹配时直接加上下一个状态</span></span><br><span class="line">                <span class="keyword">if</span> ((re[v] == txt.charAt(i)) || re[v] == <span class="string">'.'</span>)</span><br><span class="line">                    match.add(v + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//最坏的结果就是 match 重新复制了一遍上述的全部</span></span><br><span class="line">            dfs = <span class="keyword">new</span> DirectedDFS(G, match);    <span class="comment">// 拓展上一步的所有状态</span></span><br><span class="line">            pc = <span class="keyword">new</span> Bag&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; G.V(); v++)</span><br><span class="line">                <span class="keyword">if</span> (dfs.marked(v)) pc.add(v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// accept if can end in state M</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : pc)</span><br><span class="line">            <span class="keyword">if</span> (v == M) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图文 大部分借鉴 <a href="https://www.cnblogs.com/mingyueanyao/p/9495243.html" target="_blank" rel="noopener">博客</a></p><p>若侵权，必删。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.cn/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>BoggleSolver</title>
    <link href="http://wsx1128.cn/2019/09/28/BoggleSolver/"/>
    <id>http://wsx1128.cn/2019/09/28/BoggleSolver/</id>
    <published>2019-09-28T13:44:37.000Z</published>
    <updated>2019-10-09T12:50:55.537Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://coursera.cs.princeton.edu/algs4/assignments/boggle/specification.php" target="_blank" rel="noopener">题目</a></h3><p><img src="/2019/09/28/BoggleSolver/1.png" alt="1"><br><img src="/2019/09/28/BoggleSolver/2.png" alt="2"><br><img src="/2019/09/28/BoggleSolver/3.png" alt="3"><br><img src="/2019/09/28/BoggleSolver/4.png" alt="4"><br><img src="/2019/09/28/BoggleSolver/5.png" alt="5"></p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>这道题的意思就是 给你一个四乘以四的方块，然后再这个方块里面遍历所有能到的位置，八个方向，每个位置只能走一次，方块上面各有一个字母，走过每一个字母之后构成一个单词，然后看这个单词最后在不在字典中，且能得到多少分？</p><p><img src="https://coursera.cs.princeton.edu/algs4/assignments/boggle/pins.png" alt=""></p><p>最先开始的想法，是用一个bfs，然后将每一个遍历每一个单词，然后再讲每一个单词放入到其中进行判断，这样的话，时间复杂度会特别高，没一个单词都要遍历全部位置，并且 一些单词没有的前缀，<strong>比如，没有Y 开头的单词的话，那么我在从Y这里开始走的话，会浪费特别多的精力。</strong></p><p>所以，看了一下解析，是直接用字典树去存储，然后遍历位置，就相当于遍历字典树一样。</p><p>找时间得重新写一下。自己做的很不对的地方就在于，自己用的bfs，注意的是这个状态并不是循序渐进的变化，而是每一个状态都不一样，如果要用bfs的话，那么每一个状态都要存进去大量的东西重置，所以，这就是不准确的地方。</p><h3 id="贴代码"><a href="#贴代码" class="headerlink" title="贴代码"></a>贴代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Bag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoggleSolver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//自己建立的 字典树，这样方便后面dfs查询的时候的剪枝。</span></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> BoggleBoard board;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> col,row;</span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;String&gt; allwords;</span><br><span class="line">    <span class="keyword">private</span> Bag&lt;Integer&gt;[] adj;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] vis;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; dice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> Node[] next = <span class="keyword">new</span> Node[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoggleSolver</span><span class="params">(String[] dictionary)</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dictionary.length; i++) &#123;</span><br><span class="line">            put(dictionary[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        root = put(root, word, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里就是直接构造出一个字典树，通过这个字典树来存储所有字符，并且剪枝dfs。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, String word, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) x = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">if</span> (d == word.length()) &#123;</span><br><span class="line">            x.val = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> c = word.charAt(d) - <span class="string">'A'</span>;</span><br><span class="line">        x.next[c] = put(x.next[c], word, d + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        Node x = get(root, word, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">get</span><span class="params">(Node x, String word, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (d == word.length()) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">int</span> c = word.charAt(d) - <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">return</span> get(x.next[c], word, d + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i &gt;= <span class="number">0</span> &amp;&amp; i &lt; row &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; col;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">getAllValidWords</span><span class="params">(BoggleBoard board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.board = board;</span><br><span class="line">        allwords = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        row = board.rows();</span><br><span class="line">        col = board.cols();</span><br><span class="line">        <span class="comment">//这个地方的写法需要注意一下。</span></span><br><span class="line">        adj = (Bag&lt;Integer&gt;[]) <span class="keyword">new</span> Bag[row * col];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = i * col + j;</span><br><span class="line">                adj[v] = <span class="keyword">new</span> Bag&lt;Integer&gt;();</span><br><span class="line">                <span class="comment">//这里就相当于图论里面的建立边，直接给后面dfs提供条件</span></span><br><span class="line">                <span class="keyword">if</span> (check(i - <span class="number">1</span>, j)) adj[v].add((i - <span class="number">1</span>) * col + j);</span><br><span class="line">                <span class="keyword">if</span> (check(i + <span class="number">1</span>, j)) adj[v].add((i + <span class="number">1</span>) * col + j);</span><br><span class="line">                <span class="keyword">if</span> (check(i, j - <span class="number">1</span>)) adj[v].add(i * col + j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (check(i, j + <span class="number">1</span>)) adj[v].add(i * col + j + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (check(i + <span class="number">1</span>, j - <span class="number">1</span>)) adj[v].add((i + <span class="number">1</span>) * col + j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (check(i + <span class="number">1</span>, j + <span class="number">1</span>)) adj[v].add((i + <span class="number">1</span>) * col + j + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (check(i - <span class="number">1</span>, j - <span class="number">1</span>)) adj[v].add((i - <span class="number">1</span>) * col + j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (check(i - <span class="number">1</span>, j + <span class="number">1</span>)) adj[v].add((i - <span class="number">1</span>) * col + j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接下来就到了 dfs搜图的时候</span></span><br><span class="line">        <span class="comment">//最先开始我个人的想法是在这个地方用bfs来进行，当时发现到后面存在很多的问题，比如时间复杂度是特别高的。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row * col; i++) &#123;</span><br><span class="line">            vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[row * col];</span><br><span class="line">            dice = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">            vis[i] = <span class="keyword">true</span>;</span><br><span class="line">            dice.push(i);</span><br><span class="line">            <span class="comment">//这个地方需要留意的是 root在这里并没有其他的含义</span></span><br><span class="line">            <span class="keyword">char</span> c = getLetter(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'Q'</span>) dfs(i, root.next[<span class="string">'Q'</span> - <span class="string">'A'</span>].next[<span class="string">'U'</span> - <span class="string">'A'</span>], <span class="string">"QU"</span>, dice);</span><br><span class="line">            <span class="keyword">else</span> dfs(i, root.next[c - <span class="string">'A'</span>], c + <span class="string">""</span>, dice);</span><br><span class="line">            <span class="comment">//由于这个地方前面就直接重新定义了，所以就不需要采用清空操作了。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allwords;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">getLetter</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> board.getLetter(v / col , v % col);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, Node x, String prefix, Stack&lt;Integer&gt;dices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prefix.length() &gt; <span class="number">2</span> &amp;&amp; x != <span class="keyword">null</span> &amp;&amp; x.val == <span class="number">1</span>) &#123;</span><br><span class="line">            allwords.add(prefix);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w : adj[v]) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = getLetter(w);</span><br><span class="line">            <span class="keyword">if</span> (!vis[w] &amp;&amp; x != <span class="keyword">null</span> &amp;&amp; x.next[c - <span class="string">'A'</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                dice.push(w);</span><br><span class="line">                vis[w] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'Q'</span>) &#123;</span><br><span class="line">                    dfs(w, x.next[<span class="string">'Q'</span> - <span class="string">'A'</span>].next[<span class="string">'U'</span> - <span class="string">'A'</span>], prefix + <span class="string">"QU"</span>, dice);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> dfs(w, x.next[c - <span class="string">'A'</span>], prefix + c, dice);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> d = dice.pop();</span><br><span class="line">                vis[d] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">scoreOf</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (get(word) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> len = word.length();</span><br><span class="line">            <span class="keyword">if</span> (len &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">3</span> || len == <span class="number">4</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">5</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">6</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">7</span>) <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这次的作业后面还有后续，后续的地方就是 直接构成一个框架进行写，直接将这个游戏具象化，等自己熟悉了之后，再将代码贴出来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="普林斯顿算法大作业" scheme="http://wsx1128.cn/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E5%A4%A7%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>Substring Search --- kmp</title>
    <link href="http://wsx1128.cn/2019/09/20/Substring-Search-kmp/"/>
    <id>http://wsx1128.cn/2019/09/20/Substring-Search-kmp/</id>
    <published>2019-09-20T02:34:17.000Z</published>
    <updated>2019-09-23T03:34:32.758Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Substring-Search"><a href="#Substring-Search" class="headerlink" title="Substring Search"></a>Substring Search</h2><p>这里主要讲的是<strong>kmp算法</strong>。</p><h3 id="java-from-the-course-of-algorithm"><a href="#java-from-the-course-of-algorithm" class="headerlink" title="java from the course of algorithm"></a>java from the course of algorithm</h3><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>在长度为 N 的文本里寻找长度为 M 的模式（子串），典型情况是 N &gt;&gt; M。</p><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180801230900919-1725939841.png" alt=""></p><p>这里就需要扩展两种做法，暴力与kmp算法了。</p><h4 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h4><p>首先先来看一下暴力查找。</p><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180801230913345-679738515.png" alt=""></p><p>就暴力地两个循环，查找文本的每个位置，最坏情况下需要近似<strong>MN</strong>次字符比较</p><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180801230928182-823845050.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String pat, String txt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M = pat.length();</span><br><span class="line">    <span class="keyword">int</span> N = txt.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N - M; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; M; j++)</span><br><span class="line">            <span class="keyword">if</span> (txt.charAt(i + j) != pat.charAt(j))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (j == M) <span class="keyword">return</span> i;    <span class="comment">// index in txt where pattern starts</span></span><br><span class="line">        <span class="keyword">return</span> N;    <span class="comment">// not found</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴力算法大多数情况下会跑的特别慢，因为建立在纯暴力的做法，会存在很多回退的情况，于是就会跑的很慢。</p><p>所以暴力算法并不是总能满足我们的需求，我们希望有线性时间级别的性能保证，希望避免在文本流中回退。</p><h4 id="Knuth-Morris-Pratt"><a href="#Knuth-Morris-Pratt" class="headerlink" title="Knuth-Morris-Pratt"></a>Knuth-Morris-Pratt</h4><p>KMP算法就可以解决上面所说的问题，不用回退，最多也就访问一次就可以解决问题</p><p>首先先要了解一个名词</p><p><strong>Deterministic Finite State Automaton</strong></p><p>确定型有穷（状态）自动机（DFA），是一个抽象的字符串查找机器。</p><ul><li><p>状态数目是有穷的（包括初始状态和终结状态）。</p></li><li><p>每个状态对每个字符有且仅有一个转移。</p></li><li><p>转移到终结状态则接受这个字符串，即含有我们寻找的子串（模式）。</p></li></ul><p>其中 dfa[i][j] 表示状态 j 遇到字符 i 会转移到下一个状态，并不包括终结状态。</p><p>现在查找子串就很简单啦，一开始在初始状态，文本流读到哪个字符就往哪条路走，要是走到了终结状态，也就表示找到了子串。像我们这样构造的 DFA，走到状态几，就说明已经匹配了多少个字符其实，所以走到终结状态就表示全部匹配。</p><p>就像这样</p><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180806171432655-228466052.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">seach</span> <span class="params">(String txt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,N = txt.length();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; N &amp;&amp; j &lt; M; i++) </span><br><span class="line">        j = dfa[txt.chaAt(i)][j];</span><br><span class="line">    <span class="keyword">if</span> (j == M) <span class="keyword">return</span> i - M;</span><br><span class="line">    <span class="comment">//这种情况就是没有找到</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的匹配过程特别轻松，重要的就是下面构造dfa这个数组的过程。</p><h4 id="Construct-DFA"><a href="#Construct-DFA" class="headerlink" title="Construct DFA"></a>Construct DFA</h4><ol><li>匹配情况</li></ol><p>匹配的时候转移就特别好办，直接进行到下一个状态就可以了。</p><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180806171446315-1202770884.png" alt=""></p><ol><li>不匹配的情况</li></ol><p>关键在不匹配时该如何转移。</p><p>假设在状态 j 时读到的下一个字符 c 不等于要找的子串的第 j + 1 个字符（pat.charAt(j)，从 0 标号），那么这个时候，我们从文本流中最近读出的 j - 1 个字符即为 pat[1..j - 1] + c，就是暴力算法要重新扫描的部分。</p><p>当前首字母到状态 j 出现了不匹配，按暴力算法该丢弃它从下一个字母再开始，即 pat[1]，再一路重新扫描到 c。所以，现在状态 j 遇到 c 该怎么转移，实际上和字符串 pat[1.. j - 1] + c 在 DFA 中所到状态碰到 c 的转移目标一样才对。于是我们这么计算 dfa[c][j]：在 DFA 上模拟 pat[1.. j - 1]，然后直接取字符 c 的转移。</p><p>下面举个例子 计算状态5的时候 如何去考虑字符A 和 字符B的转移</p><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180806171501965-420417384.png" alt=""></p><p>具体可以看下面的代码，因为这里存在一个 restart state 直接用 x来表示，因为这里的状态有的时候可以直接转移初始状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KMP</span> <span class="params">(String pat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.pat = pat;</span><br><span class="line">    M = pat.length();</span><br><span class="line">    dfa = <span class="keyword">new</span> <span class="keyword">int</span> [R][M];</span><br><span class="line">    <span class="comment">//设置初始状态</span></span><br><span class="line">    <span class="comment">//这里的版本就是构造有限类型的自动机，帮助记录状态迁移</span></span><br><span class="line">    dfa[pat.chaAt(<span class="number">0</span>)][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, j = <span class="number">1</span>; j &lt; M; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; R; c++)</span><br><span class="line">            dfa[c][j] = dfa[c][x];</span><br><span class="line">        dfa[pat.charAt(j)][j] = j + <span class="number">1</span>;</span><br><span class="line">        x = dfa[pat.charAt(j)][x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这个算法的复杂度 优化之后 也达到了 (o(M) + o(N)) * 字母表</p><p>于是 C++ 版本里面会再次进行优化</p><p>注：  这里还有两张算法<br><strong>Boyer-Moore</strong> 与 <strong>Rabin-Karp</strong></p><p>这个<a href="https://www.cnblogs.com/mingyueanyao/p/9404556.html" target="_blank" rel="noopener">博客</a>中有详细的讲解，就不再重复记录了。</p><h3 id="C-from-some-template-in-acm"><a href="#C-from-some-template-in-acm" class="headerlink" title="C++ from some template in acm"></a>C++ from some template in acm</h3><p>当上面的有限型自动机优化的版本，最后导致的结果就是 每一都得遍历一遍字母表 所以有没有其他办法来进行优化呢</p><p>所以就有了 改进的kmp算法<br>利用 模式串中的 最长前缀与最长后缀的关系来构造next数组</p><p>就像这个样子</p><p><img src="https://img-blog.csdn.net/2018100519473444?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3OTY5NDMz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p>于是这里就先讲解一下 </p><h4 id="构造next数组的过程"><a href="#构造next数组的过程" class="headerlink" title="构造next数组的过程"></a>构造next数组的过程</h4><p>我们规定任何一个串，next[1]=0。(不用next[0]，与串的所有对应)，仍是一张动图搞定问题：</p><p><img src="https://img-blog.csdn.net/20181005223221225?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3OTY5NDMz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p>通过把next值“看”出来，我们再来分析next值，这就很容易得到超级有名的公式了，这个式子对后面的算法理解很重要！所以先要看懂这个式子，如果上面的内容通下来了，这个应该很容易看懂了：</p><p><img src="https://img-blog.csdn.net/20181005224812581?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3OTY5NDMz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p>首先是构造next数组的过程。</p><h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNext</span><span class="params">(<span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lenp = p.size();</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; lenp - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || p[j] == p[i]) &#123;</span><br><span class="line">            next[++i] = ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然 这样写next数组是完全没有问题，但是 如果有一种情况p[next[j]] == p[j] 当出现这样的情况该如何解决呢？直接看图。</p><p>比如，如果用之前的next 数组方法求模式串“abab”的next 数组，可得其next 数组为-1 0 0 1（0 0 1 2整体右移一位，初值赋为-1），当它跟下图中的文本串去匹配的时候，发现b跟c失配，于是模式串右移j - next[j] = 3 - 1 =2位。</p><p><img src="http://hi.csdn.net/attachment/201106/14/8394323_1308075859Zfue.jpg" alt=""></p><p>右移2位后，b又跟c失配。事实上，因为在上一步的匹配中，已经得知p[3] = b，与s[3] = c失配，而右移两位之后，让p[ next[3] ] = p[1] = b 再跟s[3]匹配时，必然失配。问题出在哪呢？</p><p><img src="http://hi.csdn.net/attachment/201106/14/8394323_13080758591kyV.jpg" alt=""></p><p>问题出在不该出现p[j] = p[ next[j] ]。为什么呢？理由是：当p[j] != s[i] 时，下次匹配必然是p[ next [j]] 跟s[i]匹配，如果p[j] = p[ next[j] ]，必然导致后一步匹配失败（因为p[j]已经跟s[i]失配，然后你还用跟p[j]等同的值p[next[j]]去跟s[i]匹配，很显然，必然失配），所以不能允许p[j] = p[ next[j ]]。如果出现了p[j] = p[ next[j] ]咋办呢？如果出现了，则需要再次递归，即令next[j] = next[ next[j] ]。</p><p>所以就需要更改一下 下面的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNext</span><span class="params">(<span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lenp = p.size();</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; lenp - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || p[j] == p[i]) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//重点就在下面这个地方</span></span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span> (p[i] != p[j]) next[i] = j;</span><br><span class="line">            <span class="comment">//这个地方就放入其继续进入递归。</span></span><br><span class="line">            <span class="keyword">else</span> next[i] = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面就只剩下一开始匹配过程了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span> <span class="params">(<span class="built_in">string</span> s,<span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> slen = s.size();</span><br><span class="line">    <span class="keyword">int</span> plen = p.size();</span><br><span class="line">    <span class="keyword">while</span> (i &lt; slen &amp;&amp; j &lt; plen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] = p[j]) &#123;</span><br><span class="line">            i ++ ;</span><br><span class="line">            j ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == plen) <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面还有两种拓展类型的算法<br>BM算法 与 sunday算法<br>这两种算法 有时间的情况下再来总结</p><p>这里直接贴出网址<br><a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="字符串" scheme="http://wsx1128.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="kmp" scheme="http://wsx1128.cn/tags/kmp/"/>
    
  </entry>
  
  <entry>
    <title>Tries --- the course of algorithm</title>
    <link href="http://wsx1128.cn/2019/09/17/Tries-the-course-of-algorithm/"/>
    <id>http://wsx1128.cn/2019/09/17/Tries-the-course-of-algorithm/</id>
    <published>2019-09-17T10:56:00.000Z</published>
    <updated>2019-09-17T11:59:05.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="单词查找树-字典树"><a href="#单词查找树-字典树" class="headerlink" title="单词查找树(字典树)"></a>单词查找树(字典树)</h2><p>首先先贴出 要实现的api:</p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180729171733111-1117062077.png" alt=""></p><h3 id="R-way-Tries"><a href="#R-way-Tries" class="headerlink" title="R-way Tries"></a>R-way Tries</h3><p>这里实现的要点就是在每一个node类里面加入一个数组去记录每一个字符可能存在的node 意思就是 256个 算上所有ASCII里面的</p><p>这里就不贴出具体函数表示功能的示意图了。</p><h4 id="Tries-Java-implementaion"><a href="#Tries-Java-implementaion" class="headerlink" title="Tries: Java implementaion"></a>Tries: Java implementaion</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriesST</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> R = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">private</span> Node root = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object value;</span><br><span class="line">        <span class="keyword">private</span> Node[] next = <span class="keyword">new</span> Node[R]; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span> <span class="params">(String key, Value val)</span> </span>&#123;</span><br><span class="line">        root = put(root, key, val, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, String key, Value val, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) x = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">if</span> (d == key.length()) &#123;</span><br><span class="line">            x.val = val;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> c = key.charAt(d);</span><br><span class="line">        x.next[c] = put(x.next[c], key, val, d + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span> <span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Node x = get(root, key, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> (Value)x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">get</span><span class="params">(Node x, String key, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (d == key.length()) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">char</span> c = key.charAt(d);</span><br><span class="line">        <span class="keyword">return</span> get(x.next[c], key, d + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，上面这个算法可以很快匹配到字符串，但是特别郎芬空间，因为其有很多误用的空节点，并且空链接也太多了。</p><h4 id="Tries-deletion"><a href="#Tries-deletion" class="headerlink" title="Tries: deletion"></a>Tries: deletion</h4><p>删除单词查找树中的某个字符串时，首先要找到它，然后把最后一个节点的值置空，再递归删除没有非空链接的空值节点。例子：</p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180729171843615-47757674.png" alt=""></p><p>这里没有例子，就直接给出相应的图了。</p><h3 id="Ternary-Search-Tries"><a href="#Ternary-Search-Tries" class="headerlink" title="Ternary Search Tries"></a>Ternary Search Tries</h3><p>这里有点借鉴快排的思想，将每一个节点分成三个链接，大于，小于，等于<br>三向单词查找树，如图：</p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180730211441659-95166443.png" alt=""></p><p>这里也不再详细讲解其插入，构造，删除的过程了，类似于前面。</p><h4 id="TST-Java-implementation"><a href="#TST-Java-implementation" class="headerlink" title="TST: Java implementation"></a>TST: Java implementation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TST</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Value val;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">private</span> Node left, mid, right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Value val)</span> </span>&#123;</span><br><span class="line">        root = put(root, key, val, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, String key, Value val, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = key.charAt(d);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x = <span class="keyword">new</span> Node();</span><br><span class="line">            x.c = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c &lt; x.c) x.left = put(x.left, key, val, d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; x.c) x.right = put(x.right, key, val, d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d &lt; key.length() - <span class="number">1</span>) x.mid = put(x.mid, key, val, d + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> x.val = val;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Node x = get(root, key, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">get</span><span class="params">(Node x, String key, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">char</span> c = key.charAt(d);</span><br><span class="line">        <span class="keyword">if</span> (c &lt; x.c) <span class="keyword">return</span> get(x.left, key, d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; x.c) <span class="keyword">return</span> get(x.right, key, d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d &lt; key.length() - <span class="number">1</span>) <span class="keyword">return</span> get(x.mid, key, d + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TST的复杂度其实有点时候是和红黑是相当，查找的效率有的时候是跟哈希的符号表也差不多，所以可能通过相应的平衡操作来保持其的性能。</p><p><strong>不过有的时候还可以将其与R-way tries 结合起来</strong></p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180731115403647-1725352123.png" alt=""></p><p>上面虽然空间上面会多花一点，但是查找性能会大大提升。</p><h3 id="Character-based-Operations"><a href="#Character-based-Operations" class="headerlink" title="Character-based Operations"></a>Character-based Operations</h3><h4 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h4><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180801101623633-226094687.png" alt=""></p><p>返回其的所有的存储的字符串 就像中序遍历这棵树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> Queue&lt;String&gt;();</span><br><span class="line">    collect(root, <span class="string">""</span>, queue);</span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prefix: sequence of characters on path from root to x</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collect</span><span class="params">(Node x, String prefix, Queue&lt;String&gt; q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//只有在满足了这个条件才会入队。</span></span><br><span class="line">    <span class="keyword">if</span> (x. val != <span class="keyword">null</span>) q.enqueue(prefix);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="number">0</span>; c &lt; R; c++)</span><br><span class="line">        collect(x.next[c], prefix + c, q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Prefix"><a href="#Prefix" class="headerlink" title="Prefix"></a>Prefix</h4><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180801101645088-790496881.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">keyWithPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> Queue&lt;String&gt;();</span><br><span class="line">    <span class="comment">// x: root of subtrie for all strings</span></span><br><span class="line">    <span class="comment">// beginning with given prefix</span></span><br><span class="line">    Node x = get(root, prefix, <span class="number">0</span>);</span><br><span class="line">    collect(x, prefix, queue);</span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Longest-Prefix"><a href="#Longest-Prefix" class="headerlink" title="Longest Prefix"></a>Longest Prefix</h4><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180801101657607-1814743932.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/886021/201808/886021-20180801101711263-980961056.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPrefixOf</span><span class="params">(String query)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = search(root, query, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> query.substring(<span class="number">0</span>, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(Node x, String query, <span class="keyword">int</span> d, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> length;</span><br><span class="line">    <span class="keyword">if</span> (x.val != <span class="keyword">null</span>) length = d;</span><br><span class="line">    <span class="keyword">if</span> ( d == query.length()) <span class="keyword">return</span> length;</span><br><span class="line">    <span class="keyword">char</span> c = query.charAt(d);</span><br><span class="line">    <span class="keyword">return</span> search(x.next[c], query, d + <span class="number">1</span>, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面继续提到了 前缀树与后缀树。</p><p>参考该<a href="https://www.cnblogs.com/mingyueanyao/p/9386004.html" target="_blank" rel="noopener">博客</a></p><p><strong>侵删</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="字符串" scheme="http://wsx1128.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Radix Sort --- the course of algorithm</title>
    <link href="http://wsx1128.cn/2019/09/17/Radix-Sort-the-course-of-algorithm/"/>
    <id>http://wsx1128.cn/2019/09/17/Radix-Sort-the-course-of-algorithm/</id>
    <published>2019-09-17T07:09:25.000Z</published>
    <updated>2019-09-17T08:09:50.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p><a href="https://www.coursera.org/learn/algorithms-part2/supplement/v5gBy/lecture-slides" target="_blank" rel="noopener">课程地址</a></p><h3 id="String-in-java"><a href="#String-in-java" class="headerlink" title="String in java"></a>String in java</h3><h4 id="Char-Data-Type"><a href="#Char-Data-Type" class="headerlink" title="Char Data Type"></a>Char Data Type</h4><p>C 语言中的字符数据类型占一个字节（8 比特），最多只能表示 256 个字符。支持 7 位的标准 ASCII(American Standard Code for Information Interchange，美国标准信息交换编码)，最高位用于奇偶校验。或是拓展的 ASCII，最高位用来确定附加的 128 个特殊的字符。</p><p>而java中的字符数据类型占两个字节，支持16位的Unicode编码。</p><h4 id="String-Data-Type"><a href="#String-Data-Type" class="headerlink" title="String Data Type"></a>String Data Type</h4><p>java String api</p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180721162521004-905655523.png" alt="api"></p><p>接下来就是java中两种字符串类型的比较，一种是String，另外一种就是StringBuilder 这两种之间的区别就在于 一个是内部可变，另外一种就是内部不可变。</p><p>然而 还有一种StringBuffer 这种与前面后者的相比就是线程安全与否的区别了。</p><h3 id="Key-indexed-counting"><a href="#Key-indexed-counting" class="headerlink" title="Key-indexed counting"></a>Key-indexed counting</h3><p>因为一般字符串中基于排序的比较 基本上至少都是需要NlgN的比较，然后有一种基数比较的办法诞生，称作<strong>键索引计数比较法</strong></p><p>设想有个数组 a = {d, a, c, f, f, b, d, b, f, b, e, a} 要排序，知道总共有 6 个不同的字母，要先统计它们出现的频数。</p><p>字母 a 的键为 0 （a[i] - ‘a’），出现的次数在 count 数组中的索引为键值加一。</p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180721174333877-1881107237.png" alt=""></p><p><strong>java implements</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> R = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> N = a.length;</span><br><span class="line"><span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[R + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    count[a[i] - <span class="string">'a'</span> + <span class="number">1</span>]++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历一遍count数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; i++)</span><br><span class="line">    count[i + <span class="number">1</span>] += count[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在 count 数组中保存的即对应字母在排好序的数组中开始的索引值，像两个 d 应该放在 a[6] 和 a[7]。</span></span><br><span class="line"><span class="keyword">char</span>[] aux = <span class="keyword">new</span> <span class="keyword">char</span>[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    aux[count[a[i] - <span class="string">'a'</span>]++] = a[i];</span><br></pre></td></tr></table></figure><p>辅助数组 aux 借助 count 数组找到了每个 a[i] 的位置。注意 count 数组在这一步中还会改变，每次要加一，下次相同的 a[i] 就会放在下一个位置。所以这个算法也是稳定的（stable），相同元素间的相对顺序不会改变。</p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180721174344508-415087789.png" alt=""></p><p>最后把 aux 数组一个个赋值回原数组，即完成了排序。</p><p>键索引计数法排序只需要几个一重循环，不需要比较，只要 R 在 N 的一个常数因子范围内，它就是一个线性时间级别的排序方法。</p><h3 id="LSD-Radix-Sort"><a href="#LSD-Radix-Sort" class="headerlink" title="LSD Radix Sort"></a>LSD Radix Sort</h3><p>低位优先排序，就是将等长的字符串进行排序，必须是等长的字符串进行排序，需要做的是从右向左进行排序</p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180723155344760-2032525065.png" alt=""></p><p>这个排序是稳定的，相同键之间的相对顺序是不会改变的，意思就是在i前面的，在i + 1排完字后，依然还是在i前面，如果是相同键的情况下。</p><h4 id="LSD-Java-Implementation"><a href="#LSD-Java-Implementation" class="headerlink" title="LSD: Java Implementation"></a>LSD: Java Implementation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LSD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String []a,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> R = <span class="number">256</span>;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        String[] aux = <span class="keyword">new</span> String[N];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从后往前面依次进行排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d = w - <span class="number">1</span>; d &gt;= <span class="number">0</span>; d--) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span> [R + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">                count[a[i].charAt(d) + <span class="number">1</span>] ++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; R; r++) </span><br><span class="line">                count[r + <span class="number">1</span>] += count[r];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">                aux[count[a[i].charAt(d)]++] = a[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">                a[i] = aux[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于典型的应用,R(基数)远小于N(总数),对定长(W)的字符串排序的时间是MN级别。</strong></p><h3 id="MSD-Radix-Sort"><a href="#MSD-Radix-Sort" class="headerlink" title="MSD Radix Sort"></a>MSD Radix Sort</h3><p>高位排序，有别于低位排序的是，其可以对不等长的字符串进行排序，从左向右进行一位一位的扫描，然后再递归的对子字符串进行基数排序。</p><p>就像这样：<br><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180723172529187-913394612.png" alt=""></p><p>因为涉及到递归，所以必须得设置一下递归出口，用一下函数直接设置递归出口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">charAt</span><span class="params">(String s, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d &lt; s.length) <span class="keyword">return</span> s.charAt(d);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MSD-Java-Implementation"><a href="#MSD-Java-Implementation" class="headerlink" title="MSD: Java Implementation"></a>MSD: Java Implementation</h4><p>由于上面多了一个键，所以现在count的数组大小必须是R + 2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] a)</span> </span>&#123;</span><br><span class="line">    aux = <span class="keyword">new</span> String[a.length];</span><br><span class="line">    sort(a, aux, <span class="number">0</span>, a.length - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] a, String[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[R + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; i++)</span><br><span class="line">        count[charAt(a[i], d) + <span class="number">2</span>]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; R + <span class="number">1</span>; r++)</span><br><span class="line">        count[r + <span class="number">1</span>] += count[r];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= h; i++)</span><br><span class="line">        aux[count[charAt(a[i], d) + <span class="number">1</span>]++] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; i++)</span><br><span class="line">        a[i] = aux[i -lo];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sort R subarrays recursively</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; R; r++)</span><br><span class="line">        sort(a, aux, lo + count[r], lo + count[r + <span class="number">1</span>] - <span class="number">1</span>, d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//另外用于辅助的数组aux可以重复使用，但是每一次都需要新的count数组，不仅耗费空间，还需要时间去初始化，所以对于小型的子数组，可以直接使用插入排序直接进行改善</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; lo &amp;&amp; less(a[j], a[j - <span class="number">1</span>], d); j--)</span><br><span class="line">            exch(a, j, j -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(String v, String w, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v.substring(d).compareTo(w.substring(d)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MSD算法的性能取决于要输入的数据，最坏的情况下需要检查的所有的字符，和LSD一样都是线性的时间级别。<br><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180723204033182-1142104535.png" alt=""></p><h3 id="3-way-Radix-Quicksort"><a href="#3-way-Radix-Quicksort" class="headerlink" title="3-way Radix Quicksort"></a>3-way Radix Quicksort</h3><p>三相切分的思想其实很简单，基于MSD的思想，加入了快排，将第一个字符串的首字母，进行切分，分成大于，小于，等于该字母的组合，然后再分别进入到子字符串中进行递归使用。</p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180724163107802-1133643500.png" alt=""></p><h4 id="3-way-String-Quicksort-Java-Implementation"><a href="#3-way-String-Quicksort-Java-Implementation" class="headerlink" title="3-way String Quicksort: Java Implementation"></a>3-way String Quicksort: Java Implementation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] a)</span> </span>&#123;</span><br><span class="line">    sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String []a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lo &gt;= hi) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> lt = lo, gt = hi;</span><br><span class="line">    <span class="keyword">int</span> v = charAt(a[lo], d);</span><br><span class="line">    <span class="keyword">int</span> i = lo + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = charAt(a[i], d);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; v) exch(a, lt++, i++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; v) exch(a,i,gt--);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是再次比较前面的数组进行三相切分。</span></span><br><span class="line">    sort(a, lo, lt - <span class="number">1</span>, d);</span><br><span class="line">    <span class="comment">//这里的意思第一个字母是相同的，所以可以开始递归第二个字母了</span></span><br><span class="line">    <span class="keyword">if</span> (v &gt;= <span class="number">0</span>) sort(a, lt, gt, d + <span class="number">1</span>); </span><br><span class="line">    sort(a, gt + <span class="number">1</span>, hi, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Suffix-Arrays"><a href="#Suffix-Arrays" class="headerlink" title="Suffix Arrays"></a>Suffix Arrays</h3><p>字符串后缀数组 有很多应用，比如关键词查找，最长重复子字符等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] suffixes(String s) &#123;</span><br><span class="line">    <span class="keyword">int</span> N = s.length();</span><br><span class="line">    String[] suffixes = <span class="keyword">new</span> String[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        suffixes[i] = s.substring(i, N);</span><br><span class="line">    <span class="keyword">return</span> suffixes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于后缀数组进行排序，就可以把相同的字符串给安排到一起了，这样的话查找关键词也就快了很多。</p><p><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180727212115060-421776584.png" alt=""></p><p>就像这样，最长重复子字符串也差不多<br><img src="https://images2018.cnblogs.com/blog/886021/201807/886021-20180727212127781-214870736.png" alt=""></p><h4 id="LRS-Java-Implementation"><a href="#LRS-Java-Implementation" class="headerlink" title="LRS: Java Implementation"></a>LRS: Java Implementation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">lrs</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = s.length();</span><br><span class="line"></span><br><span class="line">    String[] suffixes = <span class="keyword">new</span> String[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        suffixes[i] =s.substring(i, N);</span><br><span class="line"></span><br><span class="line">    Arrays.sort(suffixes);</span><br><span class="line"></span><br><span class="line">    String lrs = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// compute longest common prefix</span></span><br><span class="line">        <span class="comment">// between adjacent suffixes insorted order</span></span><br><span class="line">        <span class="keyword">int</span> len = lcp(suffixes[i], suffixes[i + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; lrs.length())</span><br><span class="line">           lrs = suffixes[i].substring(<span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lrs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过最坏的情况,应该会达到 n$^{2}$。<br>因为输入字符串重复时，需要很多次比较才能完成排序，所以这里介绍了另外一种算法 Manber-Myer MSD 算法</p><p>有兴趣的话 可以自己去查一查 这里就不在多说了。</p><p>本篇文章借鉴该<a href="https://www.cnblogs.com/mingyueanyao/p/9347094.html" target="_blank" rel="noopener">博客</a></p><p>若侵删。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="字符串" scheme="http://wsx1128.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>BaseballElimination</title>
    <link href="http://wsx1128.cn/2019/09/14/BaseballElimination/"/>
    <id>http://wsx1128.cn/2019/09/14/BaseballElimination/</id>
    <published>2019-09-14T10:44:03.000Z</published>
    <updated>2019-09-14T18:06:04.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://coursera.cs.princeton.edu/algs4/assignments/baseball/specification.php" target="_blank" rel="noopener">题目链接</a></h3><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="/2019/09/14/BaseballElimination/1.png" alt="1"><br><img src="/2019/09/14/BaseballElimination/2.png" alt="2"><br><img src="/2019/09/14/BaseballElimination/3.png" alt="3"><br><img src="/2019/09/14/BaseballElimination/4.png" alt="4"><br><img src="/2019/09/14/BaseballElimination/5.png" alt="5"></p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="题目意思"><a href="#题目意思" class="headerlink" title="题目意思"></a>题目意思</h4><p>给你n支队伍，然后每一个队伍有三个参数，赢得比赛，输的比赛，以及还有多少场比赛没打，然后再给一个所有剩余比赛的示意图，来表示剩余比赛谁与谁去打。获胜条件是 只有一支队伍胜利，其余的全部直接被淘汰。</p><p>现在需要做的是评估其中的一支队伍是否被淘汰。</p><p><strong>淘汰方式有两种</strong></p><ul><li><p>第一种，评估队伍的最大获胜数，（算上其还没有打的比赛全部赢），还是没有某些队伍已经获取的胜利比赛数多，那么则可以说这个队伍已经被淘汰了。</p></li><li><p>第二种，需要建立一个最大流的图，然后通过最大流的图，来判断是否已经在数学上被淘汰了。</p></li></ul><h4 id="最大流的建立方法"><a href="#最大流的建立方法" class="headerlink" title="最大流的建立方法"></a>最大流的建立方法</h4><p>这里一共需要建立 2 + n - 1 + $C_{2}^{n - 1}\textrm{}$ 个节，分别是源点与汇点，加上队伍节点与比赛节点，就像下面这一张图</p><p><img src="https://coursera.cs.princeton.edu/algs4/assignments/baseball/baseball.png" alt=""></p><pre><code>如上图所示，评判方式，如果从S点出发的边里流量都等于容量的话，那么 此时的flow 一定等同于 最大流，说明其他队伍用了九牛二虎之力所做到的最好的结果也就是与评估队伍打成平手。而如果flow大于最大流，则说明，有一些从s出发的边并没有达到容量，再还有比赛没有打完的时候，就已经有队伍分数跟评估队伍的分数一样了，则说明评估队伍已经被淘汰了。</code></pre><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.FlowEdge;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.FlowNetwork;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.FordFulkerson;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseballElimination</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flows;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] win;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] lose;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] left;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[][] remain;</span><br><span class="line">    <span class="keyword">private</span> String[] teams;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> teamnum;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer,Integer&gt;pos;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, Integer&gt; map;</span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> allv;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gameTeams;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseballElimination</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (filename == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Wrong file name..."</span>);</span><br><span class="line">        In in = <span class="keyword">new</span> In(filename);</span><br><span class="line">        teamnum = Integer.parseInt(in.readLine());</span><br><span class="line">        teams = <span class="keyword">new</span> String[teamnum];</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        win = <span class="keyword">new</span> <span class="keyword">int</span>[teamnum];</span><br><span class="line">        lose = <span class="keyword">new</span> <span class="keyword">int</span> [teamnum];</span><br><span class="line">        left = <span class="keyword">new</span> <span class="keyword">int</span>[teamnum];</span><br><span class="line">        remain = <span class="keyword">new</span> <span class="keyword">int</span>[teamnum][teamnum];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (in.hasNextLine()) &#123;</span><br><span class="line">            String readline = in.readLine().trim();</span><br><span class="line">            String []token = readline.split(<span class="string">" +"</span>);</span><br><span class="line">            map.put(token[<span class="number">0</span>], tot);</span><br><span class="line"></span><br><span class="line">            teams[tot] = token[<span class="number">0</span>];</span><br><span class="line">            win[tot] = Integer.parseInt(token[<span class="number">1</span>]);</span><br><span class="line">            lose[tot] = Integer.parseInt(token[<span class="number">2</span>]);</span><br><span class="line">            left[tot] = Integer.parseInt(token[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; teamnum; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == tot) remain[tot][i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> remain[tot][i] = Integer.parseInt(token[<span class="number">4</span> + i]);</span><br><span class="line">            &#125;</span><br><span class="line">            tot++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfTeams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teamnum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">teams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.keySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wins</span><span class="params">(String team)</span> </span>&#123;</span><br><span class="line">        valid(team);</span><br><span class="line">        Integer id = map.get(team);</span><br><span class="line">        <span class="keyword">return</span> win[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">losses</span><span class="params">(String team)</span> </span>&#123;</span><br><span class="line">        valid(team);</span><br><span class="line">        Integer id = map.get(team);</span><br><span class="line">        <span class="keyword">return</span> lose[id];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remaining</span><span class="params">(String team)</span> </span>&#123;</span><br><span class="line">        valid(team);</span><br><span class="line">        Integer id = map.get(team);</span><br><span class="line">        <span class="keyword">return</span> left[id];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">against</span><span class="params">(String team1, String team2)</span> </span>&#123;</span><br><span class="line">        valid(team1);</span><br><span class="line">        valid(team2);</span><br><span class="line">        Integer id1 = map.get(team1);</span><br><span class="line">        Integer id2 = map.get(team2);</span><br><span class="line">        <span class="keyword">return</span> remain[id1][id2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> FlowNetwork <span class="title">buildFlowNetwrok</span><span class="params">(String team)</span> </span>&#123;</span><br><span class="line">        valid(team);</span><br><span class="line">        Integer id = map.get(team);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> most = win[id] + left[id];</span><br><span class="line"></span><br><span class="line">        gameTeams = (teamnum - <span class="number">1</span>) * (teamnum - <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">        allv = gameTeams + teamnum - <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">        flows = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pos = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, t = allv - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> gameIndex = <span class="number">1</span>; <span class="comment">//比赛结点</span></span><br><span class="line">        <span class="keyword">int</span> indexi = gameTeams;<span class="comment">// 球队节点</span></span><br><span class="line">        <span class="keyword">int</span> indexj = indexi;</span><br><span class="line">        <span class="keyword">double</span> max = Double.POSITIVE_INFINITY;</span><br><span class="line"></span><br><span class="line">        FlowNetwork flowNetwork = <span class="keyword">new</span> FlowNetwork(allv);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; teamnum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id == i) <span class="keyword">continue</span>;</span><br><span class="line">            indexi++;</span><br><span class="line">            indexj = indexi;</span><br><span class="line">            <span class="keyword">if</span>(win[i] &gt; most) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; teamnum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == id) <span class="keyword">continue</span>;</span><br><span class="line">                indexj++;</span><br><span class="line">                flows += remain[i][j];</span><br><span class="line">                flowNetwork.addEdge(<span class="keyword">new</span> FlowEdge(s,gameIndex,remain[i][j]));</span><br><span class="line">                flowNetwork.addEdge(<span class="keyword">new</span> FlowEdge(gameIndex,indexi,max));</span><br><span class="line">                flowNetwork.addEdge(<span class="keyword">new</span> FlowEdge(gameIndex,indexj,max));</span><br><span class="line">                gameIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">            pos.put(indexi,i);</span><br><span class="line"></span><br><span class="line">            flowNetwork.addEdge(<span class="keyword">new</span> FlowEdge(indexi,t,most - win[i]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flowNetwork;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">valid</span><span class="params">(String team)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (team == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Wrong teams"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(team)) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Not in the team"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEliminated</span><span class="params">(String team)</span> </span>&#123;</span><br><span class="line">       valid(team);</span><br><span class="line">       FlowNetwork flowNetwork = buildFlowNetwrok(team);</span><br><span class="line">       <span class="keyword">int</span> id = map.get(team);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (flowNetwork == <span class="keyword">null</span>) &#123;</span><br><span class="line">           set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; teamnum; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (id == i) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (win[id] + left[id] &lt; win[i]) &#123;</span><br><span class="line">                    set.add(teams[i]);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       FordFulkerson fordFulkerson = <span class="keyword">new</span> FordFulkerson(flowNetwork,<span class="number">0</span>,allv - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (flows &gt; fordFulkerson.value()) &#123;</span><br><span class="line">           set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = gameTeams + <span class="number">1</span>; i &lt; allv - <span class="number">1</span> ;i++) &#123;</span><br><span class="line">               <span class="comment">//其实这个地方是一直弄不清楚这个函数，主要是弄不清 为什么这个点在最小割上面 就可以证明出 来自s点的边 流量不等于容量</span></span><br><span class="line">               <span class="comment">//查阅了相关资料，最后发现，其实 这里incut 就相当于割边直接将整张图一分为2，这里是靠近源点s的</span></span><br><span class="line">               <span class="comment">//换言之，就是在跑完最后一遍寻找增广路的时候，是否会有在其剩余的路径上，意思就是 当我查看队伍的点的时候，只要没有剩余的流量，就一定不会遍历到这个点上</span></span><br><span class="line">               <span class="keyword">if</span> (fordFulkerson.inCut(i)) &#123;</span><br><span class="line">                   <span class="keyword">int</span> Id = pos.get(i);</span><br><span class="line">                   set.add(teams[Id]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">certificateOfElimination</span><span class="params">(String team)</span>  </span>&#123;</span><br><span class="line">        valid(team);</span><br><span class="line">        <span class="keyword">if</span> (isEliminated(team)) <span class="keyword">return</span> set;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意上面所说的位置，incut 这里就是标记是否有位置还有剩余，当最后一次在找增广路的时候，那么这些位置就是没有满的位置</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>觉得这次大作业做的特别诡异，主要是题目好了好久时间才理解其真正的意思，还有可能是对于最大流的概念理解的还是不够透彻，这就是我个人的问题，接下来所需要做的就是 下一次的大作业，以及好好理解一下 最大流 最小割定理之间的变化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.cn/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>SeamCarver</title>
    <link href="http://wsx1128.cn/2019/09/10/SeamCarver/"/>
    <id>http://wsx1128.cn/2019/09/10/SeamCarver/</id>
    <published>2019-09-10T13:20:06.000Z</published>
    <updated>2019-09-10T13:41:41.157Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://coursera.cs.princeton.edu/algs4/assignments/seam/specification.php" target="_blank" rel="noopener">题目链接</a></p><p><strong>题目详图</strong><br><img src="/2019/09/10/SeamCarver/1.png" alt="1"><br><img src="/2019/09/10/SeamCarver/2.png" alt="2"><br><img src="/2019/09/10/SeamCarver/3.png" alt="3"><br><img src="/2019/09/10/SeamCarver/4.png" alt="4"><br><img src="/2019/09/10/SeamCarver/5.png" alt="5"><br><img src="/2019/09/10/SeamCarver/6.png" alt="6"></p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>这道题是我这几次做这个java大作业里面，还特别有意思的一次作业，主要是这次介绍的这个算法特别流弊，感觉特别常见，就是发现于2007年的算法，并且应用于 Photoshop内核的算法，用于图片的拉伸与缩放。</p><p>先开始是作为最短路里面的算法出现，感觉特别的懵逼，因为完全不知道该怎么下手，不过后面就好很多了，意思就是使用一个特定的公式，将每一个像素点与周围8个方向的点的差异相联系，作为整个像素点的权值，然后从不同于拉伸的方向，从顶部到底部找一条像素点权值最小的路线，然后将这条路线进行删除，最后便得到结果。</p><p>然后找最短路的办法，这里使用的就是 对每一个点，至上而下的松弛，最终得到结果，这次作业只是看着有点吓人，但是其实还是特别简单的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Picture;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeamCarver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里图像会发生改变，所以这里不能直接写定义成不变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> [][] picture;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> [][] energy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a seam carver object based on the given picture</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeamCarver</span><span class="params">(Picture picture)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (picture == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">this</span>.height = picture.height();</span><br><span class="line">        <span class="keyword">this</span>.width = picture.width();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.picture = <span class="keyword">new</span> <span class="keyword">int</span> [width][height];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.width; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.height; j++) &#123;</span><br><span class="line">                <span class="keyword">this</span>.picture[i][j] = picture.getRGB(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        renewenergy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateindex</span><span class="params">(<span class="keyword">int</span> col, <span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= height || col &lt; <span class="number">0</span> || col &gt;= width) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Wrong index"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renewenergy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        energy = <span class="keyword">new</span> <span class="keyword">double</span>[width][height];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; height; j++) &#123;</span><br><span class="line">                calculatenergy(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculatenergy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        validateindex(x, y);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span> || y == <span class="number">0</span> || x == width - <span class="number">1</span> || y == height - <span class="number">1</span>) &#123;</span><br><span class="line">            energy[x][y] = <span class="number">1000.0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rgbUp = picture[x][y - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> rgbDown = picture[x][y + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> rgbLeft = picture[x - <span class="number">1</span>][y];</span><br><span class="line">        <span class="keyword">int</span> rgbRight = picture[x + <span class="number">1</span>][y];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> rx = Math.pow(((rgbLeft &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) - ((rgbRight &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>), <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">double</span> gx = Math.pow(((rgbLeft &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) - ((rgbRight &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>), <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">double</span> bx = Math.pow(((rgbLeft &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>) - ((rgbRight &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> ry = Math.pow(((rgbUp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) - ((rgbDown &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>), <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">double</span> gy = Math.pow(((rgbUp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) - ((rgbDown &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>), <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">double</span> by = Math.pow(((rgbUp &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>) - ((rgbDown &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        energy[x][y] =  Math.sqrt(rx + gx + bx + ry + gy + by);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Picture <span class="title">picture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Picture tmp = <span class="keyword">new</span> Picture(width, height);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; height; j++) &#123;</span><br><span class="line">                tmp.setRGB(i, j, picture[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">width</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">energy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        validateindex(x, y);</span><br><span class="line">        <span class="keyword">return</span> energy[x][y];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = height;</span><br><span class="line">        height = width;</span><br><span class="line">        width = temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> [][] en = <span class="keyword">new</span> <span class="keyword">double</span>[width][height];</span><br><span class="line">        <span class="keyword">int</span> [][] p = <span class="keyword">new</span> <span class="keyword">int</span>[width][height];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; height; j++) &#123;</span><br><span class="line">                en[i][j] = energy[j][i];</span><br><span class="line">                p[i][j] = picture[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        energy = en;</span><br><span class="line">        picture = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findHorizontalSeam() &#123;</span><br><span class="line">        transform();</span><br><span class="line">        <span class="keyword">int</span> [] res = findVerticalSeam();</span><br><span class="line">        transform();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relaxVertical</span><span class="params">(<span class="keyword">double</span>[][] disTo, <span class="keyword">int</span>[][]edgeTo, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        validateindex(x, y);</span><br><span class="line">        <span class="keyword">if</span> (disTo[x][y + <span class="number">1</span>] &gt; disTo[x][y] + energy[x][y + <span class="number">1</span>]) &#123;</span><br><span class="line">            disTo[x][y + <span class="number">1</span>] = disTo[x][y] + energy[x][y + <span class="number">1</span>];</span><br><span class="line">            edgeTo[x][y + <span class="number">1</span>] = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; disTo[x - <span class="number">1</span>][y + <span class="number">1</span>] &gt; disTo[x][y] + energy[x - <span class="number">1</span>][y + <span class="number">1</span>]) &#123;</span><br><span class="line">            disTo[x - <span class="number">1</span>][y + <span class="number">1</span>] = disTo[x][y] + energy[x - <span class="number">1</span>][y + <span class="number">1</span>];</span><br><span class="line">            edgeTo[x - <span class="number">1</span>][y + <span class="number">1</span>] = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; width - <span class="number">1</span> &amp;&amp; disTo[x + <span class="number">1</span>][y + <span class="number">1</span>] &gt; disTo[x][y] + energy[x + <span class="number">1</span>][y + <span class="number">1</span>]) &#123;</span><br><span class="line">            disTo[x + <span class="number">1</span>][y + <span class="number">1</span>] = disTo[x][y] + energy[x + <span class="number">1</span>][y + <span class="number">1</span>];</span><br><span class="line">            edgeTo[x + <span class="number">1</span>][y + <span class="number">1</span>] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findVerticalSeam() &#123;</span><br><span class="line">        <span class="keyword">int</span> [] seam = <span class="keyword">new</span> <span class="keyword">int</span>[height];</span><br><span class="line">        <span class="keyword">double</span> [][] disTo = <span class="keyword">new</span> <span class="keyword">double</span> [width][height];</span><br><span class="line">        <span class="keyword">int</span> [][] edgeTo = <span class="keyword">new</span> <span class="keyword">int</span> [width][height];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; height; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) disTo[i][j] = energy[i][j];</span><br><span class="line">                <span class="keyword">else</span> disTo[i][j] = Double.POSITIVE_INFINITY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里的顺序错了，因为 这里比较特殊的是矩阵的存法，所以必须将循环翻过来进行存取</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; height - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">                relaxVertical(disTo, edgeTo, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> min = Double.POSITIVE_INFINITY;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; disTo[i][height - <span class="number">1</span>]) &#123;</span><br><span class="line">                min = disTo[i][height - <span class="number">1</span>];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        seam[height - <span class="number">1</span>] = index;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = height - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            index = edgeTo[index][i + <span class="number">1</span>];</span><br><span class="line">            seam[i] = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> seam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove horizontal seam from current picture</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeHorizontalSeam</span><span class="params">(<span class="keyword">int</span>[] seam)</span> </span>&#123;</span><br><span class="line">        transform();</span><br><span class="line">        removeVerticalSeam(seam);</span><br><span class="line">        transform();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>[] seam)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (width &lt;= <span class="number">1</span> || seam == <span class="keyword">null</span> || seam.length != height) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (seam[i] &lt; <span class="number">0</span> || seam[i] &gt; width - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; Math.abs(seam[i - <span class="number">1</span>] - seam[i]) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove vertical seam from current picture</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeVerticalSeam</span><span class="params">(<span class="keyword">int</span>[] seam)</span> </span>&#123;</span><br><span class="line">        check(seam);</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (seam[i] &gt; max) max = seam[i];</span><br><span class="line">            <span class="keyword">if</span> (seam[i] &lt; min) min = seam[i];</span><br><span class="line">            <span class="comment">//这个地方可以直接该位置上将每一个位置的元素进行变化</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = seam[i]; j &lt; width - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                picture[j][i] = picture[j + <span class="number">1</span>][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        width = width - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; <span class="number">0</span>) min--;</span><br><span class="line">        <span class="keyword">if</span> (max &gt; width - <span class="number">1</span>) max = width - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; height; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = min; i &lt;= max; i++) &#123;</span><br><span class="line">                calculatenergy(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = max + <span class="number">1</span>; i &lt; width - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                energy[i][j] = energy[i + <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这里需要自己重温一下 上一周的作业 就是图的api这些部分，有的只是会用c++跑，用Java总是感觉有点力不从心，希望后面尽快熟悉起来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="普林斯顿算法大作业" scheme="http://wsx1128.cn/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E5%A4%A7%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>WordNet</title>
    <link href="http://wsx1128.cn/2019/09/10/WordNet/"/>
    <id>http://wsx1128.cn/2019/09/10/WordNet/</id>
    <published>2019-09-10T13:19:31.000Z</published>
    <updated>2019-09-14T17:56:55.055Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://coursera.cs.princeton.edu/algs4/assignments/wordnet/specification.php" target="_blank" rel="noopener">题目链接</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="/2019/09/10/WordNet/1.png" alt="题目图"><br><img src="/2019/09/10/WordNet/2.png" alt="题目图"><br><img src="/2019/09/10/WordNet/3.png" alt="题目图"><br><img src="/2019/09/10/WordNet/4.png" alt="题目图"><br><img src="/2019/09/10/WordNet/5.png" alt="题目图"><br><img src="/2019/09/10/WordNet/6.png" alt="题目图"><br><img src="/2019/09/10/WordNet/7.png" alt="题目图"><br><img src="/2019/09/10/WordNet/8.png" alt="题目图"></p><p>我个人觉得这一次大作业得重新做一遍，因为对于这次的大作业有一些地方，总还是弄不清楚，最关键的就是这次的图里面有一些api需要花时间去弄清楚</p><p>所以这里就不贴讲解了，时间过去太久了，反而自己也搞忘了，所以这里直接贴出代码</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>SAP.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Digraph;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SAP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ancestor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Digraph copyG;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] distTo1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] distTo2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] marked1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] marked2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Stack&lt;Integer&gt; stack1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Stack&lt;Integer&gt; stack2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor takes a digraph (not necessarily a DAG)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SAP</span><span class="params">(Digraph G)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (G == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"argument to G"</span>);</span><br><span class="line">        copyG = <span class="keyword">new</span> Digraph(G);</span><br><span class="line">        distTo1 = <span class="keyword">new</span> <span class="keyword">int</span> [G.V()];</span><br><span class="line">        distTo2 = <span class="keyword">new</span> <span class="keyword">int</span> [G.V()];</span><br><span class="line">        marked1 = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.V()];</span><br><span class="line">        marked2 = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.V()];</span><br><span class="line">        stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkVertex</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = marked1.length;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= v) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkVertices</span><span class="params">(Iterable&lt;Integer&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">int</span> v = marked1.length;</span><br><span class="line">        <span class="keyword">for</span> (Integer vv :x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vv == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">            <span class="keyword">if</span> (vv &lt; <span class="number">0</span> || vv &gt;= v) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = stack1.pop();</span><br><span class="line">            marked1[v] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = stack2.pop();</span><br><span class="line">            marked2[v] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// length of shortest ancestral path between v and w; -1 if no such path</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        checkVertex(v);</span><br><span class="line">        checkVertex(w);</span><br><span class="line">        compute(v, w);</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        length = -<span class="number">1</span>;</span><br><span class="line">        ancestor = -<span class="number">1</span>;</span><br><span class="line">        distTo1[v] = <span class="number">0</span>;</span><br><span class="line">        distTo2[w] = <span class="number">0</span>;</span><br><span class="line">        marked1[v] = <span class="keyword">true</span>;</span><br><span class="line">        marked2[w] = <span class="keyword">true</span>;</span><br><span class="line">        stack1.push(v);</span><br><span class="line">        stack2.push(w);</span><br><span class="line">        Queue&lt;Integer&gt; q1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; q2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q1.add(v);</span><br><span class="line">        q2.add(w);</span><br><span class="line">        bfs(q1, q2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">(Iterable&lt;Integer&gt; v, Iterable&lt;Integer&gt; w)</span> </span>&#123;</span><br><span class="line">        length = -<span class="number">1</span>;</span><br><span class="line">        ancestor = -<span class="number">1</span>;</span><br><span class="line">        Queue&lt;Integer&gt; q1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; q2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x :v) &#123;</span><br><span class="line">            marked1[x] = <span class="keyword">true</span>;</span><br><span class="line">            stack1.push(x);</span><br><span class="line">            distTo1[x] = <span class="number">0</span>;</span><br><span class="line">            q1.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x: w) &#123;</span><br><span class="line">            marked2[x] = <span class="keyword">true</span>;</span><br><span class="line">            stack2.push(x);</span><br><span class="line">            distTo2[x] = <span class="number">0</span>;</span><br><span class="line">            q2.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        bfs(q1, q2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Queue&lt;Integer&gt; q1, Queue&lt;Integer&gt; q2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!q1.isEmpty() || !q2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!q1.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = q1.remove();</span><br><span class="line">                <span class="keyword">if</span> (marked2[v]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (distTo1[v] + distTo2[v] &lt; length || length == -<span class="number">1</span>) &#123;</span><br><span class="line">                        ancestor = v;</span><br><span class="line">                        length = distTo1[v] + distTo2[v];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (distTo1[v] &lt; length || length == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> w: copyG.adj(v)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!marked1[w]) &#123;</span><br><span class="line">                            distTo1[w] = distTo1[v] + <span class="number">1</span>;</span><br><span class="line">                            marked1[w] = <span class="keyword">true</span>;</span><br><span class="line">                            stack1.push(w);</span><br><span class="line">                            q1.add(w);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!q2.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = q2.remove();</span><br><span class="line">                <span class="keyword">if</span> (marked1[v]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (distTo1[v] + distTo2[v] &lt; length || length == -<span class="number">1</span>) &#123;</span><br><span class="line">                        ancestor = v;</span><br><span class="line">                        length = distTo1[v] + distTo2[v];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (distTo2[v] &lt; length || length == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> w:copyG.adj(v)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!marked2[w]) &#123;</span><br><span class="line">                            distTo2[w] = distTo2[v] + <span class="number">1</span>;</span><br><span class="line">                            marked2[w] = <span class="keyword">true</span>;</span><br><span class="line">                            stack2.push(w);</span><br><span class="line">                            q2.add(w);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ancestor</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        checkVertex(v);</span><br><span class="line">        checkVertex(w);</span><br><span class="line">        compute(v, w);</span><br><span class="line">        <span class="keyword">return</span> ancestor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">(Iterable&lt;Integer&gt; v, Iterable&lt;Integer&gt; w)</span> </span>&#123;</span><br><span class="line">        checkVertices(v);</span><br><span class="line">        checkVertices(w);</span><br><span class="line">        compute(v, w);</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a common ancestor that participates in shortest ancestral path; -1 if no such path</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ancestor</span><span class="params">(Iterable&lt;Integer&gt; v, Iterable&lt;Integer&gt; w)</span> </span>&#123;</span><br><span class="line">        checkVertices(v);</span><br><span class="line">        checkVertices(w);</span><br><span class="line">        compute(v, w);</span><br><span class="line">        <span class="keyword">return</span> ancestor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Wordnet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Programming_Assignment_6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Digraph;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Topological;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordNet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, TreeSet&lt;Integer&gt; &gt; synSets;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, String&gt; ssynsets;</span><br><span class="line">    <span class="keyword">private</span> Digraph hyperNyms;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idSum;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> outSum;</span><br><span class="line">    <span class="keyword">private</span> SAP sap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor takes the name of the two input files</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordNet</span><span class="params">(String synsets, String hypernyms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (synsets == <span class="keyword">null</span> || hypernyms == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"arguments to WordNet() is null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        readsynset(synsets);</span><br><span class="line">        readhypernyms(hypernyms);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readsynset</span><span class="params">(String synsets)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        synSets = <span class="keyword">new</span> TreeMap&lt;String, TreeSet&lt;Integer&gt; &gt;();</span><br><span class="line">        <span class="keyword">this</span>.ssynsets = <span class="keyword">new</span> TreeMap&lt;Integer, String&gt;();</span><br><span class="line">        In synset = <span class="keyword">new</span> In(synsets);</span><br><span class="line">        idSum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (synset.hasNextLine()) &#123;</span><br><span class="line"></span><br><span class="line">            idSum++;</span><br><span class="line">            String str = synset.readLine();</span><br><span class="line">            String[] field = str.split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">int</span> id = Integer.parseInt(field[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">this</span>.ssynsets.put(id, field[<span class="number">1</span>]);</span><br><span class="line">            String[] nons = field[<span class="number">1</span>].split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (String tmp : nons) &#123;</span><br><span class="line">                <span class="keyword">if</span> (synSets.containsKey(tmp)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (synSets.containsKey(tmp)) &#123;</span><br><span class="line">                        synSets.get(tmp).add(id);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    TreeSet&lt;Integer&gt; ids = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">                    ids.add(id);</span><br><span class="line">                    synSets.put(tmp, ids);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readhypernyms</span><span class="params">(String hypernyms)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        hyperNyms = <span class="keyword">new</span> Digraph(idSum);</span><br><span class="line">        In hypernym = <span class="keyword">new</span> In(hypernyms);</span><br><span class="line">        <span class="keyword">boolean</span>[] outToal = <span class="keyword">new</span> <span class="keyword">boolean</span>[idSum];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (hypernym.hasNextLine()) &#123;</span><br><span class="line">            String str = hypernym.readLine();</span><br><span class="line">            String[] field = str.split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">int</span> v = Integer.parseInt(field[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; field.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> w = Integer.parseInt(field[i]);</span><br><span class="line">                hyperNyms.addEdge(v, w);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!outToal[v] &amp;&amp; field.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                outSum++;</span><br><span class="line">            &#125;</span><br><span class="line">            outToal[v] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        isRootRAG();</span><br><span class="line">        sap = <span class="keyword">new</span> SAP(hyperNyms);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">isRootRAG</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idSum - outSum != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"more than one root"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Topological TO = <span class="keyword">new</span> Topological(hyperNyms);</span><br><span class="line">        <span class="keyword">if</span> (!TO.hasOrder()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"is not a Root RAG"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// returns all WordNet nouns</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">nouns</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> synSets.keySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is the word a WordNet noun?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNoun</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"word is null"</span>);</span><br><span class="line">        <span class="keyword">return</span> synSets.containsKey(word);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">distance</span><span class="params">(String nounA, String nounB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nounA == <span class="keyword">null</span> || nounB == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"nounA or nounB is null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isNoun(nounA) || !isNoun(nounB)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"the two noun is not exist"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Integer&gt; setA = synSets.get(nounA);</span><br><span class="line">        TreeSet&lt;Integer&gt; setB = synSets.get(nounB);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (setA.size() == <span class="number">1</span> &amp;&amp; setB.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sap.length(setA.last(), setB.last());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> sap.length(setA, setB);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a synset (second field of synsets.txt) that is the common ancestor of nounA and nounB</span></span><br><span class="line">    <span class="comment">// in a shortest ancestral path (defined below)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sap</span><span class="params">(String nounA, String nounB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nounA == <span class="keyword">null</span> || nounB == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isNoun(nounA) || !isNoun(nounB)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        TreeSet&lt;Integer&gt; setA = synSets.get(nounA);</span><br><span class="line">        TreeSet&lt;Integer&gt; setB = synSets.get(nounB);</span><br><span class="line">        <span class="keyword">int</span> ID;</span><br><span class="line">        <span class="keyword">if</span> (setA.size() == <span class="number">1</span> &amp;&amp; setB.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            ID = sap.ancestor(setA.last(), setB.last());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ID = sap.ancestor(setA, setB);</span><br><span class="line">        <span class="keyword">return</span> ssynsets.get(ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Outcast.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Programming_Assignment_6;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outcast</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WordNet wordnet;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outcast</span><span class="params">(WordNet wordnet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (wordnet == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"wrong wordnet"</span>);</span><br><span class="line">        <span class="keyword">this</span>.wordnet = wordnet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">outcast</span><span class="params">(String[] nouns)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nouns == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"this nouns is null"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> Maxn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nouns.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nouns.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> tmp = wordnet.distance(nouns[i], nouns[j]);</span><br><span class="line">                <span class="keyword">if</span> (tmp == -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                sum += tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; Maxn) &#123;</span><br><span class="line">                Maxn = sum;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> nouns[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WordNet wordnet = <span class="keyword">new</span> WordNet(args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">        Outcast outcast = <span class="keyword">new</span> Outcast(wordnet);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">2</span>; t &lt; args.length; t++) &#123;</span><br><span class="line">            In in = <span class="keyword">new</span> In(args[t]);</span><br><span class="line">            String[] nouns = in.readAllStrings();</span><br><span class="line">            StdOut.println(args[t] + <span class="string">": "</span> + outcast.outcast(nouns));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.cn/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级题目解析及考试总结</title>
    <link href="http://wsx1128.cn/2019/08/30/PAT%E7%94%B2%E7%BA%A7%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93%E5%8F%8A%E8%A7%A3%E6%9E%90/"/>
    <id>http://wsx1128.cn/2019/08/30/PAT甲级题目总结及解析/</id>
    <published>2019-08-30T08:39:31.000Z</published>
    <updated>2019-09-10T13:19:11.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先这里贴出-所有题目的解析。"><a href="#首先这里贴出-所有题目的解析。" class="headerlink" title="首先这里贴出 所有题目的解析。"></a>首先这里贴出 所有题目的解析。</h2><p><a href="https://github.com/CrazyFnOption/PAT_A" target="_blank" rel="noopener">甲级题目解析</a></p><p>本来最先开始想的是 一道题一道题的总结，但是到后面发现好像真的没有这个时间（主要还是自己懒，宁愿把这个时间用来刷剧）</p><p><strong>这里不能直接插入pdf，所以只能转化为图片一点一点的看咯</strong></p><p><img src="/2019/08/30/PAT甲级题目总结及解析/1.png" alt="1"></p><p><img src="/2019/08/30/PAT甲级题目总结及解析/2.png" alt="2"></p><p><img src="/2019/08/30/PAT甲级题目总结及解析/3.png" alt="3"></p><p><img src="/2019/08/30/PAT甲级题目总结及解析/4.png" alt="4"></p><p><img src="/2019/08/30/PAT甲级题目总结及解析/5.png" alt="5"></p><p><img src="/2019/08/30/PAT甲级题目总结及解析/6.png" alt="6"></p><p><img src="/2019/08/30/PAT甲级题目总结及解析/7.png" alt="7"></p><h2 id="考时状况"><a href="#考时状况" class="headerlink" title="考时状况"></a>考时状况</h2><pre><code>双非新大三，acm铁牌选手，第一次考甲级 92/100 但是觉得排名有点弱 将近300名了 前面满分大佬 这么流弊的吗？第一道题的时候卡了半个小时，用了各种剪枝，把所有没有进位的情况全部剔除掉了，也注意到了排序，到最后都开始怀疑自己gcd是不是写错了，于是果断放弃，开始写第二道题。写第二道题的时候，由于读英文读的很快，然后开始写，最先开始 我是分三种情况 mod 3 ，3种情况去写，然后考虑到各种情况去终止，然后写完去测试样例，直接内存崩了，估计超限了，然后这个时候 我旁边的那位小姐姐，交卷了？！！ 似乎不到一个半小时，直接喊了老师交卷了，然后我心态就有点崩了,这里想找找那位小姐姐(西安交大 402考场的 41号 还是 39 号的小姐姐)，小姐姐 你真的厉害...这个时候由于心态有点炸，觉得强行开这道题不太可能于是转到第三题去了。第三题跟之前甲级有道题很像，自己轻松写完代码之后，以为是后序遍历，但是，当没有左子树的时候，就变成前缀表达式了，先开始没有注意到，各种地方去调试加hello world，去找运行位置，然后，答案跟样例一模一样的时候去提交结果全错，这个时候我发现，万恶的hello world 还在我的输出答案中！！！整个时间花了30多分钟吧 感谢hello world 教会我人生哲理....第四道题 一看就觉得是道板子题，直接去写 dijkstra 的板子，写完之后再看题目，不知道是英文的问题，觉得表述上有点奇怪，先开始觉得只需要判断是不是在最短路序列上，后来才发现只需要去判断距离就行了，感觉又变成暴力杯中的找规律，所以就直接过了。这个时候还有一个小时左右的时间，于是这个时候返回第二题，删掉全部代码，重新写，认认真真静下来读完题目，才发现贼简单，自己想复杂了，因为不可能出现，大序列结束，小序列不结束的情况，想通这个就直接开始写，果然直接就一发ac了，还是心理暗示最重要，只能说小姐姐太厉害了。还有40分钟左右，只剩下第一题的8分没拿到手了，于是回去各种找规律，重新仔细扣题目，然后当我再次交的时候，还是有问题 ，当时就很懵逼，脑海里面各种算法开始交杂，二分，线段树，树状数组？？？然后再次冷静下来去写的时候，我记得是还有二十多分钟的时候 服务器炸了，我这个人还是挺迷信的，觉得天意如此（好像提交的时间也占排名）就直接交了走人了。不过今年刚大三，得明年考的pat成绩才算，所以这次就当打怪升级练手咯，不过 听说还会考很多顶级类似的题目，下次得把顶级的题目刷一遍再来考。看到知乎里面都是满分的大佬，不开心。 sad face...</code></pre><h2 id="考后总结"><a href="#考后总结" class="headerlink" title="考后总结"></a>考后总结</h2><p>第一次考甲级 考了92，分数上还不错，但是排名也太弱鸡了，枉费了我提前了20多分钟交卷，早知道这个排名不是看提交速度的话，我应该坚持到最后一刻的，当时的想法就是觉得 92分够了，因为知道自己明年还会再去考一次式，当时似乎有点轻松，所有有点松懈，希望下次能一步登天，有看这里的朋友，可以一起约着备考明年的pat，</p><p>不过最近也不能松懈，再补前面的坑的同时，还要好好准备后面的其他考试了。  加油。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="浙大pat" scheme="http://wsx1128.cn/tags/%E6%B5%99%E5%A4%A7pat/"/>
    
  </entry>
  
  <entry>
    <title>7.27线性dp与区间dp题目解析</title>
    <link href="http://wsx1128.cn/2019/07/27/7-27%E7%BA%BF%E6%80%A7dp%E4%B8%8E%E5%8C%BA%E9%97%B4dp/"/>
    <id>http://wsx1128.cn/2019/07/27/7-27线性dp与区间dp/</id>
    <published>2019-07-27T09:12:52.000Z</published>
    <updated>2019-08-07T17:49:56.826Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="A-导弹袭击"><a href="#A-导弹袭击" class="headerlink" title="A.导弹袭击"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=0" target="_blank" rel="noopener">A.导弹袭击</a></h2><p><strong>代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test1.in", "r", stdin);   </span></span><br><span class="line">    <span class="comment">//freopen("test1.out", "w", stdout); </span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T))</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> dp[T + <span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> data[T + <span class="number">5</span>];</span><br><span class="line">        data[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; data[i];</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= T; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (data[i] &gt; data[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                num = max(num, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="B-Common-Subsequence"><a href="#B-Common-Subsequence" class="headerlink" title="B.Common Subsequence"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=1" target="_blank" rel="noopener">B.Common Subsequence</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1, s2, tmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test1.in", "r", stdin); </span></span><br><span class="line">    <span class="comment">//freopen("test1.out", "w", stdout); </span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.size() &lt; s2.size())</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = s1;</span><br><span class="line">            s1 = s2;</span><br><span class="line">            s2 = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> dp[s1.size() + <span class="number">10</span>][s1.size() + <span class="number">10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s2.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s1.size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l = j + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (s1[j] == s2[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[k][l] = dp[k - <span class="number">1</span>][l - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[k][l] = max(dp[k - <span class="number">1</span>][l], dp[k][l - <span class="number">1</span>]);</span><br><span class="line">                Max = max(Max, dp[k][l]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[s2.size()][s1.size()] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-滑雪"><a href="#C-滑雪" class="headerlink" title="C.滑雪"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=2" target="_blank" rel="noopener">C.滑雪</a></h2><p><strong>代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 110</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> len[N][N], a[N][N];</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx, ty, k, s, ms;</span><br><span class="line">    ms = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len[x][y] != <span class="number">0</span>) <span class="comment">//递归出口；</span></span><br><span class="line">        <span class="keyword">return</span> len[x][y];</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        tx = dis[k][<span class="number">0</span>] + x;</span><br><span class="line">        ty = dis[k][<span class="number">1</span>] + y;</span><br><span class="line">        <span class="keyword">if</span> (tx &lt; <span class="number">0</span> || ty &lt; <span class="number">0</span> || tx &gt; m - <span class="number">1</span> || ty &gt; n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[tx][ty] &lt; a[x][y])</span><br><span class="line">        &#123;</span><br><span class="line">            s = dp(tx, ty);</span><br><span class="line">            ms = max(ms, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len[x][y] = ms + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> len[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test1.in", "r", stdin); </span></span><br><span class="line">    <span class="comment">//freopen("test1.out", "w", stdout); </span></span><br><span class="line">    <span class="keyword">int</span> i, j, Max;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(len, <span class="number">0</span>, <span class="keyword">sizeof</span>(len));</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        Max = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                Max = max(Max, dp(i, j));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="D-小红红益智游戏"><a href="#D-小红红益智游戏" class="headerlink" title="D.小红红益智游戏"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=3" target="_blank" rel="noopener">D.小红红益智游戏</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">-0x3f3f3f3f</span>; <span class="comment">//定义一个无穷大的值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn], n, x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            sum[i][i] = x;</span><br><span class="line">            fill(dp[i], dp[i] + maxn, INF); <span class="comment">//初始化</span></span><br><span class="line">            dp[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//区间dp</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++) <span class="comment">//枚举区间长度</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (i + len - <span class="number">1</span>) &lt;= n; i++) <span class="comment">//枚举区间起点</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; k++) <span class="comment">//枚举中断点</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum[i][j] = sum[i][k] + sum[k + <span class="number">1</span>][j];</span><br><span class="line">                    dp[i][j] = max(dp[i][j], dp[i][k] + </span><br><span class="line">                        dp[k + <span class="number">1</span>][j] + sum[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[<span class="number">1</span>][n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-最大括号匹配数"><a href="#E-最大括号匹配数" class="headerlink" title="E.最大括号匹配数"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=4" target="_blank" rel="noopener">E.最大括号匹配数</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="built_in">string</span> V;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; V, V[<span class="number">0</span>] != <span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n = V.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(dp[i], <span class="number">0</span>, <span class="keyword">sizeof</span>(dp[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + len - <span class="number">1</span> &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (V[i] == <span class="string">'('</span> &amp;&amp; V[j] == <span class="string">')'</span> || </span><br><span class="line">                V[i] == <span class="string">'['</span> &amp;&amp; V[j] == <span class="string">']'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &gt; j - <span class="number">1</span>)</span><br><span class="line">                        dp[i][j] = <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; k++) &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i][j], </span><br><span class="line">                    dp[i][k] + dp[k + <span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">0</span>][n - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        V.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-红红跳格子"><a href="#F-红红跳格子" class="headerlink" title="F.红红跳格子"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=5" target="_blank" rel="noopener">F.红红跳格子</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//总结一下这类的线性DP。</span></span><br><span class="line"><span class="comment">//这里dp数组保存的是每一个点为止这个位置上的递增子序列之和</span></span><br><span class="line"><span class="comment">//然后这个地方的每一个确定的值再与之前的去比较，最后加上相应的值即可。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test1.in", "r", stdin); </span></span><br><span class="line">    <span class="comment">//freopen("test1.out", "w", stdout); </span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; T &amp;&amp; T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        dp[<span class="number">1</span>] = num[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= T; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = num[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[i] &gt; num[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + num[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Max = max(Max, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Max &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-请客的红红"><a href="#G-请客的红红" class="headerlink" title="G.请客的红红"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=6" target="_blank" rel="noopener">G.请客的红红</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题就是被前面的思想所影响，其实这道题不像前面前面几个状态一定会影响到后面的状态，</span></span><br><span class="line"><span class="comment">    仅仅只是一个一维的线性dp，考虑到前面的这些情况，他是另外的两个dp方程组进行放与不放的操作</span></span><br><span class="line"><span class="comment">    所以不会涉及到多个循环反复到前面之前的状态去寻找，</span></span><br><span class="line"><span class="comment">    只需要在一次遍历的过程中去实现究竟是一次还是两次的操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    跟着每一个状态往下面找出每一个位置的局部最优解 最后得到结果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test1.in", "r", stdin); </span></span><br><span class="line">    <span class="comment">//freopen("test1.out", "w", stdout); </span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">            dp[i] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = s[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = min(dp[i - <span class="number">1</span>] + s[i], dp[i - <span class="number">2</span>] + d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> h = dp[n] / <span class="number">3600</span> + <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">int</span> m = dp[n] / <span class="number">60</span> % <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">int</span> s = dp[n] % <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= <span class="number">12</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d am\n"</span>, h, m, s);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d pm\n"</span>, h, m, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-红红与糖果"><a href="#H-红红与糖果" class="headerlink" title="H.红红与糖果"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=7" target="_blank" rel="noopener">H.红红与糖果</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> date[maxn][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> _time, pie;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test1.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test1.out", "w", stdout);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(date, <span class="number">0</span>, <span class="keyword">sizeof</span> date);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">int</span> maxTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;pie, &amp;_time);</span><br><span class="line">            date[_time][pie]++;</span><br><span class="line">            maxTime = max(maxTime, _time);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一秒的运行时间，里面所有的运行情况</span></span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">4</span>] = date[<span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">5</span>] = date[<span class="number">1</span>][<span class="number">5</span>];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">6</span>] = date[<span class="number">1</span>][<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里其实是由第二次运转的时间来看，因为第一秒的时间我已经全部标记下来了。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxTime; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="comment">//不过需要注意的是 这些全部都是前几秒的动作，上一秒更新的状态，到下一秒后执行的状态</span></span><br><span class="line">                <span class="comment">//下面这个地方就是很奇幻的地方了，一共三个状态，取出来还是不取出来，就是这三种状态</span></span><br><span class="line">                <span class="comment">//左边一个位置取，还是右边一个位置取，还是原本的位置去出来。</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                    dp[i][j] = max(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (j &lt; <span class="number">10</span>)</span><br><span class="line">                    dp[i][j] = max(dp[i][j], dp[i - <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">                dp[i][j] += date[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Max = max(Max, dp[maxTime][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Max &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-老左的矩阵"><a href="#I-老左的矩阵" class="headerlink" title="I.老左的矩阵"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=8" target="_blank" rel="noopener">I.老左的矩阵</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个地方就直接就是答案的思路了，由一种倒叙的方法往前面推，将对角线存储的数，</span></span><br><span class="line"><span class="comment">    就是当前能存储到的最大的矩阵。</span></span><br><span class="line"><span class="comment">    状态转移方程就是 dp[i][j] 由 dp[i - k][j]与 dp[i][j - k] 是否相等然后再来存储</span></span><br><span class="line"><span class="comment">    不过这里有一个技巧就是 每一个仅仅只是存储这个数组能够承受的最大值、</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    自己想的办法没有考虑到状态的迁移，也就是没有考虑到状态与状态之间的联系，这里就展现出来了。</span></span><br><span class="line"><span class="comment">    将每一个值存储到dp[i - 1][j + 1] 上，然后再一次对其进行验证。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">char</span> ch[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test2.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test2.out", "w", stdout);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; ch[i][j];</span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span> || j == n)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> tmp = dp[i - <span class="number">1</span>][j + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= tmp; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ch[i - k][j] == ch[i][j + k])</span><br><span class="line">                        dp[i][j]++;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Max = max(Max, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-阿春取数字"><a href="#J-阿春取数字" class="headerlink" title="J.阿春取数字"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1055&amp;pid=9" target="_blank" rel="noopener">J.阿春取数字</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题目就是典型的区间DP的题目了，对一个区间里面的值进行动态规划的求解，就像下面的状态转移方程</span></span><br><span class="line"><span class="comment">    dp[i][j] = max(dp[i + 1][j] + num[i] *(n + i - j),</span></span><br><span class="line"><span class="comment">    dp[i][j - 1] + num[j] * (n + i - j));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    这道题唯一特别难想到的是，这道题目是一道逆序求解的问题，</span></span><br><span class="line"><span class="comment">    意思就是从后面的状态往前面推，这当时的我就完全没有想到了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test3.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test3.out", "w", stdout);</span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">            dp[i][i] = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//这里乘以 n + i - j 其实一开始的变形就是 n - (j - i + 1) + 1</span></span><br><span class="line">                dp[i][j] = max(dp[i + <span class="number">1</span>][j] + num[i] * (n + i - j), dp[i][j - <span class="number">1</span>] + num[j] * (n + i - j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[<span class="number">1</span>][n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="习题解析" scheme="http://wsx1128.cn/tags/%E4%B9%A0%E9%A2%98%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>7.26_记忆化搜索和背包习题解析</title>
    <link href="http://wsx1128.cn/2019/07/26/7-26-%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%E5%92%8C%E8%83%8C%E5%8C%85%E4%B9%A0%E9%A2%98%E8%A7%A3%E6%9E%90/"/>
    <id>http://wsx1128.cn/2019/07/26/7-26-记忆化搜索和背包习题解析/</id>
    <published>2019-07-26T09:19:12.000Z</published>
    <updated>2019-07-26T13:52:09.004Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="A-小辉辉玩积木"><a href="#A-小辉辉玩积木" class="headerlink" title="A.小辉辉玩积木"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=0" target="_blank" rel="noopener">A.小辉辉玩积木</a></h2><p><strong>代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">60</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[n])</span><br><span class="line">        <span class="keyword">return</span> a[n];</span><br><span class="line">    <span class="keyword">return</span> a[n] = f(n - <span class="number">2</span>) + f(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(N - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这道题就仅仅只是用到了一个递归和记忆化搜索，属于基础简单的题目。</p><h2 id="B-入侵和反击"><a href="#B-入侵和反击" class="headerlink" title="B.入侵和反击"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=1" target="_blank" rel="noopener">B.入侵和反击</a></h2><p><strong>代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> dp[n + <span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> num[n + <span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i ++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//memset(dp,1,sizeof dp);</span></span><br><span class="line">        <span class="comment">//fill (num,num+n,1);</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//这个地方的状态转移方程，需要去细想比较一下。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[i] &lt;= num[j]) &#123;</span><br><span class="line">                    dp[i] = max(dp[i],dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Max = max(Max,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n - Max &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 9 17 8 19 3</span></span><br><span class="line">        <span class="comment">// 1  1 2 1  3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="C-红红数钞票"><a href="#C-红红数钞票" class="headerlink" title="C.红红数钞票"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=2" target="_blank" rel="noopener">C.红红数钞票</a></h2><p><strong>代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其实这道题也算是一道特别简单的题目，还是动态规划里面最基础的问题，但是总是容易去弄混。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    记得自己当时的问题就在于 这里每一次相加的和，如何保证后面加了负数之后，再次加上一个正数不被影响呢，</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    下面的注释里面有写，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    因为题目中限制了，如果这道题有多个答案，比如说 前面与后面相加为零，但是后面的那个正数正好作为最后的正确答案的话</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    比如 1 2 -3 8 10 -1 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1 2 -3 正好相加为0  但是题目中要求的 序列 1 2 -3 8 作为最后的结果序列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    自己当时也在这一块上面纠结。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> num[m + <span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmpleft = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> Max = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) &#123;</span><br><span class="line">        tmp += num[i];</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            tmp = <span class="number">0</span>;</span><br><span class="line">            tmpleft = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tmp &gt; Max) &#123;</span><br><span class="line">            Max = tmp;</span><br><span class="line">            right = i;</span><br><span class="line">            left = tmpleft;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (Max &gt;= <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; Max &lt;&lt; <span class="string">" "</span> &lt;&lt; num[left] &lt;&lt; <span class="string">" "</span> &lt;&lt; num[right] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; num[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; num[m - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="D-Charm-Bracelet"><a href="#D-Charm-Bracelet" class="headerlink" title="D.Charm Bracelet"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=3" target="_blank" rel="noopener">D.Charm Bracelet</a></h2><p><strong>代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一道题属于一个简单的01背包模板题目，这里不多说 可以直接套模板。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">13000</span>];</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">3500</span>],v[<span class="number">3500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= w[i]; j--) &#123;</span><br><span class="line">                dp[j] = max(dp[j],dp[j - w[i]] + v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="E-红红绝地求生"><a href="#E-红红绝地求生" class="headerlink" title="E.红红绝地求生"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=4" target="_blank" rel="noopener">E.红红绝地求生</a></h2><p><strong>代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一段简单的模板题目，不过需要弄清楚的 一维数组与二维数组在这里相应的区别，往往这里会产生很大的区别，</span></span><br><span class="line"><span class="comment">    比如第二个循环的开始条件，因为这里是由子问题的堆积，然后一点一点向上升最终得到的问题，所以这李最好控制背包的放与不放的问题、</span></span><br><span class="line"><span class="comment">    就比如我在这道题目的第二个问题中出现的错误，就是将j=0这个条件直接掠过去了，其实这里是不对的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> weight[maxn],value[maxn],dp[maxn][maxn];</span><br><span class="line"><span class="keyword">long</span> v,w;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w &gt;&gt; v;</span><br><span class="line">        value[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        weight[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; value[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; weight[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= v; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= weight[i]) &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i - <span class="number">1</span>][j],dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[w][v] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="F-一卡通"><a href="#F-一卡通" class="headerlink" title="F.一卡通"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=5" target="_blank" rel="noopener">F.一卡通</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一维滚动数组的做法，由于是01背包，所以直接套模板</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">        sort(d + <span class="number">1</span>, d + n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = p - <span class="number">5</span>; j &gt;= d[i]; j--)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[j] = max(dp[j], dp[j - d[i]] + d[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p - dp[p - <span class="number">5</span>] - d[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种方法：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二维数组直接套模板</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题神奇的地方就在于 其的重量限制于价值重合在了一起，所以对于这道题而言就是只能重合的去写状态转移方程了</span></span><br><span class="line"><span class="comment">    另外需要注意的是最后输出结果的办法，是将最后一个物品交给剩下的最大的钱去购买，这样能彻底用光最后的钱财</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn],dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        sort(num + <span class="number">1</span>, num + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="comment">//这里与上面一维滚动数组不太一样的是，一维滚动数组是不能有对物品限制的操作。</span></span><br><span class="line">        <span class="comment">//意思就是 我二维数组可以算出n-1个数，然后算出最后一个数给出的钱数dp[i - 1][j]</span></span><br><span class="line">        <span class="comment">//而一维数组由于只有一个参数就是体积容量的参数dp[i]</span></span><br><span class="line">        <span class="comment">//所以下面多算了一个，最后再通过计算出n-1个物品的体积，再减去相应的钱数，得到最终答案。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m - <span class="number">5</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= num[i]) &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i - <span class="number">1</span>][j],dp[i - <span class="number">1</span>][j - num[i]] + num[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m - dp[n - <span class="number">1</span>][m - <span class="number">5</span>] - num[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="G-红红减肥记"><a href="#G-红红减肥记" class="headerlink" title="G.红红减肥记"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=6" target="_blank" rel="noopener">G.红红减肥记</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题使用二维数组就一直就会超时 具体的我也不太清楚，但是 没有办法 只能使用一维滚动数组，进行了相应的空间优化 不过这里需要补充几个知识点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    第一 关于二维数组的完全背包状态转移方程 dp[i][j] = max (dp[i - 1][j],dp[i - 1][j - k * c[i]] + k * v[i]);</span></span><br><span class="line"><span class="comment">    由上面这个式子就可以得出，状态转移方程  于是 一种空间优化的写法 是直接写成 max(dp[i - 1][j]，dp[i][j - w[i]] + v[i])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    第二 如果换成滚动数组的话 记住 第二个循环的两个顺序，如果是倒叙的话 则就是要保证每一个物品只会取一次，但是如果是正序的话，那么就不需要保证上面所说的顺序了。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    而这里官方的解释 就在这里 ：</span></span><br><span class="line"><span class="comment">    让 v 递减是为了保证第i次循环中的状态F[i;v]是由状态F[i-1;v-Ci]递推而来。</span></span><br><span class="line"><span class="comment">    换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第 i 件物品”这件策</span></span><br><span class="line"><span class="comment">    略时，依据的是一个绝无已经选入第 i 件物品的子结果F[i-1;v-Ci]。而现在完全背</span></span><br><span class="line"><span class="comment">    包的特点恰是每种物品可选无限件，所以在考虑“加选一件第 i 种物品”这种策略时，</span></span><br><span class="line"><span class="comment">    却正需要一个可能已选入第 i 种物品的子结果F[i;v-Ci]，所以就可以并且必须采用v</span></span><br><span class="line"><span class="comment">    递增的顺序循环。这就是这个简单的程序为何成立的道理。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a, b, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> happiness[maxn], kaluli[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">110000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;happiness[i],&amp;kaluli[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = kaluli[i]; j &lt;= m; j++) &#123;</span><br><span class="line">                dp[j] = max(dp[j],dp[j - kaluli[i]] + happiness[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[m]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Piggy-Bank"><a href="#H-Piggy-Bank" class="headerlink" title="H.Piggy-Bank"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=7" target="_blank" rel="noopener">H.Piggy-Bank</a></h2><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题是一个完全背包的裸题，对于这道题而言更加神奇的地方就在于其实求最小值而不是求最大值</span></span><br><span class="line"><span class="comment">    所以在最先开始初始化的时候不应该去初始化为0，而应该初始化为无穷大</span></span><br><span class="line"><span class="comment">    而千万不要忘记了再初始化的时候一定要对第一个状态进行一个单独赋值是等于0，还是等于无穷大，这个等到时候再看。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _beg,_end;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> v[maxn],w[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;_beg,&amp;_end);</span><br><span class="line">        <span class="keyword">int</span> bottle = _end - _beg;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;v[i],&amp;w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = w[i]; j &lt;= bottle; j++) &#123;</span><br><span class="line">                dp[j] = min(dp[j],dp[j - w[i]] + v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dp[bottle] != <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"The minimum amount of money in the piggy-bank is "</span> &lt;&lt; dp[bottle] &lt;&lt; <span class="string">"."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"This is impossible."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-美元的困惑"><a href="#I-美元的困惑" class="headerlink" title="I.美元的困惑"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=8" target="_blank" rel="noopener">I.美元的困惑</a></h2><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n,k;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">            BigInteger[] dp = <span class="keyword">new</span> BigInteger[<span class="number">1005</span>];</span><br><span class="line">            n = in.nextInt();</span><br><span class="line">            k = in.nextInt();</span><br><span class="line">            dp[<span class="number">0</span>] = <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                dp[i] = <span class="keyword">new</span> BigInteger(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">                    dp[j] = dp[j].add(dp[j - i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           System.out.println(dp[n]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Coins"><a href="#J-Coins" class="headerlink" title="J.Coins"></a><a href="http://sustoj.com/JudgeOnline/problem.php?cid=1054&amp;pid=9" target="_blank" rel="noopener">J.Coins</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题神奇的地方就是将多重背包的裸题进行了改变，</span></span><br><span class="line"><span class="comment">    主要就是每一次增加的价值会发生改变，这才是最关键的地方。</span></span><br><span class="line"><span class="comment">    这里的价值就不再是个数，而是进行一个打表，通过这个打表来判断这个重量是否能够达到。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> bag;</span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">100040</span>];</span><br><span class="line"><span class="keyword">int</span> value[<span class="number">105</span>],number[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zeroonepack</span><span class="params">(<span class="keyword">int</span> weight, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = bag; j &gt;= weight; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dp[j] &amp;&amp; dp[j - weight])&#123;</span><br><span class="line">            dp[j] = <span class="literal">true</span>;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完全背包</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">completepack</span><span class="params">(<span class="keyword">int</span> weight, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = weight; j &lt;= bag; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dp[j] &amp;&amp; dp[j - weight]) &#123;</span><br><span class="line">            dp[j] = <span class="literal">true</span>;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多重背包</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multilpack</span><span class="params">(<span class="keyword">int</span> weight, <span class="keyword">int</span> number, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一种情况就是 如果这件物品所有的重量是小于背包的重量的话</span></span><br><span class="line">    <span class="comment">//那么对于背包而言 这个物品是可以取无限大。</span></span><br><span class="line">    <span class="keyword">if</span> (bag &lt;= number * weight)</span><br><span class="line">    &#123;</span><br><span class="line">        completepack(weight, value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//而超过的这个范围的就只能使用01背包 然后使用二进制的方法</span></span><br><span class="line">    <span class="comment">//将每一类型的背包进行一个分组</span></span><br><span class="line">    <span class="comment">//后面再依次分别使用多重背包。</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; number)</span><br><span class="line">    &#123;</span><br><span class="line">        zeroonepack(k * weight, k * value);</span><br><span class="line">        number = number - k;</span><br><span class="line">        k = k * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zeroonepack(number * weight, number * value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; bag &amp;&amp; n &amp;&amp; bag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; value[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i ++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; number[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ;i ++) &#123;</span><br><span class="line">            multilpack(value[i],number[i],value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="习题解析" scheme="http://wsx1128.cn/tags/%E4%B9%A0%E9%A2%98%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>PTA 1013 两种方法解决点与路径的关系</title>
    <link href="http://wsx1128.cn/2019/07/24/PTA-1013-%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3%E7%82%B9%E4%B8%8E%E8%B7%AF%E5%BE%84%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://wsx1128.cn/2019/07/24/PTA-1013-两种方法解决点与路径的关系/</id>
    <published>2019-07-24T13:09:05.000Z</published>
    <updated>2019-07-24T13:47:22.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这道题很有趣，这里直接贴出题目。</p><p><img src="/2019/07/24/PTA-1013-两种方法解决点与路径的关系/12.png" alt="PTA-1013-两种方法解决点与路径的关系/12.png"></p><p>这道题纯粹就是给出一系列边与点的关系，然后再去掉一个点，看看剩余需要多少个点才能连接成一个完整的图。</p><h4 id="第一种方法并查集"><a href="#第一种方法并查集" class="headerlink" title="第一种方法并查集"></a>第一种方法并查集</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题最先开始真的是不知道何从入手，因为本身对于图论的相关知识并不是特别在行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    这道题的两种方法，第一就是并查集，第二就是利用dfs遍历完所有需要遍历的点。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,M,K;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="comment">//再次错在了这种地方，范围小了，这里题目虽然并没有给出相应的范围</span></span><br><span class="line"><span class="comment">//但是按照每一条边之间的链接来看，这里需要加大其的范围。</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pp[maxn * maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] != x) fa[x] = find(fa[x]);</span><br><span class="line">    <span class="keyword">return</span>  fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = find(x);</span><br><span class="line">    <span class="keyword">int</span> fy = find(y);</span><br><span class="line">    <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">        fa[fx] = fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        pp[i].first = a;</span><br><span class="line">        pp[i].second = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pp[j].first != tmp &amp;&amp; pp[j].second != tmp) &#123;</span><br><span class="line">                merge(pp[j].first,pp[j].second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fa[i] == i) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (N == <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt - <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种方法-通过dfs深搜后进行标记"><a href="#第二种方法-通过dfs深搜后进行标记" class="headerlink" title="第二种方法 通过dfs深搜后进行标记"></a>第二种方法 通过dfs深搜后进行标记</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1008</span>;</span><br><span class="line"><span class="keyword">int</span> N,M,K;</span><br><span class="line"><span class="keyword">bool</span> dis[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i] == <span class="literal">false</span> &amp;&amp; dis[x][i] == <span class="literal">true</span>) &#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="literal">false</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        dis[a][b] = dis[b][a] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">        vis[tmp] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="http://wsx1128.cn/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PTA 1010 二分的基本应用</title>
    <link href="http://wsx1128.cn/2019/07/14/PTA-1010-%E4%BA%8C%E5%88%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/"/>
    <id>http://wsx1128.cn/2019/07/14/PTA-1010-二分的基本应用/</id>
    <published>2019-07-14T11:09:08.000Z</published>
    <updated>2019-07-24T13:52:16.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2019/07/14/PTA-1010-二分的基本应用/1.png" alt="1"></p><p>这道题目是一个边界的二分问题，可以按照顺序进行求解，但是后面有问题会出错，然后更加坑爹的是，最前面的前置条件需要弄清楚</p><p>直接贴出代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">to_num</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;b,<span class="keyword">long</span> <span class="keyword">long</span> radix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lenb = b.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] &gt;= <span class="string">'0'</span> &amp;&amp; b[i] &lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">            res += (b[i] - <span class="string">'0'</span>) * <span class="built_in">pow</span>(radix,lenb--);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  &#123;</span><br><span class="line">            res += (b[i] - <span class="string">'a'</span> + <span class="number">10</span>) * <span class="built_in">pow</span>(radix,lenb--);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> radix;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; tag &gt;&gt; radix;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; radix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="number">2</span>) &#123;</span><br><span class="line">        swap(a,b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = a.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= <span class="string">'0'</span> &amp;&amp; a[i] &lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">            tmp += (a[i] - <span class="string">'0'</span>) * <span class="built_in">pow</span>(radix,len--);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp += (a[i] - <span class="string">'a'</span> + <span class="number">10</span>) * <span class="built_in">pow</span>(radix,len--);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Max = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mm;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] &gt;= <span class="string">'0'</span> &amp;&amp; b[i] &lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">            mm = b[i] - <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            mm = b[i] - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Max = max(Max,mm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> lenb = b.size() - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//就是这里关于边界的问题，真的要把我搞死了</span></span><br><span class="line">    <span class="comment">// 这里的第一个样例就是 就应该是他的值小于其的边界，正好就是 Max 等于2的时候。</span></span><br><span class="line">    <span class="comment">//将两个边界值给弄清楚。</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> low = Max + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> high = max(tmp,low);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tp = to_num(b,mid);</span><br><span class="line">        <span class="keyword">if</span> (tp == <span class="number">-1</span> || tp &gt; tmp) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tp &lt; tmp)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tp == tmp) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    这里其实是一个顺序查找的过程，但是由于循环次数太多，所以必须进行二分优化。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    for (ans = Max; ans &lt;= tmp; ans++) &#123;</span></span><br><span class="line"><span class="comment">        res = 0;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; b.size();i++) &#123;</span></span><br><span class="line"><span class="comment">            if (b[i] &gt;= '0' &amp;&amp; b[i] &lt;='9') &#123;</span></span><br><span class="line"><span class="comment">                res += (b[i] - '0') * pow(ans,lenb--);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else &#123;</span></span><br><span class="line"><span class="comment">                res += (b[i] - 'a' + 10) * pow(ans,lenb--);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        if (tmp == res) &#123;</span></span><br><span class="line"><span class="comment">            flag = true;</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">true</span> &amp;&amp; mid &gt;= <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; mid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="http://wsx1128.cn/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PTA 1007 最大序列和问题</title>
    <link href="http://wsx1128.cn/2019/07/13/PTA-1007-%E6%9C%80%E5%A4%A7%E5%BA%8F%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>http://wsx1128.cn/2019/07/13/PTA-1007-最大序列和问题/</id>
    <published>2019-07-13T13:02:19.000Z</published>
    <updated>2019-07-13T13:07:12.860Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2019/07/13/PTA-1007-最大序列和问题/1.png" alt="1"></p><p><strong>这道题是一道简单的动态规划，可能是太久没有做这方面的题目了，总是对这一部分忘记，其实最终结果就是一个贪心解决问题。</strong></p><p>贴出代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其实这道题也算是一道特别简单的题目，还是动态规划里面最基础的问题，但是总是容易去弄混。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    记得自己当时的问题就在于 这里每一次相加的和，如何保证后面加了负数之后，再次加上一个正数不被影响呢，</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    下面的注释里面有写，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    因为题目中限制了，如果这道题有多个答案，比如说 前面与后面相加为零，但是后面的那个正数正好作为最后的正确答案的话</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    比如 1 2 -3 8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1 2 -3 正好相加为0  但是题目中要求的 序列 1 2 -3 8 作为最后的结果序列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    自己当时也在这一块上面纠结。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> num[m + <span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmpleft = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> Max = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) &#123;</span><br><span class="line">        tmp += num[i];</span><br><span class="line">        <span class="comment">//In case that the maximum subsequence is not unique, </span></span><br><span class="line">        <span class="comment">//output the one with the smallest indices i and j (as shown by the sample case).</span></span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            tmp = <span class="number">0</span>;</span><br><span class="line">            tmpleft = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tmp &gt; Max) &#123;</span><br><span class="line">            Max = tmp;</span><br><span class="line">            right = i;</span><br><span class="line">            left = tmpleft;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//If all the K numbers are negative, then its maximum sum is defined to be 0, </span></span><br><span class="line">    <span class="comment">//and you are supposed to output the first and the last numbers of the whole sequence.</span></span><br><span class="line">    <span class="keyword">if</span> (Max &gt;= <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; Max &lt;&lt; <span class="string">" "</span> &lt;&lt; num[left] &lt;&lt; <span class="string">" "</span> &lt;&lt; num[right] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; num[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; num[m - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="http://wsx1128.cn/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PTA 1004 简单的dfs</title>
    <link href="http://wsx1128.cn/2019/06/27/PTA-1004-%E7%AE%80%E5%8D%95%E7%9A%84dfs/"/>
    <id>http://wsx1128.cn/2019/06/27/PTA-1004-简单的dfs/</id>
    <published>2019-06-27T04:22:45.000Z</published>
    <updated>2019-06-27T04:58:01.884Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里直接贴出题目：</p><p><img src="/2019/06/27/PTA-1004-简单的dfs/111.png" alt="PTA-1004-简单的dfs"></p><p>代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; kids[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> maxlever = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kids[root].size() == <span class="number">0</span>) &#123;</span><br><span class="line">        maxlever = max(depth,maxlever);</span><br><span class="line">        nums[depth]++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; kids[root].size() ; i++) &#123;</span><br><span class="line">        dfs(kids[root][i],depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> fa,num;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="built_in">memset</span>(nums,<span class="number">0</span>,<span class="keyword">sizeof</span> nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; fa &gt;&gt; num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; num; i ++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">            kids[fa].push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; nums[<span class="number">0</span>] ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxlever; i++ ) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我可能是太久没有写代码了，上面这样一道水题，我先开始就被完完全全的弄糊涂了，这道题就是一个简单的dfs，首先先把数之间的对应关系一点一点的打通，然后再根据后面dfs的递归可以得出来，就是一个简单的根据根节点一点一点的往后面递归搜索，然后达到终点之后，记得把这一个层的叶子结点数加一，这里注意两点，可以发现 在cin的处理里面，可以直接将00，01，02，直接变成相应的0，1，2；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="http://wsx1128.cn/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PTA 1003 Dijkstra ---- 关于Dijkstra单源最短路的相应总结</title>
    <link href="http://wsx1128.cn/2019/06/25/PTA-1003-Dijkstra-%E5%85%B3%E4%BA%8EDijkstra%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%9A%84%E7%9B%B8%E5%BA%94%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.cn/2019/06/25/PTA-1003-Dijkstra-关于Dijkstra单源最短路的相应总结/</id>
    <published>2019-06-25T06:07:26.000Z</published>
    <updated>2019-06-25T07:07:25.188Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先-这里先贴出题目"><a href="#首先-这里先贴出题目" class="headerlink" title="首先 这里先贴出题目"></a>首先 这里先贴出题目</h2><p><img src="/2019/06/25/PTA-1003-Dijkstra-关于Dijkstra单源最短路的相应总结/12.png" alt="PTA-1003-Dijkstra-关于Dijkstra单源最短路的相应总结"></p><p>解题代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,_beg,_end;</span><br><span class="line"><span class="keyword">int</span> people[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> _map[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> paths[maxn];</span><br><span class="line"><span class="keyword">int</span> Maxvalue[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> beg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,inf,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    dis[beg] = <span class="number">0</span>;</span><br><span class="line">    paths[beg] = <span class="number">1</span>;</span><br><span class="line">    Maxvalue[beg] = people[beg];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> Min = <span class="number">0x3f3f3f</span>, index = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[j] &lt; Min) &#123;</span><br><span class="line">                Min = dis[j];</span><br><span class="line">                index = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        vis[index] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; _map[index][j] != inf) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[index] + _map[index][j] &lt; dis[j]) &#123;</span><br><span class="line">                    dis[j] = dis[index] + _map[index][j];</span><br><span class="line">                    paths[j] = paths[index];</span><br><span class="line">                    Maxvalue[j] = Maxvalue[index] + people[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (dis[index] + _map[index][j] == dis[j]) &#123;</span><br><span class="line">                    paths[j] += paths[index];</span><br><span class="line">                    Maxvalue[j] = max(Maxvalue[j],Maxvalue[index] + people[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; _beg &gt;&gt; _end;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; people[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x,y,val;</span><br><span class="line">    <span class="built_in">memset</span>(_map,inf,<span class="keyword">sizeof</span> _map);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; val;</span><br><span class="line">        _map[x][y] = val;</span><br><span class="line">        _map[y][x] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Dijkstra(_beg);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; paths[_end] &lt;&lt; <span class="string">" "</span> &lt;&lt; Maxvalue[_end] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里明显就是关于Dijkstra的裸题，变化的地方就是加了一两个内置数组，作为状态的变化，类似于动态规划，到后面就可以解题解出来了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="http://wsx1128.cn/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>数论总结</title>
    <link href="http://wsx1128.cn/2019/05/06/%E6%95%B0%E8%AE%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.cn/2019/05/06/数论总结/</id>
    <published>2019-05-06T09:48:39.000Z</published>
    <updated>2019-09-10T13:29:19.282Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数论总结"><a href="#数论总结" class="headerlink" title="数论总结"></a>数论总结</h1><pre><code>来自西北工业大学的讲义以及题目的总结</code></pre><h2 id="素数运算实验范例"><a href="#素数运算实验范例" class="headerlink" title="素数运算实验范例"></a>素数运算实验范例</h2><pre><code>这里将的就是与素数相关的筛法，这里介绍两种筛法。</code></pre><h3 id="素数的线性筛法"><a href="#素数的线性筛法" class="headerlink" title="素数的线性筛法"></a>素数的线性筛法</h3><p><em>埃式筛法</em><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最普通的埃式筛法</span></span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!check[i])</span><br><span class="line">    &#123;</span><br><span class="line">        prime[tot++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下面其实用乘法和用加法都是一样的，而这里就是乘法的原因就在于，减少了循环次数</span></span><br><span class="line">    <span class="comment">// 唯一没有被优化的地方就在于 每一个数字被重复标记了很多次，而后面的欧拉筛就会限制标记次数为一次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt;= n; j *= i)</span><br><span class="line">    &#123;</span><br><span class="line">        check[j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>欧拉筛法</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进阶版的线性筛法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//质数数组</span></span><br><span class="line"><span class="keyword">int</span> prime[MAXN];</span><br><span class="line"><span class="comment">//判断每一个数 数组</span></span><br><span class="line"><span class="keyword">int</span> check[MAXL];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAXL; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!check[i])</span><br><span class="line">    &#123;</span><br><span class="line">        prime[tot++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//大致意思就在于 将每一个数的与质数数组里面的数进行相乘，最后得到的结果存在check中去</span></span><br><span class="line">        <span class="comment">//需要注意的就是 一旦当前的数能被整除的时候 就立马退出，这样代表每一个数字都会被自己的最小质因数给整除出来。</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (i * prime[j] &gt; MAXL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后下面就由上面两种线性筛法引申出来下面两个结论</p><p><em>每一个大于4的偶数可以写成两个奇素数的和。(poj 2262)</em></p><p><em>每一个大于8的数字可以分为4个素数的和。(uva 10168)</em></p><h3 id="大素数的实验范例"><a href="#大素数的实验范例" class="headerlink" title="大素数的实验范例"></a>大素数的实验范例</h3><pre><code>一般这里还存在一些超过给出的素数表的范围，或者是打表到那个地方一定会反超之类的题目，这里都使用一种类似于区间筛法的办法去解决问题。</code></pre><p>比如 uva 10871:</p><p>打出 2 到 根号n范围的表，然后超过这个范围的数，对于这个数里面的数全部去除以前面打表产生的素数表，看能不能除尽，来判断这个大整数是否是素数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题 其实利用了素数表之后，就是一个一次遍历的过程了 不过我没有想到的是，</span></span><br><span class="line"><span class="comment">    这道题其实已经提前将每一个sum给记录下来了，就相当于一个打表的方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    另外这道题第二个爆点就在于 当超出了表范围内的大数怎么办，这里就可以用分两种，第一种是在这种情况的直接看表，</span></span><br><span class="line"><span class="comment">    另外一种就是用 这个数去mod 表内的每一个质数，这样可以加快时间。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10011</span>;</span><br><span class="line"><span class="keyword">bool</span> u[maxn];</span><br><span class="line"><span class="keyword">int</span> su[maxn];</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="built_in">memset</span>(u, <span class="literal">true</span>, <span class="keyword">sizeof</span>(u));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; maxn; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (u[i])</span><br><span class="line">        &#123;</span><br><span class="line">            su[++num] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= num; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * su[j] &gt; maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            u[i * su[j]] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i % su[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pri</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">10010</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> u[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % su[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    prepare();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">int</span> s[n + <span class="number">1</span>];</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s[i]);</span><br><span class="line">            s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j + i - <span class="number">1</span> &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> k = s[i + j - <span class="number">1</span>] - s[j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (pri(k))</span><br><span class="line">                &#123;</span><br><span class="line">                    ok = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Shortest primed subsequence is length %d:"</span>, i);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= i; ++k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" %d"</span>, s[j + k - <span class="number">1</span>] - s[j + k - <span class="number">2</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ok)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!ok)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"This sequence is anti-primed.\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求解不定方程和同余的实验范例"><a href="#求解不定方程和同余的实验范例" class="headerlink" title="求解不定方程和同余的实验范例"></a>求解不定方程和同余的实验范例</h2><pre><code>这一个章节的东西基本上可以说是奠定了数论的基础，所以这部分的东西请务必掌握。</code></pre><p>首先这里先贴出 gcd 和 exgcd的代码</p><p><strong>欧几里得算法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) retuan a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>exgcd 扩展欧几里得算法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span> <span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t = exgcd(b,a % b,x,y);</span><br><span class="line">    <span class="keyword">int</span> d = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = d - (a / b) * y;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>欧几里得算法是用来求解最大公约数的<br>由欧几里得公式推出 如果 a与b 互素，那么b * t + a 与 b 也一定互素。</p></blockquote><p>这里贴出一道题 就是对于上面gcd公式的周期性的利用</p><p><em>happy poj 2773</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题目就是在于对于gcd的周期性的使用。</span></span><br><span class="line"><span class="comment">    这道题就利用了与m互素的数对m去膜具有周期性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, k;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;k) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (gcd(m, i) == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s[num++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里其实进行了两种情况：一种刚好除尽的情况，</span></span><br><span class="line">        <span class="comment">//和另外一种没有刚好除尽的情况。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k % num == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里减一的目的是刚刚好除尽，减去一个后面好加上一个ai;</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (k / num - <span class="number">1</span>) * m + s[num - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//后面的则就体现在了余数这个地方。，之所以减去1是因为num不可能算上的最后一个</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k / num * m + s[k % num - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>扩展欧几里得算法是用来求最大公约数和不定方程的通解</p></blockquote><p>这里同样也贴出一道模板样题作为示范</p><p><em>The Balance poj 2142</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题就在于其很厉害的是 解释了ecgcd的真正的用途。</span></span><br><span class="line"><span class="comment">    这道题说难也不是很难，只是教会了一些数论题目全部的代码该如何去写。</span></span><br><span class="line"><span class="comment">    典型的求 不定方程的做法 ax + by = d;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    求解 一个  x，y 的满足条件的特解。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    这里写一下求解步骤 ：</span></span><br><span class="line"><span class="comment">    第一步 首先先得出这个方程，然后对方程两边同时除以gcd(a,b);</span></span><br><span class="line"><span class="comment">    在步入第二步的过程中有一个判断 就是看d 对于 gcd(a,b)的比较情况，决定这个不定方程是否有解；</span></span><br><span class="line"><span class="comment">    第二步 就是直接用未初始化的 x,y 带入exgcd求解 可以得到一个 x,y的其中一个特解 </span></span><br><span class="line"><span class="comment">    第三步 将得到的特解乘以相应的扩大的d_倍，最后按照题目规定的条件进行整改最终得出结果</span></span><br><span class="line"><span class="comment">    其中需要注意的是 上面得到的特解，只有在ax + by 正好等于gcd(a,b)的时候 才会同时满足。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span>  gcd(b,a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t = exgcd(b,a % b,x,y);</span><br><span class="line">    <span class="keyword">int</span> _x = x;</span><br><span class="line">    <span class="keyword">int</span> _y = y;</span><br><span class="line">    x = _y;</span><br><span class="line">    y = _x - (a/b) * _y;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b,d;</span><br><span class="line"><span class="keyword">int</span> a_,b_,d_;</span><br><span class="line"><span class="keyword">int</span> x,y;<span class="comment">//通解</span></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> x1,x2,y1,y2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a,&amp;b,&amp;d) &amp;&amp; a &amp;&amp; b &amp;&amp; d) &#123;</span><br><span class="line">        q = gcd(a,b);</span><br><span class="line">        a_ = a / q;</span><br><span class="line">        b_ = b / q;</span><br><span class="line">        d_ = d / q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = exgcd(a_,b_,x,y);</span><br><span class="line">        x1 = x * d_;</span><br><span class="line">        x1 = (x1 % b_ + b_) % b_;</span><br><span class="line">        y1 = (d - x1 * a) / b;</span><br><span class="line">        <span class="keyword">if</span> (y1 &lt; <span class="number">0</span>) y1 = -y1;</span><br><span class="line"></span><br><span class="line">        y2 = y * d_;</span><br><span class="line">        y2 = (y2 % a_ + a_) % a_;</span><br><span class="line">        x2 = (d - y2 * b) / a;</span><br><span class="line">        <span class="keyword">if</span> (x2 &lt; <span class="number">0</span>) x2 = -x2;</span><br><span class="line">        <span class="keyword">if</span> (x1 + y1 &lt; x2 + y2) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x1,y1);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x2,y2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还是讲求解不定方程的步骤再详细的过一遍</p><ol><li><p>得到不定方程ax + by = m，先判断 m 是否是gcd(a,b)的倍数，如果是说明方程有解，如果不是方程则没有解</p></li><li><p>有解之后，方程两边同时除以gcd(a,b)，然后将重新得到的a,b值带入到扩展欧几里得的方程式中得到两个通解x,y，</p></li><li><p>需要将得到的x 或者 y 值 扩大 经除后的m值，因为扩展欧几里得求的不定方程默认就是等于1的。对于这道题而言，想要求最小的正整数的通解，于是就 (x % b + b) % b, 这里就是防止C++取余带来的负数影响。</p></li></ol><p>下面还有一道题 也是求出不定方程的解，但是有一点点不同。</p><p><em>One Person Game zoj3593</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里的与上面一道题不一样的地方就在于 后面限制条件不太相同。</span></span><br><span class="line"><span class="comment">    前面一道题上面求出的一个特解，但是 取mod之后得到的结果，</span></span><br><span class="line"><span class="comment">    所以用改变后的变量值，来求另外一个。</span></span><br><span class="line"><span class="comment">    而这道题不一样的是是通过求解答案 然后 根据特解来算结构来算。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> _beg,_end,a,b;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> &amp;x,<span class="keyword">long</span> <span class="keyword">long</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t = exgcd(b,a % b,x,y);</span><br><span class="line">    <span class="keyword">int</span> x_ = x;</span><br><span class="line">    <span class="keyword">int</span> y_ = y;</span><br><span class="line">    x = y_;</span><br><span class="line">    y = x_ - (a / b) * y_;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; _beg &gt;&gt; _end &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = _end - _beg;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> d,x,y;</span><br><span class="line">        d = exgcd(a,b,x,y);</span><br><span class="line">        <span class="keyword">if</span> (res % d != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x *= res / d;</span><br><span class="line">        y *= res / d;</span><br><span class="line">        a = a / d;</span><br><span class="line">        b = b / d;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = inf * inf,tmp;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mid = (y - x) / (a + b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid - <span class="number">1</span>; i &lt;= mid + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x1 = x + i * b;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> y1 = y - i * a;</span><br><span class="line">            <span class="keyword">if</span> (x1 * y1 &gt;= <span class="number">0</span>) tmp = max(<span class="built_in">abs</span>(x1),<span class="built_in">abs</span>(y1));</span><br><span class="line">            <span class="keyword">else</span> tmp = <span class="built_in">abs</span>(x1 - y1);</span><br><span class="line">            ans = min(ans,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题不一样的是 他不是像前面求出通解之后求一个最小或者最大，我的理解就是 因为 其算出来的通解为 x = xo + k <em> b,y = yo - k </em> a ,其实将这里两个特解 直接当成0来算，因为题目要求最小，并且 a , b 的差距还不能太大，就直接求出 k的范围 然后 对其进行加1 减1的操作得出最后结果。</p><h3 id="计算同余方程与同余方程组"><a href="#计算同余方程与同余方程组" class="headerlink" title="计算同余方程与同余方程组"></a>计算同余方程与同余方程组</h3><pre><code>关于同余理论，自己的其他相关博客已经存在讲解这里就不在过多介绍了，</code></pre><p>这里有一道经典的题，以后有时间插一下代码。</p><p>这里再次总结一下一元线性同余方程的解法。</p><blockquote><ol><li>首先首先 线性同余方程可以表示为 ax =- b(mod m)  就这样可以表示为一个不定方程式 ax = b + ym;</li><li>先求出 b % gcd(a,m)  判断其是否为0，如果不为0，那么以上的同余方程式或者不定方程式无解。如果 得到的结果为j，那么说明该方程有 j个 mod m 不同余的解 d = gcd(a,m);</li><li>当用欧几里得算法求出以上的解之后 得到其实是  ax=- d(mod m) 这一同余方程中 x 的解。所以说人话就是 当求出了那个特解之后 再去乘以之前 的 B 值 最后mod m得到最终同余方程的解。<br>2</li></ol><p>关于计算同余方程，其实与求解扩展欧几里得通解的效果是一样的，</p></blockquote><p><em>C_Loop poj2115</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题其实再一次涉及到 exgcd的另外一个用法 这个用法仍然是从其中求解不定方程的作用中延伸过来的。</span></span><br><span class="line"><span class="comment">    这道题就是一个简单的一维的线性求余过程，</span></span><br><span class="line"><span class="comment">    对于这道题就显示一下 线性同余的过程</span></span><br><span class="line"><span class="comment">    首先 线性同余方程可以表示为 ax =- b(mod m)  就这样可以表示为一个不定方程式 ax = b + ym;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    所以第一步 先求出 b % gcd(a,m)  判断其是否为0，如果不为0，那么以上的同余方程式或者不定方程式无解。</span></span><br><span class="line"><span class="comment">    如果 得到的结果为j，那么说明该方程有 j个 mod m 不同余的解</span></span><br><span class="line"><span class="comment">    d = gcd(a,m);</span></span><br><span class="line"><span class="comment">    当用欧几里得算法求出以上的解之后 得到其实是  ax` =- d(mod m) 这一同余方程中 x`的解。</span></span><br><span class="line"><span class="comment">    所以根据判断d是否等于0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    可以求出第一个解释x0 = x` * (b / d) mod m; </span></span><br><span class="line"><span class="comment">    而其余d - 1的解就是 xi = (x0 + i *(m / d)) mod m;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    所以说人话就是 当求出了那个特解之后 再去乘以之前 的 B 值 最后mod m得到最终同余方程的解。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> &amp;x,<span class="keyword">long</span> <span class="keyword">long</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t = exgcd(b,a % b,x,y);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> d = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = d - (a / b) * y;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b,c,k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld %lld"</span>,&amp;a,&amp;b,&amp;c,&amp;k)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span> &amp; c == <span class="number">0</span> &amp;&amp; k ==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> gap = b - a;</span><br><span class="line">        k = ((<span class="keyword">long</span> <span class="keyword">long</span>)<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">        gap = (gap % k + k) % k;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gap == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> q = exgcd(c,k,x,y);</span><br><span class="line">        <span class="keyword">if</span> (gap % q) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"FOREVER\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//前面属于判断过程，后面就是正常的ecgcd的 不定方程求解了</span></span><br><span class="line">        <span class="comment">//所以需要做的事情就是 方程两边同时除以gcd</span></span><br><span class="line">        c = c / q;</span><br><span class="line">        gap = gap / q;</span><br><span class="line">        k = k / q;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> xx = exgcd(c,k,x,y);</span><br><span class="line">        x *= gap;</span><br><span class="line">        x = (x % k + k) % k;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是一道求解逆元的问题了。</p><p><strong>定理 同余方程 ax =- 1(mod m)有解 当且仅仅当 gcd(a,m) = 时候成立，且其的所有解都同余</strong></p><p><em>Modular Inverse zoj 3609</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t = exgcd(b,a % b,x,y);</span><br><span class="line">    <span class="keyword">int</span> d = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = d - (a / b) * y;</span><br><span class="line">    <span class="keyword">return</span> t; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b,q,x,y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; T) &#123;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        q = exgcd(a,b,x,y);</span><br><span class="line">        <span class="comment">//就是这里多了判断其是否为0的条件。</span></span><br><span class="line">        <span class="keyword">if</span> (q != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Not Exist\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里就是处理0的情况</span></span><br><span class="line">        x = (x % b + b) % b;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同余方程组-（中国剩余定理）"><a href="#同余方程组-（中国剩余定理）" class="headerlink" title="同余方程组 （中国剩余定理）"></a>同余方程组 （中国剩余定理）</h3><p>这里贴出 求解同余方程组的阶梯步骤</p><blockquote><ol><li>将题目中给出的所有同余方程组列出来，形如 a =- ai (mod ni),并且将每一个ni相乘起来 得到一个 n 。（或者是求其全部的最小公倍数）</li><li>然后通过公式 计算出 mi = n / ni，然后再通过mi 计算出mi模 n 的逆  就是通过 扩展欧几里得公式去求解每一个同余方程 mi * x =- 1 (mod ni);</li><li>然后再计算每一个 ci = mi * mi的逆。</li><li>最后通过公式 a = ((全部相加)ai * ci ) mod n…</li></ol></blockquote><p><em>Biorhythms poj 1006</em> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题目其实是严格按照中国剩余定理来计算的，最后求解的结果实际上是计算出来的三个同余的结果，同时满足多个同余方程的一个共同的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    不过下面的步骤需要弄清楚，第一步是先求出每一个同余的 m值，然后再通过求m逆，然后将其相乘得到ci 最后乘以每一项的ci</span></span><br><span class="line"><span class="comment">    最后求解的结果去mod上一个最终的mod n就行了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p,e,i,d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span> <span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t = exgcd(b,a % b,x,y);</span><br><span class="line">    <span class="keyword">int</span> d = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = d - (a / b) * y;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m1,m2,m3;</span><br><span class="line"><span class="keyword">int</span> n1,n2,n3;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">21252</span>;</span><br><span class="line"><span class="keyword">int</span> x,x2,x3;</span><br><span class="line"><span class="keyword">int</span> y,y2,y3;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理C++ 中 % 出负数的情况</span></span><br><span class="line"><span class="keyword">int</span> _mod(<span class="keyword">int</span> x,<span class="keyword">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (x % b + b) % b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Case = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;p,&amp;e,&amp;i,&amp;d)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">-1</span> &amp;&amp; e == <span class="number">-1</span> &amp;&amp; i == <span class="number">-1</span> &amp;&amp; d== <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        m1 = n / <span class="number">23</span>;</span><br><span class="line">        m2 = n / <span class="number">28</span>;</span><br><span class="line">        m3 = n / <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> q1 = exgcd(m1,<span class="number">23</span>,x,y);</span><br><span class="line">        <span class="keyword">int</span> q2 = exgcd(m2,<span class="number">28</span>,x2,y2);</span><br><span class="line">        <span class="keyword">int</span> q3 = exgcd(m3,<span class="number">33</span>,x3,y3);</span><br><span class="line"></span><br><span class="line">        x = _mod(x,<span class="number">23</span>) * m1;</span><br><span class="line">        x2 = _mod(x2,<span class="number">28</span>) * m2;</span><br><span class="line">        x3 = _mod(x3,<span class="number">33</span>) * m3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = x * p + x2 * e + x3 * i - d;</span><br><span class="line">        res = res % n;</span><br><span class="line">        <span class="keyword">if</span> (res &lt;= <span class="number">0</span>) res += n;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span>&lt;&lt; Case++ &lt;&lt;<span class="string">": the next triple peak occurs in "</span>&lt;&lt;res &lt;&lt;<span class="string">" days."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊的同余式"><a href="#特殊的同余式" class="headerlink" title="特殊的同余式"></a>特殊的同余式</h3><h4 id="威尔逊定理"><a href="#威尔逊定理" class="headerlink" title="威尔逊定理"></a>威尔逊定理</h4><p><strong>如果 p 是素数，(p - 1)! =- -1 (mod p)成立</strong></p><pre><code>意思就是 如果 p是素数的情况，(p - 1)! + 1 mod p 正好可以等于0.</code></pre><p><em>YAPTCHA uva 4382</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 2018</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ ios_base::sync_with_stdio(0), cin.tie(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">10</span>, INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">int</span> vis[maxn], ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里是一种简单的筛法,相当于一个简单的埃式筛法。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mem(vis, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(maxn + <span class="number">0.5</span>); i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt; maxn; j += i)</span><br><span class="line">                vis[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mem(ans, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">3</span> * i + <span class="number">7</span>;</span><br><span class="line">        ans[i] = ans[i - <span class="number">1</span>] + (<span class="number">1</span> - vis[temp]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    f();</span><br><span class="line">    <span class="keyword">int</span> T, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h4><blockquote><p>如果p是素数，a是正整数，gcd(a,p) = 1,则 a的p - 1 次幂 同余 1 mod p.</p></blockquote><p><em>what day is that day zoj 3785</em><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题讲述的就是费马小定理，这道题目关键点就是在，前面对于周期mod的求取，应用了费马小定理，最后得出的结论。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> day[<span class="number">10</span>][<span class="number">10</span>] = &#123;<span class="string">"Saturday"</span>, <span class="string">"Sunday"</span>, <span class="string">"Monday"</span>, <span class="string">"Tuesday"</span>, <span class="string">"Wednesday"</span>, <span class="string">"Thursday"</span>, <span class="string">"Friday"</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++)</span><br><span class="line">        ans = (ans * x) % <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">300</span>; i++)</span><br><span class="line">        num[i] = (<span class="built_in">pow</span>(i) + num[i - <span class="number">1</span>]) % <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, day[num[n % <span class="number">294</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="伪素数"><a href="#伪素数" class="headerlink" title="伪素数"></a>伪素数</h4><pre><code>其产生的原因就在于费马小定理的逆不成立，如果a是一个正整数，如果n是一个正合数，并且a的n次幂  同余 a (mod n) 则称n为以a为基的伪素数。</code></pre><p><em>Pseudoprime numbers poj 3641</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题不断的出现runtime error 用java 的时候 这个时候我就不太清楚是为什么了。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    后面还需要弄清楚一件事情就是 究竟什么时候才能够用欧拉赛的时间去打表，这里就不太清楚 有的时候用欧拉筛打表反而出现错误的答案。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> _mod(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> y,<span class="keyword">long</span> <span class="keyword">long</span> mod) &#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)  ans = ans * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x) + <span class="number">0.5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> q,a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;q,&amp;a) &amp;&amp; q &amp;&amp; a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime(q)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = _mod(a,q,q);</span><br><span class="line">        <span class="keyword">if</span> (ans == a) <span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来还有一道题，可以根据java的一个函数直接得出结果，但是同样也可以通过C++ 的大素数的检测方法从而得出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        BigInteger a;</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">            n = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                a = in.nextBigInteger();</span><br><span class="line">                <span class="keyword">if</span> (a.isProbablePrime(<span class="number">3</span>)) cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++ 前面有讲的超出区间的测定方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tp = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(x * <span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tp; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, tp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tp);</span><br><span class="line">            <span class="keyword">if</span> (tp == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tp &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans += is_prime(tp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h4><p>欧拉函数表示的是到n之前与n互素的且不超过n的正整数的个数。</p><p>如果 n和a是互素的正整数，则 a的 欧拉函数n 同余1 mod n</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="acm" scheme="http://wsx1128.cn/tags/acm/"/>
    
      <category term="数论" scheme="http://wsx1128.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>背包初级及相应题目总结</title>
    <link href="http://wsx1128.cn/2019/05/01/%E8%83%8C%E5%8C%85%E5%88%9D%E7%BA%A7%E5%8F%8A%E7%9B%B8%E5%BA%94%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.cn/2019/05/01/背包初级及相应题目总结/</id>
    <published>2019-05-01T00:47:30.000Z</published>
    <updated>2019-05-01T02:48:38.667Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背包初级讲解"><a href="#背包初级讲解" class="headerlink" title="背包初级讲解"></a>背包初级讲解</h2><p>这里对于动态规划里面一个简单基础的问题进行总结，包括 01背包，完全背包，多重背包，混合背包…</p><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p><strong>题目</strong></p><p>有N件物品和一个容量为V 的背包。放入第i件物品耗费的费用是Ci1，得到 的价值是Wi 。求解将哪些物品装入背包可使价值总和最大。</p><p><strong>基本思路</strong></p><p>用子问题定义状态:即F [i, v]表示前i件物品恰放入一个容量为v的背包可 以获得的最大价值。则其状态转移方程便是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**对于二维dp数组的伪代码如下**</span><br><span class="line"></span><br><span class="line">F[0,0..V] ←0 fori ←1toN</span><br><span class="line">forv ←Ci toV</span><br><span class="line">F[i,v] ← max&#123;F[i − 1,v],F[i − 1,v − Ci] + Wi&#125;</span><br><span class="line"></span><br><span class="line">**优化空间的复杂度**</span><br><span class="line">使用滚动数组，以及进行压缩空间。</span><br><span class="line">伪代码如下：</span><br><span class="line">F [0..V ] ←0 fori ←1toN</span><br><span class="line">forv ←V toCi</span><br><span class="line">F[v] ←max&#123;F[v],F[v−Ci]+Wi&#125;</span><br><span class="line"></span><br><span class="line">**初始化的细节**</span><br><span class="line">&gt;我们看到的求最优解的背包问题题目中，事实上有两种不太相同的问法。 有的题目要求“恰好装满背包”时的最优解，有的题目则并没有要求必须把背 包装满。一种区别这两种问法的实现方法是在初始化的时候有所不同。</span><br><span class="line">&gt;如果是第一种问法，要求恰好装满背包，那么在初始化时除了F [0]为0，其 它F [1..V ]均设为−∞，这样就可以保证最终得到的F [V ]是一种恰好装满背包的 最优解。</span><br><span class="line">&gt;如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该 将F [0..V ]全部设为0。</span><br><span class="line"></span><br><span class="line">#### 题目总结 </span><br><span class="line">##### 1.Charm Bracelet  (poj3624)</span><br><span class="line"></span><br><span class="line">```C++</span><br><span class="line">/*</span><br><span class="line">第一道题属于一个简单的01背包模板题目，这里不多说 可以直接套模板。</span><br><span class="line">*/</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int n,m;</span><br><span class="line"></span><br><span class="line">int dp[13000];</span><br><span class="line">int w[3500],v[3500];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (cin &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        memset(dp,0,sizeof dp);</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">            for (int j = m; j &gt;= w[i]; j--) &#123;</span><br><span class="line">                dp[j] = max(dp[j],dp[j - w[i]] + v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[m] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-Bone-Collector-hdu-2602"><a href="#2-Bone-Collector-hdu-2602" class="headerlink" title="2.Bone_Collector(hdu 2602)"></a>2.Bone_Collector(hdu 2602)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一段简单的模板题目，不过需要弄清楚的 一维数组与二维数组在这里相应的区别，往往这里会产生很大的区别，</span></span><br><span class="line"><span class="comment">    比如第二个循环的开始条件，因为这里是由子问题的堆积，然后一点一点向上升最终得到的问题，所以这李最好控制背包的放与不放的问题、</span></span><br><span class="line"><span class="comment">    就比如我在这道题目的第二个问题中出现的错误，就是将j=0这个条件直接掠过去了，其实这里是不对的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> weight[maxn],value[maxn],dp[maxn][maxn];</span><br><span class="line"><span class="keyword">long</span> v,w;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w &gt;&gt; v;</span><br><span class="line">        value[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        weight[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; value[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; weight[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= v; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= weight[i]) &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i - <span class="number">1</span>][j],dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[w][v] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-饭卡"><a href="#3-饭卡" class="headerlink" title="3.饭卡"></a>3.饭卡</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题神奇的地方就在于 其的重量限制于价值重合在了一起，所以对于这道题而言就是只能重合的去写状态转移方程了</span></span><br><span class="line"><span class="comment">    另外需要注意的是最后输出结果的办法，是将最后一个物品交给剩下的最大的钱去购买，这样能彻底用光最后的钱财</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn],dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        sort(num + <span class="number">1</span>, num + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m - <span class="number">5</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= num[i]) &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i - <span class="number">1</span>][j],dp[i - <span class="number">1</span>][j - num[i]] + num[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m - dp[n - <span class="number">1</span>][m - <span class="number">5</span>] - num[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p>完全背包这里与01背包相类似，但是区别就在于每一个种类的背包可以取无数个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">一般都是将其转化为01背包的方法求解，用一个滚动数组来进行表示，不过需要注意的是，其与01背包的第二个循环不同地方</span><br><span class="line"></span><br><span class="line">完全背包的伪代码：</span><br><span class="line">```py</span><br><span class="line">def CompletePack(F, C, W ) forv ←CtoV</span><br><span class="line">F[v] ←max&#123;F[v],f[v−C]+W&#125;</span><br></pre></td></tr></table></figure><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>下面贴出关于完全背包的题目</p><h5 id="1-减肥"><a href="#1-减肥" class="headerlink" title="1.减肥"></a>1.减肥</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题使用二维数组就一直就会超时 具体的我也不太清楚，但是 没有办法 只能使用一维滚动数组，进行了相应的空间优化 不过这里需要补充几个知识点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    第一 关于二维数组的完全背包状态转移方程 dp[i][j] = max (dp[i - 1][j],dp[i - 1][j - k * c[i]] + k * v[i]);</span></span><br><span class="line"><span class="comment">    由上面这个式子就可以得出，状态转移方程  于是 一种空间优化的写法 是直接写成 max(dp[i - 1][j]，dp[i][j - w[i]] + v[i])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    第二 如果换成滚动数组的话 记住 第二个循环的两个顺序，如果是倒叙的话 则就是要保证每一个物品只会取一次，但是如果是正序的话，那么就不需要保证上面所说的顺序了。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    而这里官方的解释 就在这里 ：</span></span><br><span class="line"><span class="comment">    让 v 递减是为了保证第i次循环中的状态F[i;v]是由状态F[i-1;v-Ci]递推而来。</span></span><br><span class="line"><span class="comment">    换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第 i 件物品”这件策</span></span><br><span class="line"><span class="comment">    略时，依据的是一个绝无已经选入第 i 件物品的子结果F[i-1;v-Ci]。而现在完全背</span></span><br><span class="line"><span class="comment">    包的特点恰是每种物品可选无限件，所以在考虑“加选一件第 i 种物品”这种策略时，</span></span><br><span class="line"><span class="comment">    却正需要一个可能已选入第 i 种物品的子结果F[i;v-Ci]，所以就可以并且必须采用v</span></span><br><span class="line"><span class="comment">    递增的顺序循环。这就是这个简单的程序为何成立的道理。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a, b, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> happiness[maxn], kaluli[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">110000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;happiness[i],&amp;kaluli[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = kaluli[i]; j &lt;= m; j++) &#123;</span><br><span class="line">                dp[j] = max(dp[j],dp[j - kaluli[i]] + happiness[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[m]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-Dollar-Dayz"><a href="#2-Dollar-Dayz" class="headerlink" title="2.Dollar Dayz"></a>2.Dollar Dayz</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n,k;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">            BigInteger[] dp = <span class="keyword">new</span> BigInteger[<span class="number">1005</span>];</span><br><span class="line">            n = in.nextInt();</span><br><span class="line">            k = in.nextInt();</span><br><span class="line">            dp[<span class="number">0</span>] = <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                dp[i] = <span class="keyword">new</span> BigInteger(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">                    dp[j] = dp[j].add(dp[j - i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           System.out.println(dp[n]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-Piggy-Bank"><a href="#3-Piggy-Bank" class="headerlink" title="3.Piggy-Bank"></a>3.Piggy-Bank</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题是一个完全背包的裸题，对于这道题而言更加神奇的地方就在于其实求最小值而不是求最大值</span></span><br><span class="line"><span class="comment">    所以在最先开始初始化的时候不应该去初始化为0，而应该初始化为无穷大</span></span><br><span class="line"><span class="comment">    而千万不要忘记了再初始化的时候一定要对第一个状态进行一个单独赋值是等于0，还是等于无穷大，这个等到时候再看。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _beg,_end;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> v[maxn],w[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;_beg,&amp;_end);</span><br><span class="line">        <span class="keyword">int</span> bottle = _end - _beg;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;v[i],&amp;w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = w[i]; j &lt;= bottle; j++) &#123;</span><br><span class="line">                dp[j] = min(dp[j],dp[j - w[i]] + v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dp[bottle] != <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"The minimum amount of money in the piggy-bank is "</span> &lt;&lt; dp[bottle] &lt;&lt; <span class="string">"."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"This is impossible."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p>多重背包与完全背包最大的不同就是在于，完全背包其的每一个背包取值可以取无数个（相对于背包容量而言）<br>而多重背包的意思就是相对于背包容量而言 取不满，在取不满的同时还能够再加入其的背包，故，这里就为多重背包</p><h4 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="comment">//三个属性值 一个重量 数量 以及价值</span></span><br><span class="line"><span class="keyword">int</span> weight[maxn],number[maxn],value[maxn];</span><br><span class="line"><span class="comment">//状态存储</span></span><br><span class="line"><span class="keyword">int</span> dp[maxn &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="comment">//背包的容量</span></span><br><span class="line"><span class="keyword">int</span> bag; </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01背包 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zeroonepack</span><span class="params">(<span class="keyword">int</span> weight,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = bag; j &gt;= weight; j--) &#123;</span><br><span class="line">        dp[j] = max(dp[j],dp[j - weight] + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完全背包</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">completepack</span><span class="params">(<span class="keyword">int</span> weight,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = weight; j &lt;= bag; j++) &#123;</span><br><span class="line">        dp[j] = max(dp[j],dp[j - weight] + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多重背包</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multilpack</span><span class="params">(<span class="keyword">int</span> weight,<span class="keyword">int</span> number,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一种情况就是 如果这件物品所有的重量是小于背包的重量的话</span></span><br><span class="line">    <span class="comment">//那么对于背包而言 这个物品是可以取无限大。</span></span><br><span class="line">    <span class="keyword">if</span> (bag &lt;= number * weight) &#123;</span><br><span class="line">        completepack(weight,value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//而超过的这个范围的就只能使用01背包 然后使用二进制的方法</span></span><br><span class="line">    <span class="comment">//将每一类型的背包进行一个分组</span></span><br><span class="line">    <span class="comment">//后面再依次分别使用多重背包。</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt;= number) &#123;</span><br><span class="line">        zeroonepack(k * weight,k * value);</span><br><span class="line">        number = number - k;</span><br><span class="line">        k = k * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zeroonepack(number * weight, number * value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; bag &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ;i ++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; weight[i] &gt;&gt; number[i] &gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ;i ++) &#123;</span><br><span class="line">        multilpack(weight[i],number[i],value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[bag] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="相应题目总结"><a href="#相应题目总结" class="headerlink" title="相应题目总结"></a>相应题目总结</h4><h5 id="1-Space-Elevator"><a href="#1-Space-Elevator" class="headerlink" title="1. Space Elevator"></a>1. Space Elevator</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一道多重背包的裸题目，这道题虽然并没有去套用多重背包的裸模板，但是这道题神奇的地方就在于其对于</span></span><br><span class="line"><span class="comment">    背包的数量进行了再一次的循环，然后再来看看有没有符合的特点。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    然后其的状态转移方程也是特别的有意思：</span></span><br><span class="line"><span class="comment">    dp[k] |= dp[k - node[i].h]</span></span><br><span class="line"><span class="comment">    不过这个 |= 到后面去官网查询一下最后的结果的意思.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> h,a,c;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;n) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; n.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;node[<span class="number">450</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">40050</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> K;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; K) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; node[i].h &gt;&gt; node[i].a &gt;&gt; node[i].c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        sort(node + <span class="number">1</span>, node + <span class="number">1</span> + K);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K ;i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= node[i].c; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = node[i].a; k &gt;= node[i].h; k-- )&#123;</span><br><span class="line">                    dp[k] |= dp[k - node[i].h];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = node[K].a; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i]) &#123;</span><br><span class="line">                cnt = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-Coins"><a href="#2-Coins" class="headerlink" title="2. Coins"></a>2. Coins</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题神奇的地方就是将多重背包的裸题进行了改变，</span></span><br><span class="line"><span class="comment">    主要就是每一次增加的价值会发生改变，这才是最关键的地方。</span></span><br><span class="line"><span class="comment">    这里的价值就不再是个数，而是进行一个打表，通过这个打表来判断这个重量是否能够达到。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> bag;</span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">100040</span>];</span><br><span class="line"><span class="keyword">int</span> value[<span class="number">105</span>],number[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zeroonepack</span><span class="params">(<span class="keyword">int</span> weight, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = bag; j &gt;= weight; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dp[j] &amp;&amp; dp[j - weight])&#123;</span><br><span class="line">            dp[j] = <span class="literal">true</span>;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完全背包</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">completepack</span><span class="params">(<span class="keyword">int</span> weight, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = weight; j &lt;= bag; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dp[j] &amp;&amp; dp[j - weight]) &#123;</span><br><span class="line">            dp[j] = <span class="literal">true</span>;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多重背包</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multilpack</span><span class="params">(<span class="keyword">int</span> weight, <span class="keyword">int</span> number, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一种情况就是 如果这件物品所有的重量是小于背包的重量的话</span></span><br><span class="line">    <span class="comment">//那么对于背包而言 这个物品是可以取无限大。</span></span><br><span class="line">    <span class="keyword">if</span> (bag &lt;= number * weight)</span><br><span class="line">    &#123;</span><br><span class="line">        completepack(weight, value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//而超过的这个范围的就只能使用01背包 然后使用二进制的方法</span></span><br><span class="line">    <span class="comment">//将每一类型的背包进行一个分组</span></span><br><span class="line">    <span class="comment">//后面再依次分别使用多重背包。</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; number)</span><br><span class="line">    &#123;</span><br><span class="line">        zeroonepack(k * weight, k * value);</span><br><span class="line">        number = number - k;</span><br><span class="line">        k = k * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zeroonepack(number * weight, number * value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; bag &amp;&amp; n &amp;&amp; bag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; value[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i ++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; number[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ;i ++) &#123;</span><br><span class="line">            multilpack(value[i],number[i],value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合背包"><a href="#混合背包" class="headerlink" title="混合背包"></a>混合背包</h3><p>将01背包 完全背包 多重背包的三种背包 进行一个混合<br>最简单的解决方法就是将其分开进行来算</p><p>举个例子 就是 一道题可能有多个背包，通过这多个背包来进行判断题目中所要求解的值。</p><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><h5 id="1-Fewest-coins"><a href="#1-Fewest-coins" class="headerlink" title="1.Fewest coins"></a>1.Fewest coins</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题目神奇的地方 是两个背包的问题 的总和，其实也算作是一个简单的题目，但是 这道题唯一复杂的地方就在于对于背包问题的理解</span></span><br><span class="line"><span class="comment">    意思就是如何将一个看上去不是背包的问题转换成一个背包问题 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    首先的思路就是来判断是一个什么类型的背包</span></span><br><span class="line"><span class="comment">    映射到这道题上面可以发现 前面付钱的过程是一个多重背包 后面付钱的过程是一个完全背包</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    不过深入理解了塞入 状态方程 </span></span><br><span class="line"><span class="comment">    第一次在价值那个地方出现了错误。 最终的价值不应该是相比总是的钱数，而应该是最小能够达到的背包数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30005</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn],back[maxn];</span><br><span class="line"><span class="keyword">int</span> value[<span class="number">105</span>],number[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bag;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zeroonepack</span><span class="params">(<span class="keyword">int</span> weight,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = bag ; j &gt;= weight; j--) &#123;</span><br><span class="line">        dp[j] = min(dp[j],dp[j - weight] + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">completepack</span><span class="params">(<span class="keyword">int</span> weight,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = weight; j &lt;= bag; j++) &#123;</span><br><span class="line">        dp[j] = min(dp[j],dp[j - weight] + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mutipack</span><span class="params">(<span class="keyword">int</span> weight,<span class="keyword">int</span> value,<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number * weight &gt;= bag) &#123;</span><br><span class="line">        completepack(weight,value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; number) &#123;</span><br><span class="line">        zeroonepack(k * weight,k * value);</span><br><span class="line">        number = number - k;</span><br><span class="line">        k *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zeroonepack(number * weight , number * value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; value[i] ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; number[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="built_in">memset</span>(back,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> back);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        back[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        bag = k + <span class="number">20000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = value[i]; j &lt;= bag; j++) &#123;</span><br><span class="line">                back[j] = min(back[j],back[j - value[i]] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            mutipack(value[i],<span class="number">1</span>,number[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= bag; i++) &#123;</span><br><span class="line">            ans = min(ans,back[i - k] + dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">0x3f3f3f3f</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="acm" scheme="http://wsx1128.cn/tags/acm/"/>
    
      <category term="背包九讲" scheme="http://wsx1128.cn/tags/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/"/>
    
      <category term="动态规划" scheme="http://wsx1128.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>effective java item 6</title>
    <link href="http://wsx1128.cn/2019/03/28/effective-java-item-6/"/>
    <id>http://wsx1128.cn/2019/03/28/effective-java-item-6/</id>
    <published>2019-03-28T12:41:52.000Z</published>
    <updated>2019-03-28T13:43:08.059Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Item-6-Avoid-creating-unnecessary-objects"><a href="#Item-6-Avoid-creating-unnecessary-objects" class="headerlink" title="Item 6: Avoid creating unnecessary objects"></a>Item 6: Avoid creating unnecessary objects</h2><blockquote><p>It is often appropriate to reuse a single object instead of creating a new function- ally equivalent object each time it is needed. Reuse can be both faster and more stylish. An object can always be reused if it is immutable</p></blockquote><p>去反复的使用一个单一的对象，而不是再次创建一个新对象再需要的时候这样的做法是非常合适的。重复使用可以同时很快有符合现代规则。然后一个对象可以被总是反复使用如果其是不变的话。</p><p>下面有一个基本简单的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"bikini"</span>);  <span class="comment">// DON'T DO THIS!</span></span><br><span class="line">String s = <span class="string">"bikini"</span>;</span><br></pre></td></tr></table></figure><p>前者是不可以采取的，因为其新建了两个对象，并且第二个新建的对象直接赋值给第一个新建的对象，而后者可取的地方就在于其直接赋值给了第一个对象，不存在创建一个新的对象。</p><blockquote><p>You can often avoid creating unnecessary objects by using static factory meth- ods (Item 1) in preference to constructors on immutable classes that provide both.</p></blockquote><p>你可以经常通过用静态的工厂方法禁止创建一个不必要的对象而不是使用不会改变的类或者是一个构造器。</p><blockquote><p>For example, the factory method Boolean.valueOf(String) is preferable to the constructor Boolean(String), which was deprecated in Java 9. The constructor must create a new object each time it’s called, while the factory method is never required to do so and won’t in practice.</p></blockquote><p>这里举个例子，工厂方法就像上面提供的相比于其的构造函数而言，不需要再每次调用的时候构建一个新的对象，而且如果反复利用的是一个不变的对象的话，你可以保证的是，找个对象永远都不会改变。</p><blockquote><p>Unfortunately, it’s not always obvious when you’re creating such an object. Suppose you want to write a method to determine whether a string is a valid Roman numeral. Here’s the easiest way to do this using a regular expression</p></blockquote><p>不幸的是，当你创建一个这样的对象的时候不总是那么的明显，假设你想要写一个方法去判断一个字符串是否是罗马数字，下面有一个简单的办法来进行判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Performance can be greatly improved! </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> s.matches(<span class="string">"^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)"</span> + <span class="string">"(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>While String.matches is the easiest way to check if a string matches a regular expression, it’s not suitable for repeated use in performance-critical situations.</p></blockquote><p>这通常是一个最简单的方法去判断是否一个字符串去包含常规的语法操作，然而其并不适合多次使用即多次调用的场景下面。</p><blockquote><p>The problem is that it internally creates a Pattern instance for the regular expression and uses it only once, after which it becomes eligible for garbage collection. Creating a Pattern instance is expensive because it requires compiling the regular expression into a finite state machine.</p></blockquote><p>而这个的问题就在于其创建了一个Pattern的实例给相应的正则表达式，而且仅仅只是使用了一次，然后就直接被java垃圾回收器给回收了，而创建一个Pattern的实例的代价是非常昂贵的，因为其需要compiling这个正则表达式到相应的机器里面去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reusing expensive object for improved performance </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RomanNumerals</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ROMAN = Pattern.compile( <span class="string">"^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)"</span> + <span class="string">"(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$"</span>); </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> ROMAN.matcher(s).matches(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>If the class containing the improved version of the isRomanNumeral method is initialized but the method is never invoked, the field ROMAN will be initialized needlessly. It would be possible to eliminate the initialization by lazily initializing the field (Item 83) the first time the isRomanNumeral method is invoked, but this is not recommended. As is often the case with lazy initialization, it would compli- cate the implementation with no measurable performance improvement (Item 67).</p></blockquote><p>还有一种优化的方案就在于，如果上面这个类永远都没有被调用的话，那么上面直接设置成静态的成员变量就会出现构造对象的浪费，意思就是如果没有被调用就会有浪费，于是有一种方法就是按照之前的单实例化类那样，在构造函数里面加上，如果被调用了，那么就会创建一个final的对象。</p><blockquote><p>Another way to create unnecessary objects is autoboxing, which allows the programmer to mix primitive and boxed primitive types, boxing and unboxing automatically as needed. Autoboxing blurs but does not erase the distinction between primitive and boxed primitive types.</p></blockquote><p>还存在一种方式去创建一些不必要的对象，就是自动打包行为，就是将原生的类型，自动打包成了封装类型，这样也会造成许多不需要的对象，有些对象仅仅只是使用了一次。就像下面这个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hideously slow! Can you spot the object creation? </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    Long sum = <span class="number">0L</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++) </span><br><span class="line">        sum += i; </span><br><span class="line">    <span class="keyword">return</span> sum; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的这个例子就是在加法的时候使long的类型自动包装成一个Long类型，这样则造成了很多不必要的开销。</p><blockquote><p>The present item says, “Don’t create a new object when you should reuse an existing one,”while Item 50 says, “Don’t reuse an existing object when you should create a new one.” Note that the penalty for reusing an object when defensive copying is called for is far greater than the penalty for needlessly creating a duplicate object. Failing to make defensive copies where required can lead to insidious bugs and security holes; creating objects unnecessarily merely affects style and performance.</p></blockquote><p>总而言之，当你可以并且应该重复利用一个已经存在的一个对象的时候，不要重复创建一个新的对象，而第五十条提醒的是 当你需要一个新的对象的时候不要去重复引用一个存在的旧对象。记住一些保护性质copy实际上是并不可取的，这个在后面会涉及到，其实这里与C++里面的知识有点吻合，关于左值引用与右值引用的知识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://wsx1128.cn/categories/java/"/>
    
    
      <category term="算法" scheme="http://wsx1128.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://wsx1128.cn/tags/java/"/>
    
      <category term="effective_java" scheme="http://wsx1128.cn/tags/effective-java/"/>
    
  </entry>
  
</feed>
