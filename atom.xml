<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Magical Bean</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wsx1128.xyz/"/>
  <updated>2019-02-25T17:33:15.545Z</updated>
  <id>http://wsx1128.xyz/</id>
  
  <author>
    <name>五光君</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>8_pazzle</title>
    <link href="http://wsx1128.xyz/2019/02/26/8-pazzle/"/>
    <id>http://wsx1128.xyz/2019/02/26/8-pazzle/</id>
    <published>2019-02-25T17:23:10.000Z</published>
    <updated>2019-02-25T17:33:15.545Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="此为第四周普林斯顿算法课大作业，基本思路是基于优先队列的A-算法。"><a href="#此为第四周普林斯顿算法课大作业，基本思路是基于优先队列的A-算法。" class="headerlink" title="此为第四周普林斯顿算法课大作业，基本思路是基于优先队列的A*算法。"></a>此为第四周普林斯顿算法课大作业，基本思路是基于优先队列的A*算法。</h2><p>所谓A*算法，就是启发式算法，人工智能基础，就是将每一步周围的一步之类的情况全部存储起来，然后放进优先队列里面进行比较，然后依次出队，算出最终的结果<br>相当于一个小博弈。</p><p>首先，先看题目。<br><img src="/2019/02/26/8-pazzle/11.png" alt="11"><br><img src="/2019/02/26/8-pazzle/22.png" alt="22"><br><img src="/2019/02/26/8-pazzle/33.png" alt="33"></p><p>直接贴出代码</p><p><strong>Board.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> [][] blocks;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> dimension;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Board</span><span class="params">(<span class="keyword">int</span>[][] blocks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (blocks == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Null blocks"</span>);</span><br><span class="line">        dimension = blocks.length;</span><br><span class="line">        <span class="keyword">this</span>.blocks = <span class="keyword">new</span> <span class="keyword">int</span>[dimension][dimension];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.blocks[i] = blocks[i].clone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dimension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dimension;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hamming</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] != i  * dimension + j + <span class="number">1</span>) cnt ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">manhattan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] != i  * dimension + j + <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> val = blocks[i][j];</span><br><span class="line">                    <span class="keyword">int</span> row = (val - <span class="number">1</span>) / dimension;</span><br><span class="line">                    <span class="keyword">int</span> col = (val - <span class="number">1</span>) % dimension;</span><br><span class="line">                    <span class="keyword">int</span> dif = Math.abs(row - i)  + Math.abs(col - j);</span><br><span class="line">                    cnt += dif;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGoal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hamming() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="keyword">int</span> i1,<span class="keyword">int</span> r1,<span class="keyword">int</span> i2,<span class="keyword">int</span> r2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = blocks[i1][r1];</span><br><span class="line">        blocks[i1][r1] = blocks[i2][r2];</span><br><span class="line">        blocks[i2][r2] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Board <span class="title">twin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Board twinBoard = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>,col = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (blocks[row][col] == <span class="number">0</span>) col++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] != <span class="number">0</span> &amp;&amp; blocks[i][j] != blocks[row][col]) &#123;</span><br><span class="line">                    twinBoard.swap(i,j,row,col);</span><br><span class="line">                    <span class="keyword">return</span> twinBoard;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> twinBoard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object y)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (y == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         <span class="keyword">if</span> (y.getClass().isInstance(<span class="keyword">this</span>)) &#123;</span><br><span class="line">             Board tmp = (Board) y;</span><br><span class="line">             <span class="keyword">if</span> (tmp.dimension != <span class="keyword">this</span>.dimension)</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">                 <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (tmp.blocks[i][j] != <span class="keyword">this</span>.blocks[i][j])</span><br><span class="line">                         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Board&gt; <span class="title">neighbors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Board&gt; neighbors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Board tmpUp = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">                        tmpUp.swap(i,j,i - <span class="number">1</span>,j);</span><br><span class="line">                        neighbors.add(tmpUp);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i &lt; dimension - <span class="number">1</span>) &#123;</span><br><span class="line">                        Board tmpDown = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">                        tmpDown.swap(i,j,i + <span class="number">1</span>,j);</span><br><span class="line">                        neighbors.add(tmpDown);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Board tmpLeft = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">                        tmpLeft.swap(i,j,i,j - <span class="number">1</span>);</span><br><span class="line">                        neighbors.add(tmpLeft);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (j &lt; dimension - <span class="number">1</span>) &#123;</span><br><span class="line">                        Board tmpRight = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">                        tmpRight.swap(i,j,i,j + <span class="number">1</span>);</span><br><span class="line">                        neighbors.add(tmpRight);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> neighbors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(dimension + <span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; dimension; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; dimension; col++) &#123;</span><br><span class="line">                sb.append(String.format(<span class="string">"%2d "</span>, blocks[row][col]));</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Programming_Assignment_4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.MinPQ;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Stack;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BoardNode current;</span><br><span class="line">    <span class="keyword">private</span> BoardNode twinCurrent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardNode</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">BoardNode</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Board item;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> priority;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> move;</span><br><span class="line">        <span class="keyword">private</span> BoardNode preBoard;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BoardNode</span> <span class="params">(Board item,BoardNode preBoard)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.preBoard = preBoard;</span><br><span class="line">            <span class="keyword">if</span> (preBoard == <span class="keyword">null</span>) <span class="keyword">this</span>.move = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">this</span>.move = preBoard.move + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.priority = <span class="keyword">this</span>.move + item.manhattan();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(BoardNode b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.priority,b.priority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putNeighbors</span> <span class="params">(BoardNode current,MinPQ&lt;BoardNode&gt;pq)</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Board&gt; neighbors = current.item.neighbors();</span><br><span class="line">        <span class="keyword">for</span> (Board it : neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.preBoard == <span class="keyword">null</span> || !it.equals(current.preBoard.item)) &#123;</span><br><span class="line">                pq.insert(<span class="keyword">new</span> BoardNode(it,current));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solver</span><span class="params">(Board initial)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initial == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Constructor argument Board is null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        current = <span class="keyword">new</span> BoardNode(initial,<span class="keyword">null</span>);</span><br><span class="line">        twinCurrent = <span class="keyword">new</span> BoardNode(initial.twin(),<span class="keyword">null</span>);</span><br><span class="line">        MinPQ&lt;BoardNode&gt; pq = <span class="keyword">new</span> MinPQ&lt;BoardNode&gt;();</span><br><span class="line">        MinPQ&lt;BoardNode&gt; twinpq = <span class="keyword">new</span> MinPQ&lt;BoardNode&gt;();</span><br><span class="line">        pq.insert(current);</span><br><span class="line">        twinpq.insert(twinCurrent);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            current = pq.delMin();</span><br><span class="line">            <span class="keyword">if</span> (current.item.isGoal()) <span class="keyword">break</span>;</span><br><span class="line">            putNeighbors(current,pq);</span><br><span class="line"></span><br><span class="line">            twinCurrent = twinpq.delMin();</span><br><span class="line">            <span class="keyword">if</span> (twinCurrent.item.isGoal()) <span class="keyword">break</span>;</span><br><span class="line">            putNeighbors(twinCurrent,twinpq);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSolvable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current.item.isGoal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">moves</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current.item.isGoal())   <span class="keyword">return</span> current.move;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Board&gt; <span class="title">solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isSolvable()) &#123;</span><br><span class="line">            Stack&lt;Board&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            BoardNode node = current;</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.item);</span><br><span class="line">                node = node.preBoard;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stack;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
      <category term="A*算法" scheme="http://wsx1128.xyz/tags/A-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>基于java的碰撞物理引擎</title>
    <link href="http://wsx1128.xyz/2019/02/26/%E5%9F%BA%E4%BA%8Ejava%E7%9A%84%E7%A2%B0%E6%92%9E%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E/"/>
    <id>http://wsx1128.xyz/2019/02/26/基于java的碰撞物理引擎/</id>
    <published>2019-02-25T16:44:48.000Z</published>
    <updated>2019-02-25T17:22:51.215Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="首先，贴出效果图，基于java的物理引擎。"><a href="#首先，贴出效果图，基于java的物理引擎。" class="headerlink" title="首先，贴出效果图，基于java的物理引擎。"></a>首先，贴出效果图，基于java的物理引擎。</h3><p><img src="/2019/02/26/基于java的碰撞物理引擎/11.png" alt="11"></p><p><strong>完成这个效果需要考虑几件事情。</strong></p><h3 id="第一步显示定义出每一个颗粒，具体的形状，颜色，位置，速度…"><a href="#第一步显示定义出每一个颗粒，具体的形状，颜色，位置，速度…" class="headerlink" title="第一步显示定义出每一个颗粒，具体的形状，颜色，位置，速度…"></a>第一步显示定义出每一个颗粒，具体的形状，颜色，位置，速度…</h3><p>具体API如下：<br><img src="/2019/02/26/基于java的碰撞物理引擎/22.png" alt="22"></p><p>其实这里最关键的是上面的预测碰撞时间的算法，应用了大学物理的相关知识。<br>将三种碰撞的预测时间算出来，另外并依次赋予三种碰撞的效果。<br>然后将其放入一个可比较的事件中，通过遍历每一个球与其他球预测碰撞情况，放入优先队列中再依次处理。</p><h4 id="第一种-两球相撞"><a href="#第一种-两球相撞" class="headerlink" title="第一种 两球相撞"></a>第一种 两球相撞</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//时间</span></span><br><span class="line"><span class="comment">//注意下面几个地方的剪枝</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitBall</span> <span class="params">(Ball that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == that) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> dx = that.pos_x - <span class="keyword">this</span>.pos_x;</span><br><span class="line">        <span class="keyword">double</span> dy = that.pos_y - <span class="keyword">this</span>.pos_y;</span><br><span class="line">        <span class="keyword">double</span> dvx = that.vec_x - <span class="keyword">this</span>.vec_x;</span><br><span class="line">        <span class="keyword">double</span> dvy = that.vec_y - <span class="keyword">this</span>.vec_y;</span><br><span class="line">        <span class="keyword">double</span> dvdr = dx * dvx + dy * dvy;</span><br><span class="line">        <span class="keyword">if</span> (dvdr &gt; <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> dvdv = dvx * dvx + dvy * dvy;</span><br><span class="line">        <span class="keyword">if</span> (dvdv == <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> drdr = dx * dx + dy * dy;</span><br><span class="line">        <span class="keyword">double</span> sigma = <span class="keyword">this</span>.radius + that.radius;</span><br><span class="line">        <span class="keyword">double</span> d = (dvdr * dvdr) - dvdv * (drdr - sigma * sigma);</span><br><span class="line">        <span class="keyword">if</span> (d &lt; <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">return</span> -(dvdr + Math.sqrt(d)) / dvdv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//碰撞后的效果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceOff</span> <span class="params">(Ball that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dx = that.pos_x - <span class="keyword">this</span>.pos_x;</span><br><span class="line">        <span class="keyword">double</span> dy = that.pos_y - <span class="keyword">this</span>.pos_y;</span><br><span class="line">        <span class="keyword">double</span> dvx = that.vec_x - <span class="keyword">this</span>.vec_x;</span><br><span class="line">        <span class="keyword">double</span> dvy = that.vec_y - <span class="keyword">this</span>.vec_y;</span><br><span class="line">        <span class="keyword">double</span> dvdr = dx * dvx + dy * dvy;</span><br><span class="line">        <span class="keyword">double</span> dist = <span class="keyword">this</span>.radius + that.radius;</span><br><span class="line">        <span class="keyword">double</span> J = <span class="number">2</span> * <span class="keyword">this</span>.mass * that.mass * dvdr / ((<span class="keyword">this</span>.mass + that.mass) * dist);</span><br><span class="line">        <span class="keyword">double</span> Jx = J * dx / dist;</span><br><span class="line">        <span class="keyword">double</span> Jy = J * dy / dist;</span><br><span class="line">        <span class="keyword">this</span>.vec_x += Jx / <span class="keyword">this</span>.mass;</span><br><span class="line">        <span class="keyword">this</span>.vec_y += Jy / <span class="keyword">this</span>.mass;</span><br><span class="line">        that.vec_x -= Jx / that.mass;</span><br><span class="line">        that.vec_y -= Jy / that.mass;</span><br><span class="line">        <span class="keyword">this</span>.cnt ++;</span><br><span class="line">        that.cnt ++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="第二种与墙体发生碰撞"><a href="#第二种与墙体发生碰撞" class="headerlink" title="第二种与墙体发生碰撞"></a>第二种与墙体发生碰撞</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//碰撞垂直墙的时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitVerticalWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vec_x &gt; <span class="number">0</span>)  <span class="keyword">return</span> (border - pos_x - radius) / vec_x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vec_x &lt; <span class="number">0</span>) <span class="keyword">return</span> (radius - pos_x) / vec_x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> INFINITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//碰撞水平墙的时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitHorizontalWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vec_y &gt; <span class="number">0</span>)  <span class="keyword">return</span> (border - pos_y - radius) / vec_y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vec_y &lt; <span class="number">0</span>) <span class="keyword">return</span> (radius - pos_y) / vec_y;</span><br><span class="line">    <span class="keyword">return</span>  INFINITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//碰撞效果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceOffVerticalWall</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.cnt ++;</span><br><span class="line">   <span class="keyword">this</span>.vec_x = - <span class="keyword">this</span>.vec_x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceoffHorizontalWall</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cnt ++;</span><br><span class="line">    <span class="keyword">this</span>.vec_y = - <span class="keyword">this</span>.vec_y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以下便是第一个球体类型的完整代码"><a href="#以下便是第一个球体类型的完整代码" class="headerlink" title="以下便是第一个球体类型的完整代码"></a>以下便是第一个球体类型的完整代码</h3><p><strong>Ball.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdDraw;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//球的横纵坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> pos_x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> pos_y;</span><br><span class="line">    <span class="comment">//球的横纵方向上面的速度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> vec_x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> vec_y;</span><br><span class="line">    <span class="comment">//球的半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius;</span><br><span class="line">    <span class="comment">//球的质量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;</span><br><span class="line">    <span class="comment">//边界长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> border;</span><br><span class="line">    <span class="comment">//球的颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Color color;</span><br><span class="line">    <span class="comment">//碰撞次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//限定一个最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> INFINITY = Double.POSITIVE_INFINITY;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ball</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        pos_x     = StdRandom.uniform(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        pos_y     = StdRandom.uniform(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        vec_x     = StdRandom.uniform(-<span class="number">0.005</span>, <span class="number">0.005</span>);</span><br><span class="line">        vec_y     = StdRandom.uniform(-<span class="number">0.005</span>, <span class="number">0.005</span>);</span><br><span class="line">        radius    = <span class="number">0.01</span>;</span><br><span class="line">        mass      = <span class="number">0.5</span>;</span><br><span class="line">        border    = <span class="number">1</span>;</span><br><span class="line">        color     = Color.BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ball</span> <span class="params">(<span class="keyword">double</span> px,<span class="keyword">double</span> py,<span class="keyword">double</span> vx,<span class="keyword">double</span> vy,<span class="keyword">double</span> radius,<span class="keyword">double</span> mass,<span class="keyword">double</span> border,Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pos_x = px;</span><br><span class="line">        <span class="keyword">this</span>.pos_y = py;</span><br><span class="line">        <span class="keyword">this</span>.vec_x = vx;</span><br><span class="line">        <span class="keyword">this</span>.vec_y = vy;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        <span class="keyword">this</span>.mass = mass;</span><br><span class="line">        <span class="keyword">this</span>.border = border;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StdDraw.filledCircle(pos_x,pos_y,radius);</span><br><span class="line">        StdDraw.setPenColor(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span> <span class="params">(<span class="keyword">double</span> dt)</span> </span>&#123;</span><br><span class="line">        pos_x = pos_x + vec_x * dt;</span><br><span class="line">        pos_y = pos_y + vec_y * dt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitBall</span> <span class="params">(Ball that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == that) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> dx = that.pos_x - <span class="keyword">this</span>.pos_x;</span><br><span class="line">        <span class="keyword">double</span> dy = that.pos_y - <span class="keyword">this</span>.pos_y;</span><br><span class="line">        <span class="keyword">double</span> dvx = that.vec_x - <span class="keyword">this</span>.vec_x;</span><br><span class="line">        <span class="keyword">double</span> dvy = that.vec_y - <span class="keyword">this</span>.vec_y;</span><br><span class="line">        <span class="keyword">double</span> dvdr = dx * dvx + dy * dvy;</span><br><span class="line">        <span class="keyword">if</span> (dvdr &gt; <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> dvdv = dvx * dvx + dvy * dvy;</span><br><span class="line">        <span class="keyword">if</span> (dvdv == <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> drdr = dx * dx + dy * dy;</span><br><span class="line">        <span class="keyword">double</span> sigma = <span class="keyword">this</span>.radius + that.radius;</span><br><span class="line">        <span class="keyword">double</span> d = (dvdr * dvdr) - dvdv * (drdr - sigma * sigma);</span><br><span class="line">        <span class="keyword">if</span> (d &lt; <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">return</span> -(dvdr + Math.sqrt(d)) / dvdv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitVerticalWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vec_x &gt; <span class="number">0</span>)  <span class="keyword">return</span> (border - pos_x - radius) / vec_x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vec_x &lt; <span class="number">0</span>) <span class="keyword">return</span> (radius - pos_x) / vec_x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> INFINITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitHorizontalWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vec_y &gt; <span class="number">0</span>)  <span class="keyword">return</span> (border - pos_y - radius) / vec_y;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vec_y &lt; <span class="number">0</span>) <span class="keyword">return</span> (radius - pos_y) / vec_y;</span><br><span class="line">        <span class="keyword">return</span>  INFINITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceOff</span> <span class="params">(Ball that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dx = that.pos_x - <span class="keyword">this</span>.pos_x;</span><br><span class="line">        <span class="keyword">double</span> dy = that.pos_y - <span class="keyword">this</span>.pos_y;</span><br><span class="line">        <span class="keyword">double</span> dvx = that.vec_x - <span class="keyword">this</span>.vec_x;</span><br><span class="line">        <span class="keyword">double</span> dvy = that.vec_y - <span class="keyword">this</span>.vec_y;</span><br><span class="line">        <span class="keyword">double</span> dvdr = dx * dvx + dy * dvy;</span><br><span class="line">        <span class="keyword">double</span> dist = <span class="keyword">this</span>.radius + that.radius;</span><br><span class="line">        <span class="keyword">double</span> J = <span class="number">2</span> * <span class="keyword">this</span>.mass * that.mass * dvdr / ((<span class="keyword">this</span>.mass + that.mass) * dist);</span><br><span class="line">        <span class="keyword">double</span> Jx = J * dx / dist;</span><br><span class="line">        <span class="keyword">double</span> Jy = J * dy / dist;</span><br><span class="line">        <span class="keyword">this</span>.vec_x += Jx / <span class="keyword">this</span>.mass;</span><br><span class="line">        <span class="keyword">this</span>.vec_y += Jy / <span class="keyword">this</span>.mass;</span><br><span class="line">        that.vec_x -= Jx / that.mass;</span><br><span class="line">        that.vec_y -= Jy / that.mass;</span><br><span class="line">        <span class="keyword">this</span>.cnt ++;</span><br><span class="line">        that.cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceOffVerticalWall</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cnt ++;</span><br><span class="line">        <span class="keyword">this</span>.vec_x = - <span class="keyword">this</span>.vec_x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceoffHorizontalWall</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cnt ++;</span><br><span class="line">        <span class="keyword">this</span>.vec_y = - <span class="keyword">this</span>.vec_y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="其次，我们需要对以上球体类进行一个包装，将其赋予可比较的特性。"><a href="#其次，我们需要对以上球体类进行一个包装，将其赋予可比较的特性。" class="headerlink" title="其次，我们需要对以上球体类进行一个包装，将其赋予可比较的特性。"></a>其次，我们需要对以上球体类进行一个包装，将其赋予可比较的特性。</h3><p>因为从宏观上来看，我们需要比较的是每一个球体的碰撞情况，所以，用一个事件包含其诸多特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Collison_Event</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Collison_Event</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Ball a,b;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> time;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> countA,countB;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Collison_Event</span> <span class="params">(Ball a,Ball b,<span class="keyword">double</span> time)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">            <span class="keyword">this</span>.a = a;</span><br><span class="line">            <span class="keyword">this</span>.b = b;</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>) countA = a.count();</span><br><span class="line">            <span class="keyword">else</span>           countA = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (b != <span class="keyword">null</span>) countB = b.count();</span><br><span class="line">            <span class="keyword">else</span>           countB = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Collison_Event that)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.compare(<span class="keyword">this</span>.time,that.time);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.time == Double.POSITIVE_INFINITY) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a != <span class="keyword">null</span> &amp;&amp; a.count() != countA) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (b != <span class="keyword">null</span> &amp;&amp; b.count() != countB) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="最后就是整个包含类，就称为一个系统"><a href="#最后就是整个包含类，就称为一个系统" class="headerlink" title="最后就是整个包含类，就称为一个系统"></a>最后就是整个包含类，就称为一个系统</h3><p>思路就是预测碰撞的时间，放入优先队列中，另外，需要注意的核心的一点就是，其采用了时间限制，大于某个时间的球体碰撞即不放进队列中，避免开销。<br>还有，不要忘记重绘的条件，在这里加入一个HZ变量控制帧数。</p><h4 id="以下是第二个类的全部代码"><a href="#以下是第二个类的全部代码" class="headerlink" title="以下是第二个类的全部代码"></a>以下是第二个类的全部代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.MinPQ;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdDraw;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollisionSystem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> MinPQ&lt;Collison_Event&gt; pq;</span><br><span class="line">    <span class="comment">//相当于一个总控时间的一个参数，后面所有关于时间的参数都需要加上一个这个</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> t = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">protected</span> Ball[] balls;</span><br><span class="line">    <span class="comment">//这里就相当于一个控制每一帧数的频率控制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> HZ = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollisionSystem</span><span class="params">(Ball[] balls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balls = balls.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里新加上的一个参数 limit 是控制一些完全没必要的事件</span></span><br><span class="line">    <span class="comment">//意思就是剔除那些需要太长时间才会相撞的球体</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pridict</span> <span class="params">(Ball b,<span class="keyword">double</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; balls.length;i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> dt = b.timeToHitBall(balls[i]);</span><br><span class="line">            <span class="keyword">if</span> (t + dt &lt;= limit)</span><br><span class="line">                pq.insert(<span class="keyword">new</span> Collison_Event(b,balls[i],dt + t));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> dxt = b.timeToHitHorizontalWall() + t;</span><br><span class="line">        <span class="keyword">double</span> dyt = b.timeToHitVerticalWall() + t;</span><br><span class="line">        <span class="keyword">if</span> (dxt &lt;= limit)</span><br><span class="line">            pq.insert(<span class="keyword">new</span> Collison_Event(b,<span class="keyword">null</span>,dxt));</span><br><span class="line">        <span class="keyword">if</span> (dyt &lt;= limit)</span><br><span class="line">            pq.insert(<span class="keyword">new</span> Collison_Event(<span class="keyword">null</span>,b,dyt));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">redrew</span><span class="params">(<span class="keyword">double</span> limit)</span> </span>&#123;</span><br><span class="line">        StdDraw.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; balls.length;i++) &#123;</span><br><span class="line">            balls[i].draw();</span><br><span class="line">        &#125;</span><br><span class="line">        StdDraw.show();</span><br><span class="line">        StdDraw.pause(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; limit) &#123;</span><br><span class="line">            pq.insert(<span class="keyword">new</span> Collison_Event(<span class="keyword">null</span>,<span class="keyword">null</span>,t + <span class="number">1.0</span> / HZ));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">simulate</span> <span class="params">(<span class="keyword">double</span> limit)</span> </span>&#123;</span><br><span class="line">        pq = <span class="keyword">new</span> MinPQ&lt;Collison_Event&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; balls.length; i++) &#123;</span><br><span class="line">            pridict(balls[i],limit);</span><br><span class="line">        &#125;</span><br><span class="line">        pq.insert(<span class="keyword">new</span> Collison_Event(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            Collison_Event event = pq.delMin();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!event.isValid()) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将其他的点全部移动</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; balls.length; i++) &#123;</span><br><span class="line">                balls[i].move(event.time - t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            t = event.time;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (event.a != <span class="keyword">null</span> &amp;&amp; event.b != <span class="keyword">null</span>) event.a.bounceOff(event.b);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event.a == <span class="keyword">null</span> &amp;&amp; event.b != <span class="keyword">null</span>) event.b.bounceOffVerticalWall();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event.a != <span class="keyword">null</span> &amp;&amp; event.b == <span class="keyword">null</span>) event.a.bounceoffHorizontalWall();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event.a == <span class="keyword">null</span> &amp;&amp; event.b == <span class="keyword">null</span>) redrew(limit);</span><br><span class="line"></span><br><span class="line">            pridict(event.a,limit);</span><br><span class="line">            pridict(event.b,limit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Collison_Event</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Collison_Event</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Ball a,b;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> time;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> countA,countB;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Collison_Event</span> <span class="params">(Ball a,Ball b,<span class="keyword">double</span> time)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">            <span class="keyword">this</span>.a = a;</span><br><span class="line">            <span class="keyword">this</span>.b = b;</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>) countA = a.count();</span><br><span class="line">            <span class="keyword">else</span>           countA = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (b != <span class="keyword">null</span>) countB = b.count();</span><br><span class="line">            <span class="keyword">else</span>           countB = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Collison_Event that)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.compare(<span class="keyword">this</span>.time,that.time);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.time == Double.POSITIVE_INFINITY) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a != <span class="keyword">null</span> &amp;&amp; a.count() != countA) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (b != <span class="keyword">null</span> &amp;&amp; b.count() != countB) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        StdDraw.setCanvasSize(<span class="number">600</span>,<span class="number">600</span>);</span><br><span class="line">        <span class="comment">//这个是清楚缓冲 帮助改善运动的</span></span><br><span class="line">        StdDraw.enableDoubleBuffering();</span><br><span class="line">        Ball[] balls = <span class="keyword">new</span> Ball[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            balls[i] = <span class="keyword">new</span> Ball();</span><br><span class="line">        &#125;</span><br><span class="line">        CollisionSystem system = <span class="keyword">new</span> CollisionSystem(balls);</span><br><span class="line">        system.simulate(<span class="number">100000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="物理引擎" scheme="http://wsx1128.xyz/tags/%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>普林斯顿算法课第四周小作业</title>
    <link href="http://wsx1128.xyz/2019/02/24/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%B0%8F%E4%BD%9C%E4%B8%9A/"/>
    <id>http://wsx1128.xyz/2019/02/24/普林斯顿算法课第四周小作业/</id>
    <published>2019-02-23T17:06:44.000Z</published>
    <updated>2019-02-23T17:17:01.483Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第四周的小作业主要围绕优先队列以及基于优先队列的Taxicabnumber。"><a href="#第四周的小作业主要围绕优先队列以及基于优先队列的Taxicabnumber。" class="headerlink" title="第四周的小作业主要围绕优先队列以及基于优先队列的Taxicabnumber。"></a>第四周的小作业主要围绕优先队列以及基于优先队列的<code>Taxicabnumber</code>。</h2><p>先贴出关于优先队列的代码<br><strong>MaxPQ.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week4.PQ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Key</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Key[] key;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;Key&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(<span class="keyword">int</span> init)</span></span>&#123;</span><br><span class="line">        key = (Key[]) <span class="keyword">new</span> Object[<span class="number">1</span> + init];</span><br><span class="line">        len = <span class="number">0</span> + init;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span> <span class="params">(<span class="keyword">int</span> init , Comparator&lt;Key&gt; rule)</span></span>&#123;</span><br><span class="line">        comparator = rule;</span><br><span class="line">        key = (Key[]) <span class="keyword">new</span> Object[<span class="number">1</span> + init];</span><br><span class="line">        len = <span class="number">0</span> + init;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> key[i].compareTo(key[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> comparator.compare(key[i],key[j]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Key temp = key[i];</span><br><span class="line">        key[i] = key[j];</span><br><span class="line">        key[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k * <span class="number">2</span> &lt;= len) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = k * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; len &amp;&amp; less(j,j+<span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(k,j)) <span class="keyword">break</span>;</span><br><span class="line">            change(k,j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k / <span class="number">2</span>,k)) &#123;</span><br><span class="line">            change(k, k / <span class="number">2</span>);</span><br><span class="line">            k = k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Key[] temp = (Key[]) <span class="keyword">new</span> Object[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len;i++) &#123;</span><br><span class="line">            temp[i] = key[i];</span><br><span class="line">        &#125;</span><br><span class="line">        key = temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> len == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">get</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"wrong"</span>);</span><br><span class="line">        <span class="keyword">if</span> (len + <span class="number">1</span> == key.length)  resize(<span class="number">2</span> * key.length);</span><br><span class="line">        key[++len] = item;</span><br><span class="line">        up(len);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxHeap</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是帮助后面完成一个assert判断而存在的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMaxHeap</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; len) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">2</span>*k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left  &lt;= len &amp;&amp; less(k, left))  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt;= len &amp;&amp; less(k, right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxHeap(left) &amp;&amp; isMaxHeap(right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())  <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Key item = key[<span class="number">1</span>];</span><br><span class="line">        key[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        change(<span class="number">1</span>,len--);</span><br><span class="line">        sink(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (len + <span class="number">1</span> &lt;= key.length / <span class="number">4</span> &amp;&amp; len &gt; <span class="number">0</span> ) resize(key.length / <span class="number">2</span>);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxHeap</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Key&gt; <span class="title">iterator</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> heapIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">heapIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Key</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> MaxPQ&lt;Key&gt; copy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">heapIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) &#123;</span><br><span class="line">                copy = <span class="keyword">new</span> MaxPQ&lt;Key&gt;(len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> copy = <span class="keyword">new</span> MaxPQ&lt;Key&gt;(len,comparator);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">                copy.insert(key[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isEmpty()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Key <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> copy.delMax();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        edu.princeton.cs.algs4.MaxPQ&lt;String&gt; pq = <span class="keyword">new</span> edu.princeton.cs.algs4.MaxPQ&lt;String&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            String item = StdIn.readString();</span><br><span class="line">            <span class="keyword">if</span> (!item.equals(<span class="string">"-"</span>)) pq.insert(item);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!pq.isEmpty()) StdOut.print(pq.delMax() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println(<span class="string">"("</span> + pq.size() + <span class="string">" left on pq)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机优先队列</p><p><strong>RandomPQ.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Interview_Question_Week4.PQ.MaxPQ;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">MaxPQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomPQ</span> <span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(n);</span><br><span class="line">        <span class="keyword">this</span>.len = <span class="keyword">super</span>.len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comparable&lt;Key&gt; <span class="title">sample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = StdRandom.uniform(len + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.get(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comparable&lt;Key&gt; <span class="title">randomRemove</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = StdRandom.uniform(len + <span class="number">1</span>);</span><br><span class="line">        Comparable&lt;Key&gt; item = key[n];</span><br><span class="line">        change(n,len--);</span><br><span class="line">        key[len + <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        sink(n);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先队列的一些应用<br><strong>PriorityQueue.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MaxPQ&lt;Integer&gt; left;</span><br><span class="line">    <span class="keyword">private</span> MinPQ&lt;Integer&gt; right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        left = <span class="keyword">new</span> MaxPQ&lt;Integer&gt;();</span><br><span class="line">        right = <span class="keyword">new</span> MinPQ&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = left.size();</span><br><span class="line">        <span class="keyword">int</span> R = right.size();</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> (left.max() + right.min()) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span> left.max();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> right.min();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> median = findMedian();</span><br><span class="line">        <span class="keyword">int</span> L = left.size();</span><br><span class="line">        <span class="keyword">int</span> R = right.size();</span><br><span class="line">        <span class="keyword">if</span> (key &lt;= median) &#123;</span><br><span class="line">            left.insert(key);</span><br><span class="line">            <span class="keyword">if</span> (L - R &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                right.insert(left.delMax());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            right.insert(key);</span><br><span class="line">            <span class="keyword">if</span> (R - L &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                left.insert(right.delMin());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = left.size();</span><br><span class="line">        <span class="keyword">int</span> R = right.size();</span><br><span class="line">        <span class="keyword">if</span> (L &gt; R) &#123;</span><br><span class="line">            left.delMax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            right.delMin();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>有四个数 a,b,c,d 满足 a^3 + b^3 = c^3 +d^3，然后再给一个数 n，求出 n之内所有满足上述等式的四个数</p></blockquote><p><strong>思路</strong><br>此处就是运用优先队列，将没两个数的立方和加起来，然后再以立方和的大小来进行排序，作为最后排序的标准，最后进行比较，可做优化。</p><p>代码如下：</p><p><strong>Taxicab</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.MinPQ;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Taxicab</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Taxicab</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> cube;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Taxicab</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = x;</span><br><span class="line">        <span class="keyword">this</span>.b = y;</span><br><span class="line">        <span class="keyword">this</span>.cube = x * x * x + y * y * y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Taxicab a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cube &lt; a.cube) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cube &gt; a.cube) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.a &lt; a.a) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.a &gt; a.a) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"number: "</span> + cube + <span class="string">" ("</span> + a + <span class="string">", "</span> + b + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findTaxicabNumber</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        MinPQ&lt;Taxicab&gt; candidate = <span class="keyword">new</span> MinPQ&lt;Taxicab&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= N;i++) &#123;</span><br><span class="line">            candidate.insert(<span class="keyword">new</span> Taxicab(i,i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        Taxicab pre = <span class="keyword">new</span> Taxicab(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (!candidate.isEmpty()) &#123;</span><br><span class="line">            Taxicab curr = candidate.delMin();</span><br><span class="line">            <span class="keyword">if</span> (curr == pre) &#123;</span><br><span class="line">                cnt ++;</span><br><span class="line">                <span class="keyword">if</span> (cnt == <span class="number">2</span>) &#123;</span><br><span class="line">                    StdOut.print(pre.cube + <span class="string">"="</span> + pre);</span><br><span class="line">                &#125;</span><br><span class="line">                StdOut.print(<span class="string">" = "</span> + curr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt &gt; <span class="number">1</span>) StdOut.println();</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = curr;</span><br><span class="line">            <span class="keyword">if</span> (curr.a &lt; N) candidate.insert(<span class="keyword">new</span> Taxicab(curr.a,curr.b + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>CollinearPoint</title>
    <link href="http://wsx1128.xyz/2019/02/24/CollinearPoint/"/>
    <id>http://wsx1128.xyz/2019/02/24/CollinearPoint/</id>
    <published>2019-02-23T16:49:33.000Z</published>
    <updated>2019-02-23T17:06:02.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CollinearPoint—–普林斯顿第三周大作业"><a href="#CollinearPoint—–普林斯顿第三周大作业" class="headerlink" title="CollinearPoint—–普林斯顿第三周大作业"></a>CollinearPoint—–普林斯顿第三周大作业</h2><p>第三周的大作业 有点意思，基于排序的一次简单优化，先看题目。</p><p><img src="/2019/02/24/CollinearPoint/11.png" alt="11"><br><img src="/2019/02/24/CollinearPoint/22.png" alt="22"><br><img src="/2019/02/24/CollinearPoint/33.png" alt="33"><br><img src="/2019/02/24/CollinearPoint/44.png" alt="44"></p><p>一步一步来，根据题目首先写出一个点的类，这个类要包含比较，并且，要包含求出两个类之间斜率的方法。<br><strong>Point.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdDraw;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StdDraw.point(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>   <span class="keyword">void</span> <span class="title">drawTo</span><span class="params">(Point that)</span> </span>&#123;</span><br><span class="line">        StdDraw.line(x,y,that.x,that.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span> + x + <span class="string">", "</span> + y + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Point that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; that.y)         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; that.y)    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; that.x)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; that.x)    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">slopeTo</span><span class="params">(Point that)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == that.x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (y == that.y) <span class="keyword">return</span> Double.NEGATIVE_INFINITY;</span><br><span class="line">            <span class="keyword">else</span>             <span class="keyword">return</span> Double.POSITIVE_INFINITY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y == that.y) <span class="keyword">return</span> <span class="number">0</span> / <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">return</span> (y - that.y) * <span class="number">1.0</span> / (x - that.x);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SlopeOrder</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Point</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Point p, Point q)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (slopeTo(p) &lt; slopeTo(q)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (slopeTo(p) &gt; slopeTo(q)) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comparator&lt;Point&gt; <span class="title">slopeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span>  SlopeOrder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x0 = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> y0 = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        StdDraw.setCanvasSize(<span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">        StdDraw.setXscale(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">        StdDraw.setYscale(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">        StdDraw.setPenRadius(<span class="number">0.005</span>);</span><br><span class="line">        StdDraw.enableDoubleBuffering();</span><br><span class="line"></span><br><span class="line">        Point[] points = <span class="keyword">new</span> Point[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = StdRandom.uniform(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">int</span> y = StdRandom.uniform(<span class="number">50</span>);</span><br><span class="line">            points[i] = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">            points[i].draw();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// draw p = (x0, x1) in red</span></span><br><span class="line">        Point p = <span class="keyword">new</span> Point(x0, y0);</span><br><span class="line"></span><br><span class="line">        StdDraw.setPenColor(StdDraw.RED);</span><br><span class="line">        StdDraw.setPenRadius(<span class="number">0.02</span>);</span><br><span class="line">        p.draw();</span><br><span class="line">        <span class="comment">// draw line segments from p to each point, one at a time, in polar order</span></span><br><span class="line">        StdDraw.setPenRadius();</span><br><span class="line">        StdDraw.setPenColor(StdDraw.BLUE);</span><br><span class="line">        Arrays.sort(points, p.slopeOrder());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            p.drawTo(points[i]);</span><br><span class="line">            StdDraw.show();</span><br><span class="line">            StdDraw.pause(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是直线的类，这两个类都比较简单，这里就直接贴出代码<br><strong>LineSegment.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSegment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Point a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Point b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineSegment</span><span class="params">(Point p, Point q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || q == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line">        a = p;</span><br><span class="line">        b = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a.drawTo(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="string">" -&gt; "</span> + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hasCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后就是问题的求解方法。<br>问题 需要知道平面上的点，有哪些点是在一条直线上的，第一种方法，暴力法，直接用四种循环写出答案。</p><p><strong>BruteCollinearPoints.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BruteCollinearPoints</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Point[] copies;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;LineSegment&gt; lineSegments = <span class="keyword">new</span> ArrayList&lt;LineSegment&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// finds all line segments containing 4 points</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BruteCollinearPoints</span><span class="params">(<span class="keyword">final</span> Point[] points)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (points == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        copies = <span class="keyword">new</span> Point[points.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            copies[i] = points[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sort by y-coordinate</span></span><br><span class="line">        <span class="comment">// the endpoints are the first and last points</span></span><br><span class="line">        Arrays.sort(copies);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// after sort then can check if duplicate</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copies.length - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (copies[i].compareTo(copies[i+<span class="number">1</span>]) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ip = <span class="number">0</span>; ip &lt; copies.length-<span class="number">3</span>; ip++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> iq = ip + <span class="number">1</span>; iq &lt; copies.length-<span class="number">2</span>; iq++) &#123;</span><br><span class="line">                <span class="keyword">double</span> slopeP2Q = copies[ip].slopeTo(copies[iq]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> ir = iq + <span class="number">1</span>; ir &lt; copies.length-<span class="number">1</span>; ir++) &#123;</span><br><span class="line">                    <span class="keyword">double</span> slopeQ2R = copies[iq].slopeTo(copies[ir]);</span><br><span class="line">                    <span class="keyword">if</span> (slopeP2Q != slopeQ2R) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> is = ir + <span class="number">1</span>; is &lt; copies.length; is++) &#123;</span><br><span class="line">                        <span class="keyword">double</span> slopeR2S = copies[ir].slopeTo(copies[is]);</span><br><span class="line">                        <span class="comment">// if 3 of 4's slopes are equal then 4 points are colllinear</span></span><br><span class="line">                        <span class="keyword">if</span> (slopeP2Q == slopeR2S)</span><br><span class="line">                            lineSegments.add(<span class="keyword">new</span> LineSegment(copies[ip], copies[is]));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the number of line segments</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfSegments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lineSegments.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the line segments</span></span><br><span class="line">    <span class="keyword">public</span> LineSegment[] segments() &#123;</span><br><span class="line">        LineSegment[] result = <span class="keyword">new</span> LineSegment[lineSegments.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lineSegments.size(); i++) &#123;</span><br><span class="line">            result[i] = lineSegments.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>优化的方法就是基于排序，将每一个点都与已经排好序的点集进行比较，按照一定的顺序进行比较可以省略很多。<br><strong>FastCollinearPoints.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Programming_Assignment_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastCollinearPoints</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Point[] copies;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;LineSegment&gt; lineSegments = <span class="keyword">new</span> ArrayList&lt;LineSegment&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// finds all line segments containing 4 or more points</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastCollinearPoints</span><span class="params">(Point[] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (points == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        copies = <span class="keyword">new</span> Point[points.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            copies[i] = points[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sort by y-coordinate</span></span><br><span class="line">        <span class="comment">// the endpoints are the first and last points</span></span><br><span class="line">        Arrays.sort(copies);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// after sort then can check if duplicate</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copies.length - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (copies[i].compareTo(copies[i+<span class="number">1</span>]) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copies.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            Point origin = copies[i];             <span class="comment">// Think of p as the origin.</span></span><br><span class="line">            <span class="keyword">double</span>[] slopes = <span class="keyword">new</span> <span class="keyword">double</span>[copies.length - <span class="number">1</span> - i];</span><br><span class="line">            Point[] others = <span class="keyword">new</span> Point[copies.length - <span class="number">1</span> - i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; copies.length - <span class="number">1</span> - i; j++)</span><br><span class="line">                others[j] = copies[j + <span class="number">1</span> + i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// For each other point q, determine the slope it makes with p</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; others.length; j++)</span><br><span class="line">                slopes[j] = origin.slopeTo(others[j]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Sort the points according to the slopes they makes with p</span></span><br><span class="line">            Arrays.sort(others, origin.slopeOrder());</span><br><span class="line"></span><br><span class="line">            Arrays.sort(slopes);</span><br><span class="line">            <span class="comment">// Check if any 3 (or more) adjacent points in the</span></span><br><span class="line">            <span class="comment">// sorted order have equal slopes with respect to p</span></span><br><span class="line">            <span class="comment">// If so, these points, together with p, are collinear</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> cnt_same = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; slopes.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (slopes[j] == slopes[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    cnt_same++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cnt_same &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    lineSegments.add(<span class="keyword">new</span> LineSegment(origin, others[j + <span class="number">1</span>]));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the number of line segments</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfSegments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lineSegments.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the line segments</span></span><br><span class="line">    <span class="keyword">public</span> LineSegment[] segments() &#123;</span><br><span class="line">        LineSegment[] result = <span class="keyword">new</span> LineSegment[lineSegments.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lineSegments.size(); i++) &#123;</span><br><span class="line">            result[i] = lineSegments.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于暴力做法运算了很多原本不需要的循环，相当于是做了很多重复功，所以不招收待见，而基于优化的版本进行了优化，所以在实际应用中是可取的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>普林斯顿算法课第三周小作业</title>
    <link href="http://wsx1128.xyz/2019/02/24/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%AC%E4%B8%89%E5%91%A8%E5%B0%8F%E4%BD%9C%E4%B8%9A/"/>
    <id>http://wsx1128.xyz/2019/02/24/普林斯顿算法课第三周小作业/</id>
    <published>2019-02-23T16:44:03.000Z</published>
    <updated>2019-02-23T16:48:28.167Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第三周主要讲的是归并排序和快速排序，这里在C-里面已经总结过，直接贴出代码。"><a href="#第三周主要讲的是归并排序和快速排序，这里在C-里面已经总结过，直接贴出代码。" class="headerlink" title="第三周主要讲的是归并排序和快速排序，这里在C++里面已经总结过，直接贴出代码。"></a>第三周主要讲的是归并排序和快速排序，这里在C++里面已经总结过，直接贴出代码。</h2><p><strong>CountInversions</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountInversions</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Comparable[] aux;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> inversion = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span> <span class="params">(Comparable a,Comparable b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">get_num</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        sort(a,<span class="number">0</span>,a.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> inversion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (lo + high) / <span class="number">2</span>;</span><br><span class="line">        sort(a,lo,mid);</span><br><span class="line">        sort(a,mid+<span class="number">1</span>,high);</span><br><span class="line">        merge(a,lo,mid,high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> mid,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= high;k++)&#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo;k &lt;= high;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; high) a[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (less (aux[i],aux[j]))&#123;</span><br><span class="line">                <span class="comment">// 这一步的目的就在于逆序对的个数，前面有多少个大于自己个数，就有多少个逆序对</span></span><br><span class="line">                inversion += mid + <span class="number">1</span> - i;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> a[k] = aux[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        Integer []a = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> CountInversions().get_num(a));</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LinkedMergedArrays</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedMergedArrays</span> &lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Node last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Node next;</span><br><span class="line">        T item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span> <span class="params">(Comparable a,Comparable b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            T t = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node();</span><br><span class="line">        node.item = t;</span><br><span class="line">        node.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(first == <span class="keyword">null</span> &amp;&amp; last == <span class="keyword">null</span>)&#123;</span><br><span class="line">            first = node;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(first != <span class="keyword">null</span> &amp;&amp; first == last)&#123;</span><br><span class="line">            first.next = node;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            last.next = node;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Iterator&lt;T&gt; iter = iterator();</span><br><span class="line">        String ret = iter.next().toString();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">            ret += <span class="string">", "</span>+ iter.next().toString() ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下代码是第一种方式的归并 还有第二种形式的归并 明天可以写一下。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        first = sort(first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">sort</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        Node slow = head;</span><br><span class="line">        Node fast = head;</span><br><span class="line">        <span class="comment">//取中间节点</span></span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node left = head;</span><br><span class="line">        Node right = slow.next;</span><br><span class="line">        slow.next = <span class="keyword">null</span>; <span class="comment">//将左右链表分开</span></span><br><span class="line">        left = sort(left);</span><br><span class="line">        right = sort(right);</span><br><span class="line">        <span class="keyword">return</span> merge(left,right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">merge</span><span class="params">(Node left, Node right)</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println("left="+left.element+",right="+right.element);</span></span><br><span class="line">        Node aux = <span class="keyword">new</span> Node(); <span class="comment">//需要耗费logn的额外空间</span></span><br><span class="line">        Node l= left;</span><br><span class="line">        Node r = right;</span><br><span class="line">        Node current = aux;</span><br><span class="line">        <span class="keyword">while</span>(l != <span class="keyword">null</span> &amp;&amp; r!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(less(r.item,l.item)) &#123;</span><br><span class="line">                current.next = r;</span><br><span class="line">                current = current.next;</span><br><span class="line">                r = r.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                current.next = l;</span><br><span class="line">                current = current.next;</span><br><span class="line">                l= l.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l!=<span class="keyword">null</span>) current.next = l; <span class="comment">// 如果左侧没遍历完，将其连接至current后</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r != <span class="keyword">null</span>) current.next = r; <span class="comment">//如果右侧没遍历完，将其连接至current后</span></span><br><span class="line">        <span class="keyword">return</span> aux.next; <span class="comment">//返回归并好的链表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>MergeSortedSubArray</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortedSubArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span> <span class="params">(Comparable a,Comparable b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = array.length / <span class="number">2</span>;</span><br><span class="line">        Comparable[] aux = <span class="keyword">new</span> Comparable[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            aux[i] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(aux));</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k&lt;<span class="number">2</span>*n;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l &gt;= n) <span class="keyword">break</span>;<span class="comment">//辅助元素数组全部用完，array右侧不需要挪动位置了</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(r&gt;=<span class="number">2</span>*n) array[k]=aux[l++];<span class="comment">//array原右侧元素全部放置合适位置，后面只需把辅助数组的元素挪到array右侧</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(less(array[r],aux[l])) array[k] = array[r++];</span><br><span class="line">            <span class="keyword">else</span> array[k] = aux[l++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>普林斯顿第二周小作业</title>
    <link href="http://wsx1128.xyz/2019/02/24/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%B0%8F%E4%BD%9C%E4%B8%9A/"/>
    <id>http://wsx1128.xyz/2019/02/24/普林斯顿第二周小作业/</id>
    <published>2019-02-23T16:35:56.000Z</published>
    <updated>2019-02-24T02:44:25.515Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第二周是关于队列与栈的相关实现，由于C-里面早就涉及到了，这里并不多说，直接贴代码"><a href="#第二周是关于队列与栈的相关实现，由于C-里面早就涉及到了，这里并不多说，直接贴代码" class="headerlink" title="第二周是关于队列与栈的相关实现，由于C++里面早就涉及到了，这里并不多说，直接贴代码"></a>第二周是关于队列与栈的相关实现，由于C++里面早就涉及到了，这里并不多说，直接贴代码</h1><p><strong>Elementary_Sorts</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week2.Elementary_Sorts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Ball &#123;</span><br><span class="line">    Red,</span><br><span class="line">    Blue,</span><br><span class="line">    White;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Backets</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Ball backets[];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Ball <span class="title">color</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> backets[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        Ball tmp = backets[i];</span><br><span class="line">        backets[i] = backets[j];</span><br><span class="line">        backets[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Backets</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        backets = <span class="keyword">new</span> Ball[n];</span><br><span class="line">        <span class="keyword">for</span> (Ball i : backets)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = StdRandom.uniform(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">switch</span> (x)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: &#123;i = Ball.Blue;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: &#123; i = Ball.Red;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: &#123;i = Ball.White;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = backets.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur &lt;= high)&#123;</span><br><span class="line">            <span class="keyword">switch</span> (color(cur))&#123;</span><br><span class="line">                <span class="keyword">case</span> Red: &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cur != low) &#123;</span><br><span class="line">                        swap(cur, low);</span><br><span class="line">                    &#125;</span><br><span class="line">                    cur++;</span><br><span class="line">                    low++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> White: &#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> Blue: &#123;</span><br><span class="line">                    swap (high,cur);</span><br><span class="line">                    high--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Interview_Question_Week2.Elementary_Sorts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Point;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Intersection_of_two_sets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Point&gt; same;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sameTimes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Intersection_of_two_sets</span><span class="params">(Point[]a , Point[]b,<span class="keyword">int</span> times)</span></span>&#123;</span><br><span class="line">        same = <span class="keyword">new</span> HashSet&lt;Point&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; times;i++)&#123;</span><br><span class="line">            same.add(a[i]);</span><br><span class="line">            same.add(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sameTimes = times * <span class="number">2</span> - same.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sameTimes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        Random ra = <span class="keyword">new</span> Random();</span><br><span class="line">        Point[] a = <span class="keyword">new</span> Point[<span class="number">10</span>];</span><br><span class="line">        Point[] b = <span class="keyword">new</span> Point[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            a[i] = <span class="keyword">new</span> Point();</span><br><span class="line">            b[i] = <span class="keyword">new</span> Point();</span><br><span class="line">            a[i].setLocation(ra.nextInt(<span class="number">10</span>)+<span class="number">1</span>,ra.nextInt(<span class="number">10</span>)+<span class="number">1</span>);</span><br><span class="line">            b[i].setLocation(ra.nextInt(<span class="number">10</span>)+<span class="number">1</span>,ra.nextInt(<span class="number">10</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Intersection_of_two_sets i = <span class="keyword">new</span> Intersection_of_two_sets(a,b,n);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        System.out.println(Arrays.toString(b));</span><br><span class="line">        System.out.println(i.same);</span><br><span class="line">        System.out.println(i.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>MaxArrayStack</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxArrayStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Max;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> []a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Max = -<span class="number">999999999</span>;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">1</span>];</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span> [capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i != sz;i++)&#123;</span><br><span class="line">            tmp[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sz == a.length) resize(a.length * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item &gt; Max) Max = item;</span><br><span class="line">        check();</span><br><span class="line">        a[sz++] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[--sz];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        MaxArrayStack mStack = <span class="keyword">new</span> MaxArrayStack();</span><br><span class="line">        mStack.push(<span class="number">4</span>);</span><br><span class="line">        mStack.push(<span class="number">5</span>);</span><br><span class="line">        mStack.push(<span class="number">6</span>);</span><br><span class="line">        mStack.push(<span class="number">2</span>);</span><br><span class="line">        mStack.push(<span class="number">1</span>);</span><br><span class="line">        mStack.push(<span class="number">10</span>);</span><br><span class="line">        mStack.push(<span class="number">7</span>);</span><br><span class="line">        mStack.push(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(mStack);</span><br><span class="line">        System.out.println(mStack.getMax());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>MaxLinkedStack</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxLinkedStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="keyword">private</span> Node max;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> item;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxLinkedStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        N = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        max = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> max.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">double</span> item)</span> </span>&#123;</span><br><span class="line">        Node oldfirst = first;</span><br><span class="line">        first = <span class="keyword">new</span> Node();</span><br><span class="line">        first.item = item;</span><br><span class="line">        first.next = oldfirst;</span><br><span class="line">        N++;</span><br><span class="line">        <span class="keyword">if</span> (item &gt;= getMax()) &#123;</span><br><span class="line">            Node oldmax = max;</span><br><span class="line">            max = <span class="keyword">new</span> Node();</span><br><span class="line">            max.next = oldmax;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> tmp = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">if</span> (tmp == getMax()) &#123;</span><br><span class="line">            max = max.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>StackQueue</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Interview_Question_Week2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackQueue</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Item&gt; input = <span class="keyword">new</span> Stack &lt;Item&gt;();</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Item&gt; output = <span class="keyword">new</span> Stack &lt;Item&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input.size() + output.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"wrong enquene"</span>);</span><br><span class="line">        input.push(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"out of range"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (output.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span> (!input.isEmpty())&#123;</span><br><span class="line">                output.push(input.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        StackQueue&lt;Integer&gt; squeue = <span class="keyword">new</span> StackQueue&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">"Size: "</span> + squeue.size());</span><br><span class="line">        squeue.enqueue(i);</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Dequeue: "</span> + squeue.dequeue());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                squeue.enqueue(i);</span><br><span class="line">                System.out.println(<span class="string">"Enqueue: "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Size: "</span> + squeue.size());</span><br><span class="line">        <span class="keyword">while</span> (!squeue.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Dequeue: "</span> + squeue.dequeue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Size: "</span> + squeue.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Permutation</title>
    <link href="http://wsx1128.xyz/2019/02/24/Permutation/"/>
    <id>http://wsx1128.xyz/2019/02/24/Permutation/</id>
    <published>2019-02-23T16:14:38.000Z</published>
    <updated>2019-02-23T16:23:16.888Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Permutation——普林斯顿算法大作业第二次"><a href="#Permutation——普林斯顿算法大作业第二次" class="headerlink" title="Permutation——普林斯顿算法大作业第二次"></a>Permutation——普林斯顿算法大作业第二次</h1><p>总的来说第二次算法大作业比较简单，实现以下双端队列，以及随机出队的队列。<br>鉴于这个难度系数，我这里直接写了两种，基于数组与基于链表两种方式，首先先看题目。</p><p><img src="/2019/02/24/Permutation/11.png" alt="1"><br><img src="/2019/02/24/Permutation/22.png" alt="2"></p><p>由于比较简单 这里不多说 直接开始贴代码。</p><p><strong>Deque</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deque</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node first,last;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Item item;</span><br><span class="line">        Node next;</span><br><span class="line">        Node previous;</span><br><span class="line">        Node (Item i)&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = <span class="keyword">null</span>;</span><br><span class="line">            previous = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Deque</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first = last = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        Node oldFirst = first;</span><br><span class="line">        first = <span class="keyword">new</span> Node(item);</span><br><span class="line">        first.previous = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            last = first;</span><br><span class="line">            first.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.next = oldFirst;</span><br><span class="line">            oldFirst.previous = first;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        Node tmp = <span class="keyword">new</span> Node(item);</span><br><span class="line">        tmp.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            first = tmp;</span><br><span class="line">            last = tmp;</span><br><span class="line">            last.previous = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = tmp;</span><br><span class="line">            tmp.previous = last;</span><br><span class="line">            last = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        Item cnt = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">             last = first =<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.previous = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        Item cnt = last.item;</span><br><span class="line">        last = last.previous;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            first = last = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DequeIterator(first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DequeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DequeIterator</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">            current = first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext())&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">            Item cnt = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>RandomizedQueue</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="keyword">import</span> java.lang.UnsupportedOperationException;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//原本最初的打算是直接用链表进行实现的，</span></span><br><span class="line"><span class="comment">//但是后来才发现性能要求迭代器的next的方法必须是常数时间，</span></span><br><span class="line"><span class="comment">//而用链表实现不了，所以改用数组实现。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomizedQueue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomizedQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        array = (Item[]) <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= array.length)&#123;</span><br><span class="line">            resize(array.length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; array.length / <span class="number">4</span>)&#123;</span><br><span class="line">            resize(array.length / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Item[] tmp = (Item[]) <span class="keyword">new</span> Object[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; size;i++)&#123;</span><br><span class="line">            tmp[i] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        array = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"wrong input"</span>);</span><br><span class="line">        check();</span><br><span class="line">        array[size++] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">int</span> random = StdRandom.uniform(size);</span><br><span class="line">        Item cnt =array[random];</span><br><span class="line">        array[random] = array[size - <span class="number">1</span>];</span><br><span class="line">        array[--size] = <span class="keyword">null</span>;</span><br><span class="line">        check();</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">sample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> array[StdRandom.uniform(size)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> rank;</span><br><span class="line">        <span class="keyword">private</span> Item[] iarray;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RandomIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            rank = size;</span><br><span class="line">            iarray = (Item[]) <span class="keyword">new</span> Object[rank];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; rank;i++)&#123;</span><br><span class="line">                iarray[i] = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> rank &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span> <span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">int</span> random = StdRandom.uniform(rank);</span><br><span class="line">            rank--;</span><br><span class="line">            Item item = iarray[random];</span><br><span class="line">            iarray[random] = iarray[rank];</span><br><span class="line">            <span class="comment">//这里需要注意的是 与上面直接在原数组上面操作的区别就在于不能直接令后面等于null</span></span><br><span class="line">            <span class="comment">//如 iarray[rank] = null 这样造成的后果是多用几次迭代器使用不了了。</span></span><br><span class="line">            iarray[rank] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Permutation</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permutation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RandomizedQueue&lt;String&gt; rq = <span class="keyword">new</span> RandomizedQueue&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> k = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            rq.enqueue(StdIn.readString());</span><br><span class="line">            <span class="comment">// System.out.println(StdIn.readString());</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(rq.dequeue());</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Percolation</title>
    <link href="http://wsx1128.xyz/2019/02/08/Percolation/"/>
    <id>http://wsx1128.xyz/2019/02/08/Percolation/</id>
    <published>2019-02-08T14:46:58.000Z</published>
    <updated>2019-02-23T16:42:00.534Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Programming-Assignment-1-Percolation"><a href="#Programming-Assignment-1-Percolation" class="headerlink" title="Programming Assignment 1: Percolation"></a>Programming Assignment 1: Percolation</h2><p>第一次提交这样的全英文大作业，先开始完全看不懂题目，然后在网上看懂题目之后，于是写代码的时候也是混乱的，完全不知道该怎么用，看了别人提交的写了之后，自己也提交了几次，都是60分70分左右，到最后才发现数组的溢出，以及java输入输出的一些问题。</p><h2 id="接下来看题目"><a href="#接下来看题目" class="headerlink" title="接下来看题目"></a>接下来看题目</h2><p><strong>首先先看英文版的题目</strong></p><p><img src="/2019/02/08/Percolation/11.png" alt="11"><br><img src="/2019/02/08/Percolation/12.png" alt="12"></p><p><strong>看懂的大神可以不用看下面的中文版的题目了：</strong></p><p>通过蒙特卡洛模拟方法来估计渗流阈值。</p><p>Percolation. 给一个有随机分布的绝缘和金属材料的组成的复合系统。例如我们想知道哪些部分必须是金属材料才能让这个复合系统是一个电导体。或者在一个多孔的地形，在表面有水或者油，在什么情况下水或者油能够从最表面渗透到最底层。科学家把这种过程的模型叫做Percolation。</p><p>The model. 在Assignment中，用一个NxN的格子表示percolation系统，每一个格子是打开或者关闭，打开是白色关闭是黑色。如果一个格子是full，首先他必须是打开额，然后表示从最顶上通过相连(4方向)的打开的格子可以渗透到这个位置。当一个系统是percolates，表示能从最顶层渗透到最底层，也就是说，最底层存在打开的格子是full。</p><p><img src="/2019/02/08/Percolation/13.png" alt="13"></p><p>The Problem. 研究人员对一下的问题感兴趣，如果每一个格子是独立的，并且被打开的概率为p，那么系统percolates的概率是多少？p=0，percolates概率为0，p=100，percolates的概率为100。下图是20x20和100x100格子的概率p的分布：</p><p><img src="/2019/02/08/Percolation/14.png" alt="14"></p><p>当N足够大时, 有一个阈值P<em>, 使得当p &lt; p</em>时候，任意的N<em>N网格，几乎不能被渗透, 并且当p &gt; p</em>, 基本能够被渗透。p<em>没有准确的数值解。任务是写一个计算估计p</em>的算法。</p><p>题目给出了两个样版分别作为题目开始写的两个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Percolation</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Percolation</span><span class="params">(<span class="keyword">int</span> N)</span>              <span class="comment">// create N-by-N grid, with all sites blocked</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>         <span class="comment">// open site (row i, column j) if it is not already</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>    <span class="comment">// is site (row i, column j) open?</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>    <span class="comment">// is site (row i, column j) full?</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">percolates</span><span class="params">()</span>            <span class="comment">// does the system percolate?</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PercolationStats</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">PercolationStats</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> trials)</span>    <span class="comment">// perform trials independent experiments on an n-by-n grid</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mean</span><span class="params">()</span>                          <span class="comment">// sample mean of percolation threshold</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">stddev</span><span class="params">()</span>                        <span class="comment">// sample standard deviation of percolation threshold</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceLo</span><span class="params">()</span>                  <span class="comment">// low  endpoint of 95% confidence interval</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceHi</span><span class="params">()</span>                  <span class="comment">// high endpoint of 95% confidence interval</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>        <span class="comment">// test client (described below)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第一部分建立起一个数学模型来模拟这个系统"><a href="#第一部分建立起一个数学模型来模拟这个系统" class="headerlink" title="第一部分建立起一个数学模型来模拟这个系统"></a>第一部分建立起一个数学模型来模拟这个系统</h2><h3 id="class-Percolation"><a href="#class-Percolation" class="headerlink" title="class Percolation"></a><strong>class Percolation</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.WeightedQuickUnionUF;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Percolation</span> </span>&#123;</span><br><span class="line">    <span class="comment">//建立两个并查集 来控制 backwash 的虚拟节点所产生的问题</span></span><br><span class="line">    <span class="keyword">private</span> WeightedQuickUnionUF uf;</span><br><span class="line">    <span class="keyword">private</span> WeightedQuickUnionUF backwash;</span><br><span class="line">    <span class="comment">//打开的数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="comment">//这里用一维数组来表示整张图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] percolation;</span><br><span class="line">    <span class="comment">//总数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Percolation</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illeagal Argument"</span>);</span><br><span class="line">        len = n;</span><br><span class="line">        percolation = <span class="keyword">new</span> <span class="keyword">boolean</span>[n * n + <span class="number">2</span>];</span><br><span class="line">        uf = <span class="keyword">new</span> WeightedQuickUnionUF(n * n + <span class="number">2</span>);</span><br><span class="line">        backwash = <span class="keyword">new</span> WeightedQuickUnionUF(n * n + <span class="number">1</span>);</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n * n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            percolation[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        percolation[<span class="number">0</span>] = percolation[n * n + <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; len || j &lt; <span class="number">1</span> || j &gt; len)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"out of the range"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">get_position</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (i - <span class="number">1</span>) * len + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">        check(row,col);</span><br><span class="line">        <span class="keyword">if</span> (isOpen(row,col)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> index = get_position(row,col);</span><br><span class="line">        percolation[index] = <span class="keyword">true</span>;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="comment">//处理虚拟节点与实际中的点的关系</span></span><br><span class="line">        <span class="comment">//并且同时处理一下前后左右点之间的关系</span></span><br><span class="line">        <span class="keyword">if</span> (row == <span class="number">1</span>)&#123;</span><br><span class="line">            uf.union(<span class="number">0</span>,index);</span><br><span class="line">            backwash.union(<span class="number">0</span>,index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isOpen(index - len))&#123;</span><br><span class="line">            uf.union(index,index - len);</span><br><span class="line">            backwash.union(index,index - len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (row == len) uf.union(len * len + <span class="number">1</span>,index);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isOpen(index + len))&#123;</span><br><span class="line">            uf.union(index,index + len);</span><br><span class="line">            backwash.union(index,index + len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (col != <span class="number">1</span> &amp;&amp; isOpen(index - <span class="number">1</span>))&#123;</span><br><span class="line">            uf.union(index,index - <span class="number">1</span>);</span><br><span class="line">            backwash.union(index,index - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (col != len &amp;&amp; isOpen(index + <span class="number">1</span>))&#123;</span><br><span class="line">            uf.union(index,index + <span class="number">1</span>);</span><br><span class="line">            backwash.union(index,index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> percolation[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        check(row,col);</span><br><span class="line">        <span class="keyword">return</span> isOpen(get_position(row,col));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        check(row,col);</span><br><span class="line">        <span class="keyword">int</span> index = get_position(row,col);</span><br><span class="line">        <span class="keyword">if</span> (backwash.connected(index,<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfOpenSites</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">percolates</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uf.connected(<span class="number">0</span>,len * len + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于以上这个类 其实最初思考之处，完全就是借鉴并查集的思想，使用一个数组来存储当前的模块有没有被打开，然后根据这个模块进行改变，然后再使用并查集将第一个与当前位置相连接，前后左右都打开就相当于链接了，然后根据遍历就可以找出是否会遍历到最后一个位置去了。</p><p><strong>上面所说的办法有些麻烦，有一种方法所产生的两个问题，也就是上面所使用的方法</strong><br>使用虚拟节点，相当于预设一个起点和一个终点，最后只需要判断起点与终点是否是并查集相连接的即可</p><ol><li>并查集的使用方法，可以直接写一个类也可以使用自带好的类型。</li><li>会产生终点处的backwash问题，意思就是终点位置可能会与许多没有连接到起点的支点相连接，所以采用的解决办法就是使用两个并查集。</li></ol><h2 id="第二部分就是-解决数据的位置"><a href="#第二部分就是-解决数据的位置" class="headerlink" title="第二部分就是 解决数据的位置"></a>第二部分就是 解决数据的位置</h2><p>估计percolation的阈值，初始化时候格子都是关闭的，随机寻找一个关闭的位置打开，直到系统可以渗透为止，打开的格子比上总格子数就是阈值。</p><p><img src="/2019/02/08/Percolation/15.jpg" alt="15"><br><strong>运用一下这些公式：</strong><br><img src="/2019/02/08/Percolation/16.png" alt="16"></p><p>这个问题仅仅就是数学处理的问题，以及控制格式上面的输入输出。</p><h3 id="class-PercolationStats"><a href="#class-PercolationStats" class="headerlink" title="class PercolationStats"></a><strong>class PercolationStats</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdStats;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Stopwatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PercolationStats</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] results; <span class="comment">// estimated threshold for each trial</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> avg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PercolationStats</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> trials)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span> || trials &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        results = <span class="keyword">new</span> <span class="keyword">double</span>[trials];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trials; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">            Percolation pr = <span class="keyword">new</span> Percolation(n);</span><br><span class="line">            <span class="keyword">while</span>(!pr.percolates())&#123;</span><br><span class="line">                <span class="keyword">int</span> row = StdRandom.uniform(n) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> col = StdRandom.uniform(n) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!pr.isOpen(row, col))&#123;</span><br><span class="line">                    pr.open(row, col);</span><br><span class="line">                    step++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            results[i] = (<span class="keyword">double</span>)step / (n * n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.avg = StdStats.mean(results);</span><br><span class="line">        <span class="keyword">this</span>.std = StdStats.stddev(results);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StdOut.printf(<span class="string">"%-25s\n"</span>, <span class="string">"Please input 2 integers"</span>);</span><br><span class="line">        <span class="keyword">int</span> N = StdIn.readInt();</span><br><span class="line">        <span class="keyword">int</span> T = StdIn.readInt();</span><br><span class="line"></span><br><span class="line">        Stopwatch wt = <span class="keyword">new</span> Stopwatch();</span><br><span class="line"></span><br><span class="line">        PercolationStats ps = <span class="keyword">new</span> PercolationStats(N, T);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// elapsed CPU time in seconds</span></span><br><span class="line">        <span class="keyword">double</span> elapsed = wt.elapsedTime();</span><br><span class="line"></span><br><span class="line">        StdOut.printf(<span class="string">"%-25s= %.15f\n"</span>, <span class="string">"elapsed CPU time"</span>, elapsed);</span><br><span class="line">        StdOut.printf(<span class="string">"%-25s= %.7f\n"</span>, <span class="string">"mean"</span>, ps.mean());</span><br><span class="line">        StdOut.printf(<span class="string">"%-25s= %.17f\n"</span>, <span class="string">"stddev"</span>, ps.stddev());</span><br><span class="line">        StdOut.printf(<span class="string">"%-25s= [%.15f, %.15f]\n"</span>, <span class="string">"%95 confidence interval"</span>,</span><br><span class="line">                ps.confidenceLo(), ps.confidenceHi());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.avg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">stddev</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.std;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceLo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mean() - <span class="number">1.96</span> * stddev() / Math.sqrt(results.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mean() + <span class="number">1.96</span> * stddev() / Math.sqrt(results.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>普林斯顿算法课之并查集</title>
    <link href="http://wsx1128.xyz/2019/02/08/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE%E4%B9%8B%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://wsx1128.xyz/2019/02/08/普林斯顿算法课之并查集/</id>
    <published>2019-02-08T13:33:26.000Z</published>
    <updated>2019-02-24T02:44:30.265Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="普林斯顿算法之并查集"><a href="#普林斯顿算法之并查集" class="headerlink" title="普林斯顿算法之并查集"></a>普林斯顿算法之并查集</h2><p>个人理解 并查集就是运用在联通路径中，需要压缩路径，从而快速判断接下里的几个位置是否相连.</p><p>根据以上的需求可以写出简单类似于并查集的操作</p><p>建立数学模型，用一维甚至是多维数组来表示两个位置是否相连，相连则用相同数字来进行表示，然后经过遍历来筛查。</p><p><strong>以上这种办法简单粗暴会花费很多无用功，所以这才产生了并查集的前身</strong></p><h3 id="简单来说就是根据叠加效应，如若两者相连，就将前者作为后者的值，然后依次累积，就会产生类似树形结构的根节点，也就是下面将会提到的root函数"><a href="#简单来说就是根据叠加效应，如若两者相连，就将前者作为后者的值，然后依次累积，就会产生类似树形结构的根节点，也就是下面将会提到的root函数" class="headerlink" title="简单来说就是根据叠加效应，如若两者相连，就将前者作为后者的值，然后依次累积，就会产生类似树形结构的根节点，也就是下面将会提到的root函数"></a>简单来说就是根据叠加效应，如若两者相连，就将前者作为后者的值，然后依次累积，就会产生类似树形结构的根节点，也就是下面将会提到的<code>root</code>函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i != point[i])</span><br><span class="line">        &#123;</span><br><span class="line">            i = point[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上代码在二者没有相连接的时候，每一个人的根节点都是自己，当使用<code>union</code>操作的时候，就是将前者接到后者上面即后者就变成前者的节点，而这里就进行循环，知道找到根节点（根节点的祖先是自己）</p><h3 id="接下来就是union操作"><a href="#接下来就是union操作" class="headerlink" title="接下来就是union操作"></a>接下来就是<code>union</code>操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> roota = root(a);</span><br><span class="line">        <span class="keyword">int</span> rootb = root(b);</span><br><span class="line">        <span class="keyword">if</span> (roota == rootb) <span class="keyword">return</span> ;</span><br><span class="line">        point[rootb] = roota;</span><br><span class="line">        cnt--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>找到两个所给点的祖先，并且把他们的祖先做一个连接行为，这样就完成了并查集的核心，而往往最多的变式就产生在这其中，一般涉及到祖先的赋值情况，后面优化的时候再说。</p><h3 id="最后一个就是connected的函数，主要用来判断是否两个点是否连接，直接判断他们两个的祖先点是否相等即可。"><a href="#最后一个就是connected的函数，主要用来判断是否两个点是否连接，直接判断他们两个的祖先点是否相等即可。" class="headerlink" title="最后一个就是connected的函数，主要用来判断是否两个点是否连接，直接判断他们两个的祖先点是否相等即可。"></a>最后一个就是<code>connected</code>的函数，主要用来判断是否两个点是否连接，直接判断他们两个的祖先点是否相等即可。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root(a)==root(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>优化主要分为两个方面<strong>路径压缩</strong>和<strong>路径树平衡</strong>。</p><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i != point[i])</span><br><span class="line">        &#123;</span><br><span class="line">            point[i] = point[point[i]];</span><br><span class="line">            i = point[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此处与上面相比仅仅只是多了一行代码，但是却可以让代码提高速度5倍以上，这里就是将本来要一个一个叠加的节点，变成了多支叠加，这样树的深度少了很多，所带来的结果就是效率的提高。</p><h3 id="路径树平衡"><a href="#路径树平衡" class="headerlink" title="路径树平衡"></a>路径树平衡</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> roota = root(a);</span><br><span class="line">        <span class="keyword">int</span> rootb = root(b);</span><br><span class="line">        <span class="keyword">if</span> (roota == rootb) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> (sz[roota] &lt; sz[rootb])&#123;</span><br><span class="line">            <span class="comment">//下面的意思就是让 roota 接到 rootb 上面</span></span><br><span class="line">            point[roota] = rootb;</span><br><span class="line">            sz[rootb] += sz[roota];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            point[rootb] = roota;</span><br><span class="line">            <span class="comment">//下面这个意思就是继续接头接上去</span></span><br><span class="line">            sz[roota] += sz[rootb];</span><br><span class="line">            <span class="keyword">if</span> (Max[rootb] &gt; Max[roota]) Max[roota] = Max[rootb];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里所带来的改变就是 使用了一个sz数组来记录每一个点在这个位置的深度，从而在每一次<code>union</code>操作的时候，都会有一个判断，就是树层次小的往树层次大的节点上面接，这样一来，同样减少了树的开销，加快效率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Java中this和super的用法总结</title>
    <link href="http://wsx1128.xyz/2019/01/21/Java%E4%B8%ADthis%E5%92%8Csuper%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.xyz/2019/01/21/Java中this和super的用法总结/</id>
    <published>2019-01-21T02:52:21.000Z</published>
    <updated>2019-02-23T16:42:02.336Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。</p><p><strong>this的用法在java中大体可以分为3种：</strong></p><h4 id="1-类似于C-里面对于自身普通的引用，这种情况就不在多讲了"><a href="#1-类似于C-里面对于自身普通的引用，这种情况就不在多讲了" class="headerlink" title="1. 类似于C++里面对于自身普通的引用，这种情况就不在多讲了"></a>1. 类似于C++里面对于自身普通的引用，这种情况就不在多讲了</h4><h4 id="2-形参与成员名字重名，用this来区分"><a href="#2-形参与成员名字重名，用this来区分" class="headerlink" title="2. 形参与成员名字重名，用this来区分"></a>2. 形参与成员名字重名，用this来区分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"初始化年龄："</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person Harry = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">"Harry's age is "</span>+Harry.GetAge(<span class="number">12</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>运行结果：<br>初始化年龄：10<br>Harry’s age is 12</em></p><p><strong>可以看到，这里age是GetAge成员方法的形参，this.age是Person类的成员变量。</strong></p><h4 id="3-引用构造函数"><a href="#3-引用构造函数" class="headerlink" title="3. 引用构造函数"></a>3. 引用构造函数</h4><p>这个就放在下面与super一起讲。</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p><strong>super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。</strong></p><h4 id="1-类似于C-的普通对父类对象的引用。（这里也不在多说）"><a href="#1-类似于C-的普通对父类对象的引用。（这里也不在多说）" class="headerlink" title="1. 类似于C++的普通对父类对象的引用。（这里也不在多说）"></a>1. 类似于C++的普通对父类对象的引用。（这里也不在多说）</h4><h4 id="2-子类中的成员变量或方法与父类中的成员变量或方法同名（可以用该办法区分）"><a href="#2-子类中的成员变量或方法与父类中的成员变量或方法同名（可以用该办法区分）" class="headerlink" title="2. 子类中的成员变量或方法与父类中的成员变量或方法同名（可以用该办法区分）"></a>2. 子类中的成员变量或方法与父类中的成员变量或方法同名（可以用该办法区分）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       name = <span class="string">"China"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span> <span class="keyword">extends</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"Shanghai"</span>;</span><br><span class="line">    <span class="keyword">super</span>.value();      <span class="comment">//调用父类的方法</span></span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       City c=<span class="keyword">new</span> City();</span><br><span class="line">       c.value();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>运行结果:<br>Shanghai<br>China</em></p><p>可以看到，这里既调用了父类的方法，也调用了父类的变量。若不调用父类方法value()，只调用父类变量name的话，则父类name值为默认值null。</p><h4 id="3-引用构造函数-1"><a href="#3-引用构造函数-1" class="headerlink" title="3.引用构造函数"></a>3.引用构造函数</h4><p>super（参数）：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）。<br>this（参数）：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prt</span><span class="params">(String s)</span> </span>&#123; </span><br><span class="line">       System.out.println(s); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">    Person() &#123; </span><br><span class="line">       prt(<span class="string">"父类·无参数构造方法： "</span>+<span class="string">"A Person."</span>); </span><br><span class="line">    &#125;<span class="comment">//构造方法(1) </span></span><br><span class="line">    </span><br><span class="line">    Person(String name) &#123; </span><br><span class="line">       prt(<span class="string">"父类·含一个参数的构造方法： "</span>+<span class="string">"A person's name is "</span> + name); </span><br><span class="line">    &#125;<span class="comment">//构造方法(2) </span></span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line">    Chinese() &#123; </span><br><span class="line">       <span class="keyword">super</span>(); <span class="comment">// 调用父类构造方法（1） </span></span><br><span class="line">       prt(<span class="string">"子类·调用父类”无参数构造方法“： "</span>+<span class="string">"A chinese coder."</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    Chinese(String name) &#123; </span><br><span class="line">       <span class="keyword">super</span>(name);<span class="comment">// 调用父类具有相同形参的构造方法（2） </span></span><br><span class="line">       prt(<span class="string">"子类·调用父类”含一个参数的构造方法“： "</span>+<span class="string">"his name is "</span> + name); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    Chinese(String name, <span class="keyword">int</span> age) &#123; </span><br><span class="line">       <span class="keyword">this</span>(name);<span class="comment">// 调用具有相同形参的构造方法（3） </span></span><br><span class="line">       prt(<span class="string">"子类：调用子类具有相同形参的构造方法：his age is "</span> + age); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">       Chinese cn = <span class="keyword">new</span> Chinese(); </span><br><span class="line">       cn = <span class="keyword">new</span> Chinese(<span class="string">"codersai"</span>); </span><br><span class="line">       cn = <span class="keyword">new</span> Chinese(<span class="string">"codersai"</span>, <span class="number">18</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure><p><em>运行结果:<br>父类·无参数构造方法： A Person.<br>子类·调用父类”无参数构造方法“： A chinese coder.<br>父类·含一个参数的构造方法： A person’s name is codersai<br>子类·调用父类”含一个参数的构造方法“： his name is codersai<br>父类·含一个参数的构造方法： A person’s name is codersai<br>子类·调用父类”含一个参数的构造方法“： his name is codersai<br>子类：调用子类具有相同形参的构造方法：his age is 18</em></p><p>从本例可以看到，可以用super和this分别调用父类的构造方法和本类中其他形式的构造方法。</p><p>例子中Chinese类第三种构造方法调用的是本类中第二种构造方法，而第二种构造方法是调用父类的，因此也要先调用父类的构造方法，再调用本类中第二种，最后是重写第三种构造方法。</p><h2 id="super和this的异同："><a href="#super和this的异同：" class="headerlink" title="super和this的异同："></a>super和this的异同：</h2><ul><li>super（参数）：调用基类中的某一个构造函数（应该为构造函数中的第一条语句）</li><li>this（参数）：调用本类中另一种形成的构造函数（应该为构造函数中的第一条语句）</li><li>super:　它引用当前对象的直接父类中的成员（用来访问直接父类中被隐藏的父类中成员数据或函数，基类与派生类中有相同成员定义时如：super.变量名    super.成员函数据名（实参）</li><li>this：它代表当前对象名（在程序中易产生二义性之处，应使用this来指明当前对象；如果函数的形参与类中的成员数据同名，这时需用this来指明成员变量名）</li><li>调用super()必须写在子类构造方法的第一行，否则编译不通过。每个子类构造方法的第一条语句，都是隐含地调用super()，如果父类没有这种形式的构造函数，那么在编译的时候就会报错。</li><li>super()和this()类似,区别是，super()从子类中调用父类的构造方法，this()在同一类内调用其它方法。</li><li>super()和this()均需放在构造方法内第一行。</li><li>尽管可以用this调用一个构造器，但却不能调用两个。</li><li>this和super不能同时出现在一个构造函数里面，因为this必然会调用其它的构造函数，其它的构造函数必然也会有super语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也不会通过。</li><li>this()和super()都指的是对象，所以，均不可以在static环境中使用。包括：static变量,static方法，static语句块。</li><li>从本质上讲，this是一个指向本对象的指针, 然而super是一个Java关键字。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://wsx1128.xyz/categories/java/"/>
    
    
      <category term="数据结构" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之排序总结</title>
    <link href="http://wsx1128.xyz/2018/12/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.xyz/2018/12/18/数据结构之排序总结/</id>
    <published>2018-12-18T01:19:12.000Z</published>
    <updated>2019-02-23T16:42:10.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据结构的排序总结"><a href="#数据结构的排序总结" class="headerlink" title="数据结构的排序总结"></a>数据结构的排序总结</h1><h2 id="首先先展示一张图，来说明每一个排序之间的复杂度和稳定性"><a href="#首先先展示一张图，来说明每一个排序之间的复杂度和稳定性" class="headerlink" title="首先先展示一张图，来说明每一个排序之间的复杂度和稳定性"></a>首先先展示一张图，来说明每一个排序之间的复杂度和稳定性</h2><p><img src="/2018/12/18/数据结构之排序总结/640.png" alt="数据结构"></p><hr><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>这种排序往往属于最基本的排序了，比较稳定，而且代码也比较简单，这里不做多讲，直接贴代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i!=maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j!=maxn;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(p+i)&gt;*(p+j))&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *(p+i);</span><br><span class="line">*(p+i) = *(p+j);</span><br><span class="line">*(p+j) = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>进阶版的冒泡排序，即对冒泡排序进行算法优化过得结果</p></blockquote><p><strong>快速排序的基本思想就是，通过找到一个中间值(枢纽值)，然后比枢纽值小的放到枢纽值的左边，比枢纽值大的放在枢纽值的右边，然后通过枢纽值来进行划分，一次往下面划分，利用递归或者是非递归的栈来实现，最终实现相应的排序。</strong></p><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol><li>首先找到一个枢纽,一般找最中间的一个值，或者找最左边的一个值，或者最右边的值，但是这样就会有缺陷，在某些特殊情况下会会存在很多不必要的开销。<blockquote><p>如果最后这个值刚好是整段序列最大或者最小的值，那么这次划分就是没意义的。 所以当序列是正序或者逆序时，每次选到的枢轴都是没有起到划分的作用。快排的效率会极速退化。所以可以每次在选枢轴时，在序列的第一，中间，最后三个值里面选一个中间值出来作为枢轴，保证每次划分接近均等。</p></blockquote></li></ol><p>所以采用的是<code>三值取中法</code>：</p><p><img src="/2018/12/18/数据结构之排序总结/1.png" alt="三值取中法"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_mid</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[left] &lt;= a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt; a[left]) <span class="keyword">return</span> left;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &gt; a[right]) <span class="keyword">return</span> right;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt; a[right]) <span class="keyword">return</span> right;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &gt; a[left]) <span class="keyword">return</span> left;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>当取到中间的枢纽值之后，接下来需要完成的是将枢纽值放到最右边，并且一次进行比较排序，将比枢纽值小的放在左边，比枢纽值大的放在右边。最后返回最终枢纽值所在的位置，按照此位置进行划分子区，从而完成一次快速排序，然后再到每一个子区进行重复上述过程。</li></ol><p><img src="/2018/12/18/数据结构之排序总结/2.png" alt=""></p><p>以下介绍两种方法，而这两种方法代码类似，而两者唯一的区别也就在于对于key的处理了，一个是直接将key当做是引用，而另一个则是直接拷贝。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左右指针交换的办法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">part_sort1</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = get_mid(a,left,right);</span><br><span class="line">swap(a[mid],a[right]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> &amp;key = a[right];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; a[left] &lt;= key)</span><br><span class="line">++left;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; a[right] &gt;= key)</span><br><span class="line">--right;</span><br><span class="line">        <span class="comment">//交换左右两个的值，分别根据key值进行一个有效的划分</span></span><br><span class="line">swap (a[left],a[right]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//由于这里的key是一个引用，直接附在了枢纽值上面，无论怎么移动，都可以在这个地方直接进行交换</span></span><br><span class="line">swap(a[right],key);</span><br><span class="line">    <span class="comment">//然而这里需要注意就是，无论这里是写right还是left，到最后right与left一定会相同的，因为每一次划分最后到不能划分之后，左右指针就会进行一个重叠。</span></span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//挖坑填补法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">part_sort2</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = get_mid(a,left,right);</span><br><span class="line">swap (a[mid],a[right]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里实际上就是直接将枢纽值进行拷贝给temp上面</span></span><br><span class="line"><span class="keyword">int</span> key = a[right];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; a[left] &lt;= key)</span><br><span class="line">++left;</span><br><span class="line">a[right] = a[left];</span><br><span class="line">        <span class="comment">//每一步骤就进行占位</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; a[right] &gt;= key)</span><br><span class="line">--right;</span><br><span class="line">        <span class="comment">//相当于此处进行一个有效的位置互换</span></span><br><span class="line">a[left] = a[right];</span><br><span class="line">&#125;</span><br><span class="line">a[right] = key;</span><br><span class="line">    <span class="comment">//然后这里right指向的元素就应该是多余且本应该存放枢纽值的位置</span></span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>当每一步结束之后，可以利用递归，也可以使用非递归的栈来实现对每一步的分区进行快排的操作。<br><img src="/2018/12/18/数据结构之排序总结/3.png" alt=""></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> index = part_sort1(a,left,right);</span><br><span class="line">quick_sort(a,left,index<span class="number">-1</span>);</span><br><span class="line">quick_sort(a,index+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>简单选择排序是最简单直观的一种算法，基本思想为每一趟从待排序的数据元素中选择最小（或最大）的一个元素作为首元素，直到所有元素排完为止，简单选择排序是不稳定排序。</p><h3 id="算法思想："><a href="#算法思想：" class="headerlink" title="算法思想："></a>算法思想：</h3><p>每一趟确定最小元素的时候会通过不断地比较交换来使得首位置为当前最小，交换是个比较耗时的操作。通过设置一个变量min，每一次比较仅存储较小元素的数组下标，当轮循环结束之后，那这个变量存储的就是当前最小元素的下标，此时再执行交换操作即可。（这里不做过多阐述）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xuanze</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i!=maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> Min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j!=maxn ;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(p+Min) &gt; *(p+j))</span><br><span class="line">Min = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Min != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *(p + Min);</span><br><span class="line">*(p + Min) = * (p + i);</span><br><span class="line">*(p + i) = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种<code>选择排序</code>，（可以理解成特殊的选择排序，相当于完全二叉树型的选择排序）它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</p><p>首先简单了解下堆结构。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图：</p><p><img src="/2018/12/18/数据结构之排序总结/4.png" alt=""></p><h3 id="堆排序的思想："><a href="#堆排序的思想：" class="headerlink" title="堆排序的思想："></a>堆排序的思想：</h3><p>首先先将给出的序列进行一个调整，调整成一个大顶堆或者一个小顶堆，调整之后，再把栈顶的元素与最后一个元素进行交换，交换完成之后在进行调整，最后完成堆排序。</p><h3 id="堆排序步骤"><a href="#堆排序步骤" class="headerlink" title="堆排序步骤:"></a>堆排序步骤:</h3><ol><li><p>构造大顶堆或者小顶堆，通过调整的方式</p><ul><li><p>最初模样<br><img src="/2018/12/18/数据结构之排序总结/5.png" alt=""></p></li><li><p>从最后一个非叶子节点开始，从左到右，从上到下进行调整<br><img src="/2018/12/18/数据结构之排序总结/6.png" alt=""></p></li><li><p>找到根节点，左孩子，右孩子，中的最大的一个，使其放在根节点的位置。<br><img src="/2018/12/18/数据结构之排序总结/7.png" alt=""></p></li><li><p>继续向上面调整，一步一步的更替到下面<br><img src="/2018/12/18/数据结构之排序总结/8.png" alt=""></p></li></ul></li></ol><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> root,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a[root];</span><br><span class="line"><span class="keyword">int</span> child = <span class="number">2</span> * root + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (child &lt; len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (child + <span class="number">1</span> &lt; len &amp;&amp; a[child] &lt; a[child + <span class="number">1</span>])</span><br><span class="line">child ++;</span><br><span class="line"><span class="keyword">if</span> (temp &gt;= a[child]) <span class="keyword">break</span>;</span><br><span class="line">a[root] = a[child];</span><br><span class="line">root = child;</span><br><span class="line">child = <span class="number">2</span> * child;</span><br><span class="line">&#125;</span><br><span class="line">a[root] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将栈顶元素与最后一个元素进行交换，使末尾元素最大，然后再来慢慢调整。</li></ol><p><strong>以下的四张图就是交换元素，并且每交换一次都会调整元素一次</strong><br><img src="/2018/12/18/数据结构之排序总结/9.png" alt=""></p><p><img src="/2018/12/18/数据结构之排序总结/10.png" alt=""></p><p><img src="/2018/12/18/数据结构之排序总结/11.png" alt=""></p><p><img src="/2018/12/18/数据结构之排序总结/12.png" alt=""></p><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//注意这里必须从后面开始往前面递归的意思就在于便于改变上面之后可以有效的推至下面，相当于一个小型递归</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = maxn / <span class="number">2</span>;i &gt;= <span class="number">0</span>;i--)</span><br><span class="line">adjust(a,i,maxn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = maxn - <span class="number">1</span>;i &gt; <span class="number">0</span>;i--)&#123;</span><br><span class="line">swap (a[<span class="number">0</span>],a[i]);</span><br><span class="line">adjust(a,<span class="number">0</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">print (a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="算法思想：-1"><a href="#算法思想：-1" class="headerlink" title="算法思想："></a>算法思想：</h3><blockquote><p>从后面往前面递进，将每一个树直接插入到前面已经排好序的序列里面去。(后面再详细阐明)</p></blockquote><p><img src="/2018/12/18/数据结构之排序总结/15.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">charu</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i!=maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *(p+i);</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span> (j&gt;<span class="number">0</span> &amp;&amp; temp &lt; *(p+j<span class="number">-1</span>) )</span><br><span class="line">&#123;</span><br><span class="line">*(p+j) = *(p+j<span class="number">-1</span>);</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != j)</span><br><span class="line">&#123;</span><br><span class="line">*(p+j) = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><blockquote><p>其实希尔排序也就是基于插入排序的优化版本，而插入排序则可以看做是增值为1的希尔排序</p></blockquote><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><strong>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止</strong></p><p>可以观看下面<code>图示</code>：</p><p><img src="/2018/12/18/数据结构之排序总结/16.png" alt=""></p><h3 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a>算法步骤：</h3><p>首先找出每一个gap值（增值），然后根据增值进行相除，找到每一个间隔位置的元素，来比较大小然后排序，而gap值所造成的间隔会越来越小，直到最后增值为一，成为最后的插入排序。</p><blockquote><p>一般gap值为2，即用2去整除，但是有的算法表示同样也可以用到3</p></blockquote><h3 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xier</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> gap = maxn/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap=gap/<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//从后面往前面进行递增，获取gap的值，然后依次除以2.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=gap;i&lt;maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//下面就类似于插入排序了，只不过增值要从1变成gap。</span></span><br><span class="line"><span class="keyword">int</span> temp = a[i];</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="comment">//这个地方需要注意的是对于插入排序 最后一个值是需要到j&gt;=1，而这里要到gap，注意清楚范围。</span></span><br><span class="line"><span class="keyword">while</span> (j&gt;gap<span class="number">-1</span> &amp;&amp; temp &lt; *(a+j-gap))</span><br><span class="line">&#123;</span><br><span class="line">*(a+j) = *(a+j-gap);</span><br><span class="line">j -= gap;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//上一步每一个都伦换过后，将最初这里的值换到相应的位置上面</span></span><br><span class="line">*(a+j) = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><blockquote><p>归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略（分治法将问题<code>分</code>成一些小的问题然后递归求解，而<code>治</code>的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p></blockquote><p><img src="/2018/12/18/数据结构之排序总结/17.png" alt=""></p><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想:"></a>算法思想:</h3><pre><code>其实有点像完全二叉树的结构，但是又有很大的不同,主要就是借助另外一个同样长的数组来存储合并之后的结果，合并的时候可以使用递归或者使用栈来决定合并部位。然后合并的过程中分成无数个小部分，然后一一往新的数组上面添加，最后拷贝到原来的数组上面。</code></pre><p><img src="/2018/12/18/数据结构之排序总结/18.png" alt=""></p><h3 id="算法步骤：-1"><a href="#算法步骤：-1" class="headerlink" title="算法步骤："></a>算法步骤：</h3><ol><li>决定合并部位，这里贴出两个，一个是直接利用递归，另一个是利用循环，用1，2，4，8…乘数扩大进行操作。</li></ol><ul><li>递归版本：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gui_sort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">gui_sort(a,left,mid,temp);</span><br><span class="line">gui_sort(a,mid+<span class="number">1</span>,right,temp);</span><br><span class="line">merge(a,left,mid,right,temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非递归版本：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fei_gui_sort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> size=<span class="number">1</span>,low,mid,high;</span><br><span class="line"><span class="keyword">while</span>(size&lt;=maxn<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">low=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//这个步骤就相当于上面递归内部进行的步骤了，从1到2到4到8到16，依次进行。</span></span><br><span class="line">        <span class="comment">//但是这种非递归的版本可以带来节省很多由栈带来的递归开销。</span></span><br><span class="line"><span class="keyword">while</span>(low+size&lt;=maxn<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mid=low+size<span class="number">-1</span>;</span><br><span class="line">high=mid+size;</span><br><span class="line"><span class="keyword">if</span>(high&gt;maxn<span class="number">-1</span>)</span><br><span class="line">high=maxn<span class="number">-1</span>;</span><br><span class="line">merge(a,low,mid,high,temp); </span><br><span class="line"></span><br><span class="line">low=high+<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//这里乘以2。</span></span><br><span class="line">size*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后就是合并操作了，设置几个指针节点，然后依次比较大小，把小的那个先放入排序中。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right,<span class="keyword">int</span> *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i =left;</span><br><span class="line"><span class="keyword">int</span> j = mid +<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//左边与右边开始进行比较</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[j])</span><br><span class="line">temp[t++] = a[i++];</span><br><span class="line"><span class="keyword">else</span> temp[t++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//左边剩下的</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">temp[t++] = a[i++];</span><br><span class="line">    <span class="comment">//右边剩下的</span></span><br><span class="line"><span class="keyword">while</span> (j &lt;= right)</span><br><span class="line">temp[t++] = a[j++];</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//拷贝到原数组中去</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">a[left++] = temp[t++];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="全部代码-可直接运行"><a href="#全部代码-可直接运行" class="headerlink" title="全部代码(可直接运行)"></a>全部代码(可直接运行)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">&gt; File Name: 排序代码.cpp</span></span><br><span class="line"><span class="comment">&gt; Author: wangshuxiao</span></span><br><span class="line"><span class="comment">&gt; Mail: wsx1128@outlook.com </span></span><br><span class="line"><span class="comment">&gt; Created Time: Mon 17 Dec 11:23:48 2018</span></span><br><span class="line"><span class="comment"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里使用STL算法中的shuffle来使最初的排序全部随机</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p++ &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">random</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">random_shuffle(p,p+maxn);</span><br><span class="line">print(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i!=maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j!=maxn;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(p+i)&gt;*(p+j))&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *(p+i);</span><br><span class="line">*(p+i) = *(p+j);</span><br><span class="line">*(p+j) = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xuanze</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i!=maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> Min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j!=maxn ;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(p+Min) &gt; *(p+j))</span><br><span class="line">Min = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Min != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *(p + Min);</span><br><span class="line">*(p + Min) = * (p + i);</span><br><span class="line">*(p + i) = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">charu</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i!=maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *(p+i);</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span> (j&gt;<span class="number">0</span> &amp;&amp; temp &lt; *(p+j<span class="number">-1</span>) )</span><br><span class="line">&#123;</span><br><span class="line">*(p+j) = *(p+j<span class="number">-1</span>);</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != j)</span><br><span class="line">&#123;</span><br><span class="line">*(p+j) = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xier</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> gap = maxn/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap=gap/<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=gap;i&lt;maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a[i];</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span> (j&gt;gap<span class="number">-1</span> &amp;&amp; temp &lt; *(a+j-gap))</span><br><span class="line">&#123;</span><br><span class="line">*(a+j) = *(a+j-gap);</span><br><span class="line">j -= gap;</span><br><span class="line">&#125;</span><br><span class="line">*(a+j) = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right,<span class="keyword">int</span> *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i =left;</span><br><span class="line"><span class="keyword">int</span> j = mid +<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[j])</span><br><span class="line">temp[t++] = a[i++];</span><br><span class="line"><span class="keyword">else</span> temp[t++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">temp[t++] = a[i++];</span><br><span class="line"><span class="keyword">while</span> (j &lt;= right)</span><br><span class="line">temp[t++] = a[j++];</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">a[left++] = temp[t++];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gui_sort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">gui_sort(a,left,mid,temp);</span><br><span class="line">gui_sort(a,mid+<span class="number">1</span>,right,temp);</span><br><span class="line">merge(a,left,mid,right,temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">guibing</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *temp = <span class="keyword">new</span> <span class="keyword">int</span> [maxn];</span><br><span class="line">gui_sort(a,<span class="number">0</span>,maxn<span class="number">-1</span>,temp);</span><br><span class="line">print(a);</span><br><span class="line"><span class="keyword">delete</span> [] temp;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fei_gui_sort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> size=<span class="number">1</span>,low,mid,high;</span><br><span class="line"><span class="keyword">while</span>(size&lt;=maxn<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">low=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(low+size&lt;=maxn<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mid=low+size<span class="number">-1</span>;</span><br><span class="line">high=mid+size;</span><br><span class="line"><span class="keyword">if</span>(high&gt;maxn<span class="number">-1</span>)</span><br><span class="line">high=maxn<span class="number">-1</span>;</span><br><span class="line">merge(a,low,mid,high,temp); </span><br><span class="line"></span><br><span class="line">low=high+<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">size*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fei_guibing</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *temp = <span class="keyword">new</span> <span class="keyword">int</span> [maxn];</span><br><span class="line">fei_gui_sort(a,temp);</span><br><span class="line">print(a);</span><br><span class="line"><span class="keyword">if</span> (temp != <span class="literal">NULL</span>) <span class="keyword">delete</span> [] temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_mid</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[left] &lt;= a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt; a[left]) <span class="keyword">return</span> left;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &gt; a[right]) <span class="keyword">return</span> right;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt; a[right]) <span class="keyword">return</span> right;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &gt; a[left]) <span class="keyword">return</span> left;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右指针交换的办法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">part_sort1</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = get_mid(a,left,right);</span><br><span class="line">swap(a[mid],a[right]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> &amp;key = a[right];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; a[left] &lt;= key)</span><br><span class="line">++left;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; a[right] &gt;= key)</span><br><span class="line">--right;</span><br><span class="line">swap (a[left],a[right]);</span><br><span class="line">&#125;</span><br><span class="line">swap(a[right],key);</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//挖坑填补法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">part_sort2</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = get_mid(a,left,right);</span><br><span class="line">swap (a[mid],a[right]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> key = a[right];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; a[left] &lt;= key)</span><br><span class="line">++left;</span><br><span class="line">a[right] = a[left];</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; a[right] &gt;= key)</span><br><span class="line">--right;</span><br><span class="line">a[left] = a[right];</span><br><span class="line">&#125;</span><br><span class="line">a[right] = key;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> index = part_sort1(a,left,right);</span><br><span class="line">quick_sort(a,left,index<span class="number">-1</span>);</span><br><span class="line">quick_sort(a,index+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kuaisu</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">quick_sort(a,<span class="number">0</span>,maxn<span class="number">-1</span>);</span><br><span class="line">print(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> root,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a[root];</span><br><span class="line"><span class="keyword">int</span> child = <span class="number">2</span> * root + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (child &lt; len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (child + <span class="number">1</span> &lt; len &amp;&amp; a[child] &lt; a[child + <span class="number">1</span>])</span><br><span class="line">child ++;</span><br><span class="line"><span class="keyword">if</span> (temp &gt;= a[child]) <span class="keyword">break</span>;</span><br><span class="line">a[root] = a[child];</span><br><span class="line">root = child;</span><br><span class="line">child = <span class="number">2</span> * child;</span><br><span class="line">&#125;</span><br><span class="line">a[root] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = maxn / <span class="number">2</span>;i &gt;= <span class="number">0</span>;i--)</span><br><span class="line">adjust(a,i,maxn);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = maxn - <span class="number">1</span>;i &gt; <span class="number">0</span>;i--)&#123;</span><br><span class="line">swap (a[<span class="number">0</span>],a[i]);</span><br><span class="line">adjust(a,<span class="number">0</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">print (a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,</span><br><span class="line"><span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"最初的顺序为"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">print(a);</span><br><span class="line"><span class="comment">//以上为初始化过后，并且进行打乱顺序的排列顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"冒泡排序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">random(a);</span><br><span class="line">maopao(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"选择排序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">random(a);</span><br><span class="line">xuanze(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入排序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">random(a);</span><br><span class="line">charu(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"希尔排序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">random(a);</span><br><span class="line">xier(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"递归版本归并排序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">random(a);</span><br><span class="line">guibing(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"非递归版本的归并排序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">random (a);</span><br><span class="line">fei_guibing(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"快速排序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">random(a);</span><br><span class="line">kuaisu(a);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"堆排序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">random(a);</span><br><span class="line">heap_sort(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文中图片转载自多个博客，这里不贴出来源了，如若侵权，即刻删除，谢谢。"><a href="#文中图片转载自多个博客，这里不贴出来源了，如若侵权，即刻删除，谢谢。" class="headerlink" title="文中图片转载自多个博客，这里不贴出来源了，如若侵权，即刻删除，谢谢。"></a><strong>文中图片转载自多个博客，这里不贴出来源了，如若侵权，即刻删除，谢谢。</strong></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://wsx1128.xyz/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>二叉树总结</title>
    <link href="http://wsx1128.xyz/2018/12/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.xyz/2018/12/04/二叉树总结/</id>
    <published>2018-12-04T02:49:43.000Z</published>
    <updated>2019-02-23T16:42:07.712Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="今天花时间整理一下二叉树的一切内容"><a href="#今天花时间整理一下二叉树的一切内容" class="headerlink" title="今天花时间整理一下二叉树的一切内容"></a>今天花时间整理一下二叉树的一切内容</h1><h2 id="下面的部分包括："><a href="#下面的部分包括：" class="headerlink" title="下面的部分包括："></a>下面的部分包括：</h2><ul><li><h3 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h3></li><li><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><ul><li>二叉树的层序遍历</li><li>二叉树的深度遍历<ul><li>二叉树递归先序遍历</li><li>二叉树递归中序遍历</li><li>二叉树递归后序遍历</li><li>二叉树非递归先序遍历</li><li>二叉树非递归中序遍历</li><li>二叉树非递归后序遍历</li></ul></li></ul></li><li><h3 id="线索树"><a href="#线索树" class="headerlink" title="线索树"></a>线索树</h3></li></ul><h2 id="下面直接贴代码（在代码内部进行注释）："><a href="#下面直接贴代码（在代码内部进行注释）：" class="headerlink" title="下面直接贴代码（在代码内部进行注释）："></a>下面直接贴代码（在代码内部进行注释）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">&gt; File Name: tree.cpp</span></span><br><span class="line"><span class="comment">&gt; Author: wangshuxiao</span></span><br><span class="line"><span class="comment">&gt; Mail: wsx1128@outlook.com </span></span><br><span class="line"><span class="comment">&gt; Created Time: 二 11/20 18:51:16 2018</span></span><br><span class="line"><span class="comment"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Node():left(<span class="number">0</span>),right(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">    Node(<span class="keyword">char</span> e):</span><br><span class="line">    value(e)&#123;left = <span class="number">0</span>;right = <span class="number">0</span>;&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> value;</span><br><span class="line">    Node* left;</span><br><span class="line">    Node* right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bi_tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Bi_tree()=<span class="keyword">default</span>;</span><br><span class="line">    </span><br><span class="line">    ~Bi_tree()</span><br><span class="line">    &#123;</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//由于建树与析构都要使用到递归，所以对于类而言，必须使用另外一个函数来进行递归，才不会影响私有成员</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bulid</span> <span class="params">()</span></span>;</span><br><span class="line">    Node* _bulid (Node *); </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> root == <span class="number">0</span>; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">breath_order</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(Node *t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node *t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(Node *t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">iter_preorder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">iter_inorder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">iter_postorder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Node * <span class="title">get_root</span><span class="params">()</span>    </span>&#123;<span class="keyword">return</span> root;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node *)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Node *p)</span></span>;</span><br><span class="line">    Node *root;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Bi_tree::clear()</span><br><span class="line">&#123;</span><br><span class="line">    clear(root);</span><br><span class="line">    root = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Bi_tree::clear(Node *n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n-&gt;left)    clear(n-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (n-&gt;right)    clear(n-&gt;right);</span><br><span class="line">        <span class="keyword">delete</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Bi_tree::print(Node *p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p-&gt;value &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Bi_tree::bulid()</span><br><span class="line">&#123;</span><br><span class="line">    root = _bulid(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另外这里还是需要注意到的是，由于类的逻辑与C语言的不太相同，所以再循环的时候不能直接返回为空，所以必须要返回一个`Node*`，这样才可以把之前的给联系在一起。</span></span><br><span class="line"><span class="comment">//或者还有一种办法是，使用指针的引用，这样也就是所谓的二级指针，才能造成效果。</span></span><br><span class="line">Node * Bi_tree::_bulid(Node *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//creat the tree by preorder</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ch ==<span class="string">'#'</span>)</span><br><span class="line">        t = <span class="literal">nullptr</span> ;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        t = <span class="keyword">new</span> Node;</span><br><span class="line">        t-&gt;value = ch;</span><br><span class="line">        t-&gt;left = _bulid(t-&gt;left);</span><br><span class="line">        t-&gt;right = _bulid(t-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="keyword">void</span> Bi_tree::breath_order()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;Node*&gt; q_tree;</span><br><span class="line">Node *t = root;</span><br><span class="line"><span class="keyword">if</span> ( t != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">q_tree.push(t);</span><br><span class="line"><span class="keyword">while</span> (!q_tree.empty())</span><br><span class="line">&#123;</span><br><span class="line">t = q_tree.front();</span><br><span class="line">q_tree.pop();</span><br><span class="line">print(t);</span><br><span class="line"><span class="keyword">if</span> (t-&gt;left != <span class="number">0</span>)</span><br><span class="line">q_tree.push(t-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (t-&gt;right != <span class="number">0</span>)</span><br><span class="line">q_tree.push(t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 先序遍历</span></span><br><span class="line"><span class="keyword">void</span> Bi_tree::preorder(Node *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">    &#123;</span><br><span class="line">        print(t);</span><br><span class="line">        preorder(t-&gt;left);</span><br><span class="line">        preorder(t-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 中序遍历</span></span><br><span class="line"><span class="keyword">void</span> Bi_tree::inorder(Node *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">    &#123;</span><br><span class="line">        inorder(t-&gt;left);</span><br><span class="line">        print(t);</span><br><span class="line">        inorder(t-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 后序遍历</span></span><br><span class="line"><span class="keyword">void</span> Bi_tree::postorder(Node *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">    &#123;</span><br><span class="line">        postorder(t-&gt;left);</span><br><span class="line">        postorder(t-&gt;right);</span><br><span class="line">        print(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归 先序遍历 使用栈</span></span><br><span class="line"><span class="keyword">void</span> Bi_tree::iter_preorder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt; s_tree;</span><br><span class="line">    Node *t = root;</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s_tree.push(t);</span><br><span class="line">        <span class="keyword">while</span> (!s_tree.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            t = s_tree.top();</span><br><span class="line">            s_tree.pop();</span><br><span class="line">            print(t);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (t-&gt;right != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s_tree.push(t-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (t-&gt;left != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s_tree.push(t-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归 中序遍历 使用栈</span></span><br><span class="line"><span class="keyword">void</span> Bi_tree::iter_postorder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt; s_tree;</span><br><span class="line">    Node *p = root , *q = root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( ;p-&gt;left != <span class="number">0</span>;p = p-&gt;left)</span><br><span class="line">            s_tree.push(p);</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;right == <span class="number">0</span> || p-&gt;right == q)</span><br><span class="line">        &#123;</span><br><span class="line">            print(p);</span><br><span class="line">            q = p;</span><br><span class="line">            <span class="keyword">if</span> (s_tree.empty()) <span class="keyword">return</span> ;</span><br><span class="line">            p = s_tree.top();</span><br><span class="line">            s_tree.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        s_tree.push(p);</span><br><span class="line">        p = p-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归 后序遍历 使用栈</span></span><br><span class="line"><span class="keyword">void</span> Bi_tree::iter_inorder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span> &lt;Node*&gt; s_tree;</span><br><span class="line">    Node *p = root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;right)</span><br><span class="line">                s_tree.push(p-&gt;right);</span><br><span class="line">            s_tree.push(p);</span><br><span class="line">            p = p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        p = s_tree.top();</span><br><span class="line">        s_tree.pop();</span><br><span class="line">        <span class="keyword">while</span> (!s_tree.empty() &amp;&amp; p-&gt;right == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            print (p);</span><br><span class="line">            p = s_tree.top();</span><br><span class="line">            s_tree.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        print(p);</span><br><span class="line">        <span class="keyword">if</span> (!s_tree.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            p = s_tree.top();</span><br><span class="line">            s_tree.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bi_tree b;</span><br><span class="line">    b.bulid();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (b.isEmpty()) <span class="built_in">cout</span> &lt;&lt; <span class="string">"空的"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"下面是递归形式的遍历方式"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"递归形式先序遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    b.preorder(b.get_root());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"递归形式后续遍历"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    b.postorder(b.get_root());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" 非递归形式的中序遍历"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    b.iter_inorder();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" 非递归形式的后序遍历"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    b.iter_postorder();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线索树-1"><a href="#线索树-1" class="headerlink" title="线索树"></a>线索树</h3><h4 id="线索二叉树原理"><a href="#线索二叉树原理" class="headerlink" title="线索二叉树原理"></a>线索二叉树原理</h4><p>通过考察各种二叉链表，不管儿叉树的形态如何，空链域的个数总是多过非空链域的个数。准确的说，n各结点的二叉链表共有2n个链域，非空链域为n-1个，但其中的空链域却有n+1个。因此，提出了一种方法，利用原来的空链域存放指针，指向树中其他结点。这种指针称为线索。</p><blockquote><p>记ptr指向二叉链表中的一个结点，以下是建立线索的规则：</p><ol><li>如果ptr-&gt;lchild为空，则存放指向中序遍历序列中该结点的<code>前驱结点</code>。这个结点称为ptr的中序前驱；</li><li>如果ptr-&gt;rchild为空，则存放指向中序遍历序列中该结点的<code>后继结点</code>。这个结点称为ptr的中序后继；</li></ol></blockquote><p>显然，在决定lchild是指向左孩子还是前驱，rchild是指向右孩子还是后继，需要一个区分标志的。因此，我们在每个结点再增设两个标志域ltag和rtag，注意ltag和rtag只是区分0或1数字的布尔型变量，其占用内存空间要小于像lchild和rchild的指针变量。</p><p>其中：</p><ol><li>ltag为0时指向该结点的左孩子，为1时指向该结点的前驱；</li><li>rtag为0时指向该结点的右孩子，为1时指向该结点的后继；</li><li>因此对于上图的二叉链表图可以修改为下图的养子。</li></ol><p><img src="http://blog.chinaunix.net/attachment/201301/17/26548237_1358403668csC7.jpg" alt=""></p><h3 id="线索二叉树的代码实现"><a href="#线索二叉树的代码实现" class="headerlink" title="线索二叉树的代码实现"></a>线索二叉树的代码实现</h3><p>对接下来的例子中，线索二叉树的中序遍历。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="http://wsx1128.xyz/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="遍历" scheme="http://wsx1128.xyz/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>海边的卡夫卡的短书评</title>
    <link href="http://wsx1128.xyz/2018/12/02/%E6%B5%B7%E8%BE%B9%E7%9A%84%E5%8D%A1%E5%A4%AB%E5%8D%A1%E7%9A%84%E7%9F%AD%E4%B9%A6%E8%AF%84/"/>
    <id>http://wsx1128.xyz/2018/12/02/海边的卡夫卡的短书评/</id>
    <published>2018-12-01T17:18:33.000Z</published>
    <updated>2018-12-04T10:24:04.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>《海边的卡夫卡》这本书以一个悲剧戏剧为蓝本，进行双线构造，相互交织，相互迎合，从而使一个十五岁的少年的成长历程逐渐完善。虽然取自于俄狄浦斯王中杀父奸母的桥段，但是结局导向以及传达出来的意义绝不一样，前者是悲剧式的自我毁灭以及无常命运的慨叹，而后者则是彻彻底底的自我救赎式的成长。<br>不知有多少人曾在那里流血，你本身也会流血，温暖而又鲜红的血。你的双手将会接住它们，那既是你的血，又是别人的血，而沙尘暴偃旗息鼓的时候，你恐怕还不能完全明白自己是如同从中穿过而得以逃生的。甚至它是否过去都无从判断，不过有一点是你一定是非常清楚的，从沙尘暴中逃生的不再是跨入沙尘暴的你。<br>每一个人的成长都是自由的，但同时却也是不可预测的。村上君用一个十五岁少年的成长史告诉我们在命运的妥协与抗争之间还存在救赎和成长。但是如果仅仅写出少年的成长史的话只能算一般小说。但是村上君肯定不会这样落入俗套，于是他巧妙利用第二条故事线，一个十五岁之后丧失一切的老爷爷的奇遇，这位老爷爷拥有着诸多神奇的能力，但是就是无法思考，记不清楚发生在自己身上的一切，甚至是与整个世界脱轨。看似与第一条故事线没有任何关联，实则丝丝入扣，一个十五岁之后拥有无限可能的人生经历和一个十五岁之后一切都是空白的人生经历相对比，更加深了本文成长与救赎的主题。<br>这本书另一个引人注目的地方也就是作者村上春树对成长中最大的敌人的定义：<br>缺乏想象力的狭隘，苛刻，自以为是的命题，空洞的术语，被篡夺的理想，僵化的思想体系，这些才是最可怕的，但是何为正确，何为不正确，这些都是值得深思的话题，但是某种个体的判断失误，在很多情况下事后不是不可能挽回，只要有勇气主动承认错误，都是可以补救。<br>村上春树这本书以一个全新的视角诠释我们在成长之行上必定会遇到的善与恶，以及一步步走向顽强的心路历程，不要畏惧前方有未知的风暴，因为你是世界上最顽强的是19岁的少年。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="书评" scheme="http://wsx1128.xyz/tags/%E4%B9%A6%E8%AF%84/"/>
    
      <category term="村上春树" scheme="http://wsx1128.xyz/tags/%E6%9D%91%E4%B8%8A%E6%98%A5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>关于STL里面函数简单的应用</title>
    <link href="http://wsx1128.xyz/2018/12/01/%E5%85%B3%E4%BA%8ESTL%E9%87%8C%E9%9D%A2%E5%87%BD%E6%95%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://wsx1128.xyz/2018/12/01/关于STL里面函数简单的应用/</id>
    <published>2018-12-01T15:26:24.000Z</published>
    <updated>2019-02-23T16:42:30.531Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/12/01/关于STL里面函数简单的应用/15334646368898.jpg" alt=""></p><p><strong>代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line">    s.insert(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i!=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这道题目的主要做法是记住几个upper_bound 的STL函数</span></span><br><span class="line">        <span class="keyword">if</span>(t &lt; *s.rbegin()) &#123;</span><br><span class="line">            s.erase(*(s.upper_bound(t)));</span><br><span class="line">        &#125;</span><br><span class="line">        s.insert(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="acm" scheme="http://wsx1128.xyz/tags/acm/"/>
    
      <category term="c++" scheme="http://wsx1128.xyz/tags/c/"/>
    
      <category term="STL" scheme="http://wsx1128.xyz/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>条款08：别让异常逃离析构函数</title>
    <link href="http://wsx1128.xyz/2018/12/01/%E6%9D%A1%E6%AC%BE08%EF%BC%9A%E5%88%AB%E8%AE%A9%E5%BC%82%E5%B8%B8%E9%80%83%E7%A6%BB%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>http://wsx1128.xyz/2018/12/01/条款08：别让异常逃离析构函数/</id>
    <published>2018-12-01T15:26:24.000Z</published>
    <updated>2019-02-23T16:42:25.148Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>其实这一项条款没有领悟的很深刻，可以理解成不要再析构函数里面写捕获异常之类的代码。因为某些时候，如果在析构函数里面抓获异常导致程序终止的话，那么就可能造成对象不能完全被销毁</p><ol><li><p>析构函数绝对不要吐出异常，如果一个被析构函数调用的函数可能抛出异常的话，析构函数应该做的应该是捕捉任何异常，然后吞下他们（不传播）或者结束程序。</p></li><li><p>如果对象需要对摸个操作函数运行期间抛出的异常做出反应，那么 class 应该提供一个普通函数（不应该在析构函数里面）执行该任务。但是该析构函数里面仍然要进行双保险的析构过程，可以在类的内部定义里面加上一个 bool 变量来判断到底有没有运行析构行为，相当于一般写程序的一个 flag。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="C++" scheme="http://wsx1128.xyz/categories/C/"/>
    
    
      <category term="c++" scheme="http://wsx1128.xyz/tags/c/"/>
    
      <category term="effective C++" scheme="http://wsx1128.xyz/tags/effective-C/"/>
    
  </entry>
  
  <entry>
    <title>关于组合数学，两道思维题目，这里贴两道题目</title>
    <link href="http://wsx1128.xyz/2018/12/01/%E5%85%B3%E4%BA%8E%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%EF%BC%8C%E4%B8%A4%E9%81%93%E6%80%9D%E7%BB%B4%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%BF%99%E9%87%8C%E8%B4%B4%E4%B8%A4%E9%81%93%E9%A2%98%E7%9B%AE/"/>
    <id>http://wsx1128.xyz/2018/12/01/关于组合数学，两道思维题目，这里贴两道题目/</id>
    <published>2018-12-01T15:26:24.000Z</published>
    <updated>2019-02-23T16:42:09.062Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一道-简单的排列组合："><a href="#第一道-简单的排列组合：" class="headerlink" title="第一道 简单的排列组合："></a>第一道 简单的排列组合：</h2><p><img src="/2018/12/01/关于组合数学，两道思维题目，这里贴两道题目/15334551294656.jpg" alt=""></p><p><strong>题解如下：</strong></p><blockquote><p>题目大致可以理解为4堆牌a,b,c,d，每次从一堆牌里拿出牌顶的一张牌，问共有多少种拿法。其实我们可以一堆一堆的分析，假设只有一堆a时只有1种拿法，那两堆a,b时我们可以认为是从a个牌中插入b张牌，用数学表达式就是<strong>==C(b,a+b)==</strong>;那么三堆的话我们可以把前两堆看成一堆，那么表达式就是<strong>==C(c,a+b+c)==</strong>，这是我们需要与前两堆的组成方法相乘，就是<strong>==C(b,a+b)C(c,a+b+c)==</strong>。<br>4堆的话就是<strong>==C(b,a+b)C(c,a+b+c)C(d,a+b+c+d)==</strong>。<br>所以答案就是<strong>==C(a,a)C(b,a+b)C(c,a+b+c)C(d,a+b+c+d)==</strong>。<br>此外，有一公式==<strong>C(a,b)=C(a,b-1)+C(a-1,b-1)</strong>==，所以我们用数组来代替C(m,n)操作</p></blockquote><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">4</span>],sum[<span class="number">4</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//此处用到记忆化搜索，动态规划。</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxn*<span class="number">4</span>][maxn*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i!=<span class="number">4</span>*maxn;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//根据表格来看的确是每一行的第一个是1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="comment">//这个地方就是状态转移方程</span></span><br><span class="line">            <span class="comment">//C(a,b)=C(a,b-1)+C(a-1,b-1)根据公式来做的</span></span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            <span class="comment">//dp[i][j]=dp[i][j]%mod;</span></span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">        init();<span class="comment">//这个地方就开始初始化表格了。</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!i) sum[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> sum[i]=sum[i<span class="number">-1</span>];</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">            sum[i] += a[i];</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; sum[i]-a[i]) a[i]=sum[i]-a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i != <span class="number">4</span>; i++)&#123;</span><br><span class="line">            ans *= dp[sum[i]][a[i]];</span><br><span class="line">            <span class="comment">//ans %=mod;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二题-第一题的变式："><a href="#第二题-第一题的变式：" class="headerlink" title="第二题 第一题的变式："></a>第二题 第一题的变式：</h2><p><img src="/2018/12/01/关于组合数学，两道思维题目，这里贴两道题目/15334588459331.jpg" alt=""></p><p>题解如上，与上面一题有区别的地方就在于要有一个取模的操作</p><p><strong>代码如下</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">4</span>],sum[<span class="number">4</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//此处用到记忆化搜索，动态规划。</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxn*<span class="number">4</span>][maxn*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i!=<span class="number">4</span>*maxn;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//根据表格来看的确是每一行的第一个是1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="comment">//这个地方就是状态转移方程</span></span><br><span class="line">            <span class="comment">//C(a,b)=C(a,b-1)+C(a-1,b-1)根据公式来做的</span></span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            dp[i][j]=dp[i][j]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">        init();<span class="comment">//这个地方就开始初始化表格了。</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!i) sum[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> sum[i]=sum[i<span class="number">-1</span>];</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">            sum[i] += a[i];</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; sum[i]-a[i]) a[i]=sum[i]-a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i != <span class="number">4</span>; i++)&#123;</span><br><span class="line">            ans *= dp[sum[i]][a[i]];</span><br><span class="line">            ans %=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==以后学到后面再花时间来深究==</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="acm" scheme="http://wsx1128.xyz/tags/acm/"/>
    
      <category term="c++" scheme="http://wsx1128.xyz/tags/c/"/>
    
      <category term="组合数学" scheme="http://wsx1128.xyz/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>关于模拟与搜索的相应简单题目</title>
    <link href="http://wsx1128.xyz/2018/12/01/%E5%85%B3%E4%BA%8E%E6%A8%A1%E6%8B%9F%E4%B8%8E%E6%90%9C%E7%B4%A2%E7%9A%84%E7%9B%B8%E5%BA%94%E7%AE%80%E5%8D%95%E9%A2%98%E7%9B%AE/"/>
    <id>http://wsx1128.xyz/2018/12/01/关于模拟与搜索的相应简单题目/</id>
    <published>2018-12-01T15:26:24.000Z</published>
    <updated>2019-02-23T16:42:29.716Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>题目</strong><br><img src="/2018/12/01/关于模拟与搜索的相应简单题目/15338826192241.jpg" alt=""></p><p><strong>代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> w,v;</span><br><span class="line">    <span class="keyword">int</span> x,y,m;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;w&gt;&gt;v)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        reverse(w.begin(),w.end());</span><br><span class="line">        reverse(v.begin(),v.end());</span><br><span class="line">        <span class="keyword">if</span> (w.size()&gt;v.size())&#123;</span><br><span class="line">            m=w.size()-v.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i!=v.size();i++)&#123;</span><br><span class="line">                x=w[i]-<span class="string">'0'</span>;</span><br><span class="line">                y=v[i]-<span class="string">'0'</span>;</span><br><span class="line">                x+=y;</span><br><span class="line">                <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (x&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    x=x<span class="number">-10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ch=x+<span class="string">'0'</span>;</span><br><span class="line">                s.push_back(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i=v.size();</span><br><span class="line">            <span class="keyword">while</span> (flag==<span class="number">1</span>&amp;&amp;i&lt;=m)&#123;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">                x=w[i]-<span class="string">'0'</span>;</span><br><span class="line">                x++;</span><br><span class="line">                <span class="keyword">if</span> (x&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    x=x<span class="number">-10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ch=x+<span class="string">'0'</span>;</span><br><span class="line">                s.push_back(ch);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag&amp;&amp;i==w.size())&#123;</span><br><span class="line">                s.push_back(<span class="string">'1'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            m=v.size()-w.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i!=w.size();i++)&#123;</span><br><span class="line">                x=w[i]-<span class="string">'0'</span>;</span><br><span class="line">                y=v[i]-<span class="string">'0'</span>;</span><br><span class="line">                x+=y;</span><br><span class="line">                <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (x&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    x=x<span class="number">-10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ch=x+<span class="string">'0'</span>;</span><br><span class="line">                s.push_back(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i=w.size();</span><br><span class="line">            <span class="keyword">while</span> (flag&amp;&amp;i&lt;=m)&#123;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">                x=w[i]-<span class="string">'0'</span>;</span><br><span class="line">                x++;</span><br><span class="line">                <span class="keyword">if</span> (x&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    x=x<span class="number">-10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ch=x+<span class="string">'0'</span>;</span><br><span class="line">                s.push_back(ch);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag&amp;&amp;i==v.size())&#123;</span><br><span class="line">                s.push_back(<span class="string">'1'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(s.begin(),s.end());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>题解：</strong><br>其实这道题目属于一道相应简单的题目，就是要注意相应string与char之间的区别就行了。<br>另外 <code>int</code>转换<code>char</code>是加上‘0’<br><code>char</code>转换<code>int</code>是减去‘0’。</p><h2 id="一道简单的dfs的题目"><a href="#一道简单的dfs的题目" class="headerlink" title="一道简单的dfs的题目"></a>一道简单的dfs的题目</h2><p><img src="/2018/12/01/关于模拟与搜索的相应简单题目/15338976566985.jpg" alt=""></p><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">char</span> h[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">0</span>||i&gt;=n||h[i][j]!=<span class="string">'W'</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (j&lt;<span class="number">0</span>||j&gt;=m||h[i][j]!=<span class="string">'W'</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (h[i][j]==<span class="string">'W'</span>)&#123;</span><br><span class="line">        h[i][j]=<span class="string">'.'</span>;</span><br><span class="line">        dfs(i<span class="number">-1</span>,j);</span><br><span class="line">        dfs(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line">        dfs(i+<span class="number">1</span>,j);</span><br><span class="line">        dfs(i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">        dfs(i,j<span class="number">-1</span>);</span><br><span class="line">        dfs(i<span class="number">-1</span>,j+<span class="number">1</span>);</span><br><span class="line">        dfs(i,j+<span class="number">1</span>);</span><br><span class="line">        dfs(i+<span class="number">1</span>,j<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;(n!=<span class="number">0</span>&amp;&amp;m!=<span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i!=n;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j!=m;j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;h[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i!=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j!=m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (h[i][j]==<span class="string">'W'</span>)&#123;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题解简单的dfs搜索出每一种情况，然后让其返回就行了。</p><h2 id="一道经典的BFS的题目"><a href="#一道经典的BFS的题目" class="headerlink" title="一道经典的BFS的题目"></a>一道经典的BFS的题目</h2><p><strong>题目</strong><br><img src="/2018/12/01/关于模拟与搜索的相应简单题目/15346617217857.jpg" alt="-w780"></p><p><strong>代码如下:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fxy[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//朝着四个方向</span></span><br><span class="line"><span class="keyword">char</span> dis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> kp[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下的node就作为每一次前进的节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,cnt;</span><br><span class="line">    node(<span class="keyword">int</span> a=<span class="number">0</span>,<span class="keyword">int</span> b=<span class="number">0</span>,<span class="keyword">int</span> c=<span class="number">0</span>)&#123;</span><br><span class="line">        x=a; y=b; cnt=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n,k,g,k1,g1;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;m,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,dis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//      用队列整合的思想来完成</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;struct node&gt;q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                kp[i][j]=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//      两种初始化过程，并且找到起点与终点的所在位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[i][j]==<span class="string">'S'</span>)&#123;</span><br><span class="line">                    k=i;</span><br><span class="line">                    g=j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(dis[i][j]==<span class="string">'E'</span>)&#123;</span><br><span class="line">                    k1=i;</span><br><span class="line">                    g1=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//        将起点存进去</span></span><br><span class="line">        <span class="function">node <span class="title">a</span><span class="params">(k,g,<span class="number">0</span>)</span></span>;</span><br><span class="line">        q.push(a);</span><br><span class="line">        <span class="comment">//        下面就是为bfs的相应搜索</span></span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">now</span>=<span class="title">q</span>.<span class="title">front</span>();</span></span><br><span class="line">            q.pop();</span><br><span class="line">            kp[now.x][now.y]=now.cnt;</span><br><span class="line">            <span class="comment">//            将起点走了多少步数以及起点的坐标点存入到题目中去</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                node next;</span><br><span class="line">                next.x=now.x+fxy[i][<span class="number">0</span>];</span><br><span class="line">                next.y=now.y+fxy[i][<span class="number">1</span>];</span><br><span class="line">                <span class="comment">//                判断走的下一步有没有出界，或者使下一步走的不会碰到路障</span></span><br><span class="line">                    <span class="keyword">if</span>(next.x&gt;=<span class="number">0</span>&amp;&amp;next.x&lt;m&amp;&amp;next.y&gt;=<span class="number">0</span>&amp;&amp;next.y&lt;n&amp;&amp;dis[next.x][next.y]!=<span class="string">'#'</span>&amp;&amp;kp[next.x][next.y]==<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="function">node <span class="title">empt</span><span class="params">(next.x,next.y,now.cnt+<span class="number">1</span>)</span></span>;</span><br><span class="line">                    q.push(empt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(kp[k1][g1]==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"Trapped!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Escaped in %d minute(s).\n"</span>,kp[k1][g1]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>记住上面相应的队列思想。</p><h2 id="一道DFS与BFS的综合题"><a href="#一道DFS与BFS的综合题" class="headerlink" title="一道DFS与BFS的综合题"></a>一道DFS与BFS的综合题</h2><p>==需要多花时间来温习一遍==</p><p><strong>题目</strong><br><img src="/2018/12/01/关于模拟与搜索的相应简单题目/15346690956114.jpg" alt=""></p><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x_begin,x_end,y_begin,y_end;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> ch[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Position</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> distance;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Position() = <span class="keyword">default</span>;</span><br><span class="line">    Position(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c):x(a),y(b),distance(c)&#123;&#125;;</span><br><span class="line">    <span class="function">Position <span class="title">move</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Position Position::move(<span class="keyword">int</span> i)&#123;</span><br><span class="line">    Position post = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)         post.x = <span class="keyword">this</span> -&gt; x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>)    post.x = <span class="keyword">this</span> -&gt; x - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)    post.y = <span class="keyword">this</span> -&gt; y + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>)    post.y = <span class="keyword">this</span> -&gt; y - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> post;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Position&gt;q_dis;</span><br><span class="line">    <span class="function">Position <span class="title">p_begin</span> <span class="params">(x_begin,y_begin,<span class="number">0</span>)</span></span>;</span><br><span class="line">    q_dis.push(p_begin);</span><br><span class="line">    <span class="keyword">while</span>(!q_dis.empty())&#123;</span><br><span class="line">        Position now = q_dis.front();</span><br><span class="line">        q_dis.pop();</span><br><span class="line">        dis[now.x][now.y]=now.distance;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">4</span>; i++)&#123;</span><br><span class="line">            Position next;</span><br><span class="line">            next = now.move(i);</span><br><span class="line">            <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; n &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; m &amp;&amp;</span><br><span class="line">                dis[next.x][next.y] == <span class="number">-1</span> &amp;&amp; ch[next.x][next.y] != <span class="string">'#'</span>)&#123;</span><br><span class="line">                <span class="function">Position <span class="title">empt</span> <span class="params">(next.x,next.y,now.distance + <span class="number">1</span>)</span></span>;</span><br><span class="line">                q_dis.push(empt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (ch[x][y]==<span class="string">'L'</span>)  &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dis[x][y] == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//  前面已经有dis可以表示每一步走的距离，所以只需要一步一步来看，这样的做法便可以完全规避障碍物，单单从路径上面考虑。</span></span><br><span class="line">    <span class="keyword">if</span> (dis[x][y]==dis[x+<span class="number">1</span>][y]+<span class="number">1</span>)   dfs(x+<span class="number">1</span>,y);</span><br><span class="line">    <span class="keyword">if</span> (dis[x][y]==dis[x<span class="number">-1</span>][y]+<span class="number">1</span>)   dfs(x<span class="number">-1</span>,y);</span><br><span class="line">    <span class="keyword">if</span> (dis[x][y]==dis[x][y+<span class="number">1</span>]+<span class="number">1</span>)   dfs(x,y+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (dis[x][y]==dis[x][y<span class="number">-1</span>]+<span class="number">1</span>)   dfs(x,y<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,Case = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        Case++;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">        <span class="keyword">bool</span> f_begin = <span class="literal">false</span>,f_end = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; ch[i][j];</span><br><span class="line">                dis[i][j] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (f_end &amp;&amp; f_begin)   <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (ch[i][j] == <span class="string">'L'</span>)&#123;</span><br><span class="line">                    x_begin = i;</span><br><span class="line">                    y_begin = j;</span><br><span class="line">                    f_begin = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ch[i][j] == <span class="string">'C'</span>)&#123;</span><br><span class="line">                    x_end = i;</span><br><span class="line">                    y_end = j;</span><br><span class="line">                    f_end = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="keyword">if</span> (dis[x_end][y_end] == <span class="number">-1</span> ||dis[x_end][y_end] &gt; k )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span>&lt;&lt;Case&lt;&lt;<span class="string">": "</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dfs(x_end,y_end);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;Case&lt;&lt;<span class="string">": "</span>&lt;&lt;dis[x_end][y_end]&lt;&lt;<span class="string">" "</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注明一下关于==默认实参==的知识点，因为在这个地方可以直接对类的构造函数赋值一个默认实参，可以避免输入默认构造函数了。</p><p>下面则是一道DFS的题目，这道题目看上去可以用bfs来做</p><p><img src="/2018/12/01/关于模拟与搜索的相应简单题目/15351254685296.jpg" alt="-w1003"></p><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> road[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i][j] != <span class="number">-1</span>)   <span class="keyword">return</span> dp[i][j];</span><br><span class="line">    <span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; road[i][j]&gt;road[i<span class="number">-1</span>][j]&amp;&amp;Max&lt;dfs(i<span class="number">-1</span>,j))</span><br><span class="line">        Max = dfs(i<span class="number">-1</span>,j);</span><br><span class="line">    <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n &amp;&amp; road[i][j]&gt;road[i+<span class="number">1</span>][j]&amp;&amp;Max&lt;dfs(i+<span class="number">1</span>,j))</span><br><span class="line">        Max=dfs(i+<span class="number">1</span>,j);</span><br><span class="line">    <span class="keyword">if</span>(j<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; road[i][j]&gt;road[i][j<span class="number">-1</span>]&amp;&amp;Max&lt;dfs(i,j<span class="number">-1</span>))</span><br><span class="line">        Max=dfs(i,j<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(j+<span class="number">1</span>&lt;m &amp;&amp; road[i][j]&gt;road[i][j+<span class="number">1</span>]&amp;&amp;Max&lt;dfs(i,j+<span class="number">1</span>))</span><br><span class="line">        Max=dfs(i,j+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> dp[i][j]=Max+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; road[i][j];</span><br><span class="line">                dp[i][j] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> MAX = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                MAX = max (dfs(i,j),MAX);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; MAX &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>此题其实最重要的就在于这个题目不同于其他题目，这个题目找的是最长路径，还不是最短路径，一般来说，BFS找的是最短路径，DFS找的是最短路径的条数。<br>而这里就是利用dfs的返回值（每走一步的最大值，意思就是从各个角度上）记录在dp中，将每一个位置都走到不能走为止，然后存储在dp中，最后找最大值的DP即可。<br>不过自己可以试试遍历的其他方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="acm" scheme="http://wsx1128.xyz/tags/acm/"/>
    
      <category term="c++" scheme="http://wsx1128.xyz/tags/c/"/>
    
      <category term="模拟与搜索" scheme="http://wsx1128.xyz/tags/%E6%A8%A1%E6%8B%9F%E4%B8%8E%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>数据结构相应总结</title>
    <link href="http://wsx1128.xyz/2018/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9B%B8%E5%BA%94%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.xyz/2018/12/01/数据结构相应总结/</id>
    <published>2018-12-01T15:26:24.000Z</published>
    <updated>2019-02-23T16:42:09.732Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ol><li><p>栈的概念<br>此处只需要记住栈的思想最重要的就是<strong>先进后出</strong>思想，也就是最先进去的最后出来。<br><img src="/2018/12/01/数据结构相应总结/15332206965126.jpg" alt=""></p></li><li><p>两种方法表示这种栈的实现</p></li></ol><ul><li>第一种则是 直接用c语言实现，采用一个一维数组来存储栈，用两个指针一个指向栈顶，另一个指向栈底。用top=bottom作为栈空的标记或者说是栈遍历完毕的标记。</li><li>第二种就是直接用C++里面STL模板<br>首先先定义一个<code>stack&lt;int&gt; s</code> 然后以下就是其的操作。   </li></ul><p><strong>注意其不能使用push_back只能使用push</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.pop()         删除栈顶元素，也就是出栈的作，把刚刚进来的元素出栈,不返回元素值。</span><br><span class="line">s.push()        创建一个新元素压入栈顶，可以通过拷贝，移动，甚至是构造而来。</span><br><span class="line">s.top()         返回栈顶的元素，也就是刚刚进来的元素。</span><br><span class="line">s.bottom()      返回栈底的元素，也就是最后一个元素</span><br></pre></td></tr></table></figure><h2 id="队列适配器"><a href="#队列适配器" class="headerlink" title="队列适配器"></a>队列适配器</h2><p>队列这里分为两种一种是普通队列，还有一种是特殊排列好的优先队列，但是这二者的区别就在于，虽然都符合先进先出的思想，但是前者是不加任何排序的先进先出，而后者就是让代码编辑者<strong>自己定义一种排序方式</strong>，然后通过这种排序方式，再来出队操作。</p><p>与上面一样，先定义一个<code>queue&lt;int&gt; q</code>与<code>priority_queue&lt;int&gt; q</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">q.pop()         按照先进先出的思想，删除首元素或者优先级最高的元素</span><br><span class="line">q.front()       返回首元素。</span><br><span class="line">q.back()        返回尾元素。</span><br><span class="line">以上两个是只适用于队列。</span><br><span class="line">q.top()         返回优先队列中优先级最高的元素。</span><br><span class="line">q.push()</span><br><span class="line">q.emplace()     加入元素到队尾，或者优先队列中一个恰当的位置，要么构造，要么拷贝。</span><br></pre></td></tr></table></figure><p>这里需要提一下==优先队列的构造方法==以及==优先队列的特殊排序==应该怎么构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">下面两种优先队列的定义是等价的</span><br><span class="line">priority_queue&lt;int&gt; q;</span><br><span class="line">priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt; &gt;;//后面有一个空格</span><br><span class="line">默认都是从小到大排序</span><br><span class="line">接受三个参数，</span><br><span class="line">第一个参数为数据类型，</span><br><span class="line">第二个参数为承载容器的类型，</span><br><span class="line">第三个就是自定义的比较函数了。</span><br><span class="line">可以使lamda匿名函数，也可以是function头文件里面的函数模板。</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>特点：自定义，不连续的。<br>同时链表也是后面相应树形结构的基础<br>实际上就是把每一个不连续的内存空间连在一起，可以认为的控制进程<br>这个需要自己改天把链表的遍历，删除，增加自己再写一遍，因为不是什么新东西，所以这里就不多说了</p><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><p>这里就是vector 存在的意义了 vector里面重要的概念 容量，长度。</p><h2 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h2><h3 id="一般的树"><a href="#一般的树" class="headerlink" title="一般的树"></a>一般的树</h3><p><img src="/2018/12/01/数据结构相应总结/15332616324155.jpg" alt=""></p><p><img src="/2018/12/01/数据结构相应总结/15332617338919.jpg" alt=""></p><p>以上就是一般树的形态。<br>下面则是关于树的基本用语。<br><img src="/2018/12/01/数据结构相应总结/15332619052693.jpg" alt=""><br>关于上面重要的概念就是结点和结点的度了。</p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><h5 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义:"></a>二叉树的定义:</h5><p><img src="/2018/12/01/数据结构相应总结/15332622735630.jpg" alt=""></p><h5 id="二叉树有五种基本形态："><a href="#二叉树有五种基本形态：" class="headerlink" title="二叉树有五种基本形态："></a>二叉树有五种基本形态：</h5><p><img src="/2018/12/01/数据结构相应总结/15332623676250.jpg" alt=""> </p><h6 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质:"></a>二叉树的性质:</h6><p><img src="/2018/12/01/数据结构相应总结/15332624449232.jpg" alt=""><br>上面所写到的==至多==都是由于将其当成了满二叉树来进行计算的。</p><h5 id="满二叉树与完全二叉树"><a href="#满二叉树与完全二叉树" class="headerlink" title="满二叉树与完全二叉树"></a>满二叉树与完全二叉树</h5><p><img src="/2018/12/01/数据结构相应总结/15332628389372.jpg" alt=""><br>前者全部都有子节点，后者基于深度为k的基础上，编号从1到n的结点一一对应。<br><strong>完全二叉树是满二叉树的一部分，而满二叉树是完全二叉树的特例。</strong></p><p>#####二叉树的存储结构：</p><ol><li><p>数组存储：<br><img src="/2018/12/01/数据结构相应总结/15332634147466.jpg" alt=""></p></li><li><p>二叉链式存储（原理类似链表）：<br><img src="/2018/12/01/数据结构相应总结/15332635553287.jpg" alt=""><br>将链表内部的*next，变成了指向两边的子节点的指针。</p></li><li><p>三叉链式存储：<br><img src="/2018/12/01/数据结构相应总结/15332636549533.jpg" alt=""><br><strong>比二叉链式结构多了一个回指向父节点的指针。</strong></p></li></ol><p><img src="/2018/12/01/数据结构相应总结/15332637977616.jpg" alt=""></p><h5 id="遍历二叉树的方法"><a href="#遍历二叉树的方法" class="headerlink" title="遍历二叉树的方法"></a>遍历二叉树的方法</h5><ol><li><p>先序遍历（根-&gt;左-&gt;右）：<br><img src="/2018/12/01/数据结构相应总结/15332639610611.jpg" alt=""></p><p> 代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, T-&gt;data);</span><br><span class="line">        PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 图示：<br> <img src="/2018/12/01/数据结构相应总结/15332640892406.jpg" alt="">        </p><p> 最终结果就是==ABDGHCEIF==。</p></li><li><p>中序遍历（左-&gt;根-&gt;右)：<br> 若二叉树为空，则空操作返回，否则从根节点开始（注意不是先访问根节点），中序遍历根节点的左子树，然后是访问根节点，最后中序遍历右子树。</p><p> 代码：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, T-&gt;data);</span><br><span class="line">        PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 最终结果为==GDHBAEICF==。</p></li><li><p>后序遍历（左-&gt;右-&gt;根）<br> 若二叉树为空，则空操作返回，否则从根节点开始（注意不是先访问根节点），中序遍历根节点的左子树，然后是访问根节点，最后中序遍历右子树。</p><p> 代码：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line">      PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">      PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%c"</span>, T-&gt;data);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 最终结果为==GHDBIEFCA==。</p></li></ol><h5 id="关于二叉树的建立代码："><a href="#关于二叉树的建立代码：" class="headerlink" title="关于二叉树的建立代码："></a>关于二叉树的建立代码：</h5><p>代码我等下自己写出来。</p><hr><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><p>   图结构：是研究数据元素之间的多对多的关系。在这种结构中，任意两个元素之间可能存在关系。即结点之间的关系可以是任意的，图中任意元素之间都可能相关。</p><h3 id="图的专业术语："><a href="#图的专业术语：" class="headerlink" title="图的专业术语："></a>图的专业术语：</h3><p><img src="/2018/12/01/数据结构相应总结/15332695761126.jpg" alt="">    </p><p><img src="/2018/12/01/数据结构相应总结/15332695489735.jpg" alt=""></p><p><img src="/2018/12/01/数据结构相应总结/15332696082443.jpg" alt=""></p><p><img src="/2018/12/01/数据结构相应总结/15332696413788.jpg" alt=""></p><p><img src="/2018/12/01/数据结构相应总结/15332696550432.jpg" alt=""></p><h3 id="图-生成树"><a href="#图-生成树" class="headerlink" title="图-生成树"></a>图-生成树</h3><p><img src="/2018/12/01/数据结构相应总结/15332696984237.jpg" alt=""></p><p><img src="/2018/12/01/数据结构相应总结/15332697115073.jpg" alt=""><img src="/2018/12/01/数据结构相应总结/15332697228263.jpg" alt=""></p><h3 id="邻接矩阵的表示方法（数组）"><a href="#邻接矩阵的表示方法（数组）" class="headerlink" title="邻接矩阵的表示方法（数组）"></a>邻接矩阵的表示方法（数组）</h3><h4 id="不带权值的表示方法"><a href="#不带权值的表示方法" class="headerlink" title="不带权值的表示方法"></a>不带权值的表示方法</h4><p><img src="/2018/12/01/数据结构相应总结/15332704000437.jpg" alt=""></p><p><img src="/2018/12/01/数据结构相应总结/15332704263688.jpg" alt=""></p><p><strong>一般就是用二维数组来表示每一个结点之间的关系</strong></p><p><img src="/2018/12/01/数据结构相应总结/15332705567207.jpg" alt=""> <img src="/2018/12/01/数据结构相应总结/15332705659456.jpg" alt=""></p><p>关于图的遍历就最好用一个bool 类型的同二维数组 然后通过这个来标记哪些是否已经被遍历过得。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="acm" scheme="http://wsx1128.xyz/tags/acm/"/>
    
      <category term="数据结构" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数论基础第一节</title>
    <link href="http://wsx1128.xyz/2018/12/01/%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    <id>http://wsx1128.xyz/2018/12/01/数论基础第一节/</id>
    <published>2018-12-01T15:26:24.000Z</published>
    <updated>2019-02-23T16:42:11.048Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>初等数论是用初等方法研究的数论，它的研究方法本质上说，就是利用整数环的整除性质，主要包括整除理论、同余理论、连分数理论。</p><h2 id="整除问题引申到同余问题"><a href="#整除问题引申到同余问题" class="headerlink" title="整除问题引申到同余问题"></a>整除问题引申到同余问题</h2><ul><li><strong>同余的性质</strong></li></ul><p><img src="/2018/12/01/数论基础第一节/15343075827029.jpg" alt=""><br>可以换算成以下式子：<br><strong>a=c(<code>mod</code>b) 这里c为余数，而b为除数</strong></p><ul><li><strong>同余的性质</strong></li></ul><ol><li>自反性 a=a <code>mod</code> m</li><li>对称性 a=b <code>mod</code> m 等价于 b=a <code>mod</code> m</li><li>传递性 a=b <code>mod</code> m 与 b=c <code>mod</code> m 等价于 a=c <code>mod</code> m</li><li>线性合成 a=b <code>mod</code> m 与 c= <code>mod</code> m 等价于 a±c=b±d <code>mod</code> m 与 ac= bd <code>mod</code> m</li><li>消去公因子 ac=bc <code>mod</code> m &amp;&amp; gcd(c,m)=1 等价于 a=b <code>mod</code> m </li></ol><h2 id="素数筛"><a href="#素数筛" class="headerlink" title="素数筛"></a>素数筛</h2><ul><li>朴素筛 一般就是循环2~√n次</li><li>埃拉托斯特尼筛</li></ul><p><strong>循环次数</strong><br><img src="/2018/12/01/数论基础第一节/15343091959776.jpg" alt=""></p><ul><li>欧拉筛</li><li><img src="/2018/12/01/数论基础第一节/15343092628399.jpg" alt=""></li></ul><p><strong>相应代码如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="最大公约数以及最小公倍数"><a href="#最大公约数以及最小公倍数" class="headerlink" title="最大公约数以及最小公倍数"></a>最大公约数以及最小公倍数</h2><ul><li><p>最大公约数 函数_gcd(a,b)<br>而多个数的最大公约数 就是 _gcd(a,b,c)=_gcd(gcd(a,b),c)</p></li><li><p>最小公倍数<br>_lcm(a,b)=ab/_gcd(a,b)</p></li></ul><h2 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h2><p><img src="/2018/12/01/数论基础第一节/15343099257598.jpg" alt=""></p><ul><li>关于求解线性同余方程<br><img src="/2018/12/01/数论基础第一节/15343099683275.jpg" alt=""></li><li><p>关于求逆元<br><img src="/2018/12/01/数论基础第一节/15343099966167.jpg" alt=""></p></li><li><p>关于快速幂<br><img src="/2018/12/01/数论基础第一节/15343101054154.jpg" alt=""></p></li></ul><h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><p><img src="/2018/12/01/数论基础第一节/15343101566104.jpg" alt=""></p><p><strong>另外</strong><br><img src="/2018/12/01/数论基础第一节/15343103411689.jpg" alt=""></p><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><ul><li><strong>欧拉函数定义</strong><br><img src="/2018/12/01/数论基础第一节/15343107143861.jpg" alt=""></li></ul><ul><li><p><strong>欧拉函数性质</strong><br><img src="/2018/12/01/数论基础第一节/15343107974985.jpg" alt=""></p></li><li><p><strong>求值公式</strong> </p></li></ul><ol><li><img src="/2018/12/01/数论基础第一节/15343109562640.jpg" alt=""></li><li><img src="/2018/12/01/数论基础第一节/15343109655205.jpg" alt=""></li><li><img src="/2018/12/01/数论基础第一节/15343109780637.jpg" alt=""><br>上述公式 可以用来：</li></ol><ul><li><p><strong>求逆元</strong><br><img src="/2018/12/01/数论基础第一节/15343110433806.jpg" alt=""></p></li><li><p><strong>欧拉降幂公式</strong><br><img src="/2018/12/01/数论基础第一节/15343111460573.jpg" alt=""></p></li></ul><h2 id="数论函数"><a href="#数论函数" class="headerlink" title="数论函数"></a>数论函数</h2><p><img src="/2018/12/01/数论基础第一节/15343114512818.jpg" alt=""></p><ul><li><strong>中国剩余定理</strong></li></ul><p><img src="/2018/12/01/数论基础第一节/15343114886344.jpg" alt=""></p><p><strong>解法</strong><br><img src="/2018/12/01/数论基础第一节/15343115089655.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="acm" scheme="http://wsx1128.xyz/tags/acm/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数论" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>STL的简单总结</title>
    <link href="http://wsx1128.xyz/2018/12/01/STL%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.xyz/2018/12/01/STL的简单总结/</id>
    <published>2018-12-01T15:26:24.000Z</published>
    <updated>2019-02-23T16:42:05.698Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>补一个加快C++输入输出速度的方法：<br><img src="/2018/12/01/STL的简单总结/15335220029444.jpg" alt=""></p><p>花上一天的时间来总结 C++ primer 里面的算法以及容器这一章，多余的用法可以上网去查找当做是相应的扩展。</p><h2 id="字符串-string与字符数组"><a href="#字符串-string与字符数组" class="headerlink" title="字符串 string与字符数组"></a>字符串 string与字符数组</h2><ul><li><p><strong>构造<code>string</code>的方法</strong><br><img src="/2018/12/01/STL的简单总结/15335169766308.jpg" alt=""></p></li><li><p><strong>操作<code>string</code>的方法</strong></p></li></ul><p><img src="/2018/12/01/STL的简单总结/15335172798374.jpg" alt=""><br><img src="/2018/12/01/STL的简单总结/15335172954262.jpg" alt=""><br>上面的成员函数有的说要返回，同时，有的也存在不返回值。</p><ul><li><strong>搜索<code>string</code>的方法</strong></li></ul><p><img src="/2018/12/01/STL的简单总结/15335179836529.jpg" alt=""></p><p><img src="/2018/12/01/STL的简单总结/15335179990314.jpg" alt=""></p><p>以上就是find函数的一些用法，在泛型算法一章，还会继续涉及到。<br><strong>题目返回的是下标</strong></p><p>补充一下关于<code>string</code>中的比较函数<br><img src="/2018/12/01/STL的简单总结/15335183199373.jpg" alt=""><br>一般在string中可以直接用运算符进行比较</p><ul><li><strong><code>int</code>与<code>string</code>之间的转化</strong></li></ul><p><img src="/2018/12/01/STL的简单总结/15335184125849.jpg" alt=""></p><ul><li><strong><code>getline()</code>的两种写法</strong><br><img src="/2018/12/01/STL的简单总结/15334343361243.jpg" alt=""><br>注意在<code>cin&gt;&gt;t</code>;必须要一个<code>getchar()</code>来吞掉其前面的回车符号。<br>之后才能用<code>getline()</code>。</li></ul><h2 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h2><ul><li><strong>容器种类</strong><br><img src="/2018/12/01/STL的简单总结/15334679972152.jpg" alt=""></li></ul><p><code>vector&lt;vector&lt;int&gt; &gt;</code>来表示二维数组。</p><ul><li><strong>容器基础操作</strong><br><img src="/2018/12/01/STL的简单总结/15334684459041.jpg" alt=""><br>补充一个assign的用法：<br>允许从一个不同但相容的类型里面去赋值，或者从容器的一个子序列赋值。</li></ul><p><img src="/2018/12/01/STL的简单总结/15334692047908.jpg" alt=""><br>还有第二个版本：<br>接受一个整型值和一个元素值，用指定数目且具有相同给定元素替换容器中原有的元素：<br><img src="/2018/12/01/STL的简单总结/15334693472336.jpg" alt=""></p><p>再补充一个resize的用法：<br><img src="/2018/12/01/STL的简单总结/15335166722769.jpg" alt=""></p><p>需要记住有一些类型声明可以直接用<code>auto</code>。</p><p>初始化有两种一种<strong>直接初始化</strong>和<strong>拷贝初始化</strong>。</p><ul><li><strong>顺序容器添加元素</strong><br><img src="/2018/12/01/STL的简单总结/15334697068572.jpg" alt=""><br>上面已经列出了各种形式的插入。<br>插入是在迭代器指向的元素之前插入。插入想要插入的元素前面，比如说<code>push_back</code>是插入到了尾后迭代器的前面。<br>而返回的是新添加的第一个元素的迭代器，同样也可也==不返回==。</li></ul><p>这里要注意的是<code>push_front</code>会改变整个容器的迭代器指向，而<code>push_back</code>不会。</p><ul><li><strong>访问元素</strong></li></ul><p><img src="/2018/12/01/STL的简单总结/15334703127503.jpg" alt=""></p><p>链表，单向链表，栈，队列都不支持随机访问，也就不支持下标访问了。</p><ul><li><strong>删除元素</strong><br><img src="/2018/12/01/STL的简单总结/15334705958004.jpg" alt=""></li></ul><p>删除的是迭代器指向的元素，返回的是删除元素的后迭代器也就是被删除的元素下一个元素的前面的迭代器，同样也可以不返回。</p><p><em>这里需要注意的就是删除一个元素之后，必定会改变原容器中迭代器的指向，所以务必小心（除了<code>pop_back</code>）</em></p><ul><li><strong>改变容器大小的操作</strong></li></ul><p><img src="/2018/12/01/STL的简单总结/15335167464723.jpg" alt=""></p><ul><li><strong>特殊的forward_list（单向链表）</strong></li></ul><p><img src="/2018/12/01/STL的简单总结/15334712839686.jpg" alt=""></p><p>由于迭代器的添加删除操作都涉及到了首前和尾后，所以对于单向链表来说这里添加了一个首前迭代器<code>before_begin</code><br>而对于单向链表的插入而言 是在元素的后面进行插入，删除也是一样，指向都是迭代器指向元素之后的元素。</p><h2 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h2><p><img src="/2018/12/01/STL的简单总结/15335188187528.jpg" alt=""></p><ul><li>**关联容器里面的<code>pair</code></li></ul><p><img src="/2018/12/01/STL的简单总结/15335191398555.jpg" alt=""></p><ul><li><strong>关联容器的操作</strong></li></ul><p><img src="/2018/12/01/STL的简单总结/15335192848295.jpg" alt=""></p><ul><li><strong>关联容器的添加操作</strong></li></ul><p><img src="/2018/12/01/STL的简单总结/15335195440945.jpg" alt=""></p><p>一般都是直接用下标操作添加<code>map</code>里面的操作。<br><code>at</code>操作只能判断存不存在</p><ul><li><strong>关联容器的删除操作</strong></li></ul><p><img src="/2018/12/01/STL的简单总结/15335202245929.jpg" alt=""></p><ul><li><strong>关联容器的访问操作</strong></li></ul><p><img src="/2018/12/01/STL的简单总结/15335205177307.jpg" alt=""><br>上面关于排序的操作不适用于无序的关联容器。</p><p><strong>当允许关键词重复的multimap中查找元素时，一般使用find函数与count函数同时进行。</strong></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>大部分函数算法都放在<code>&lt;algorithm&gt;</code>的头文件里面了。<br>还有一些数值算法是放在了<code>&lt;numeric&gt;</code>的头文件里面。</p><ul><li><strong>只读算法</strong></li></ul><p>accumulate 求和算法，接受三个参数，前面两个参数是累加范围，第三个是和的初值。<br>equal 判断两个序列里面是否所有的值都相同。<br>后面网上查找 有的再补充。<br>find算法<br>binary_search()二分查找函数<br>find_end()最后一次出现算法<br>find_first_of()第一次出现的算法<br>find_if ()第三个参数就为自定义函数搜索<br>lower_bound()第一个不小于的元素<br>upper_bound()第一个大于的元素<br>count（）算法 计算出现次数<br>count_if（）函数自定义计数</p><ul><li><strong>写容器的算法</strong></li></ul><p>fill 填充算法 类似于memset函数前者在于可以赋值赋任何值，而后者理论上只能赋值0或者1或者0x3f3f3f3f。<br>fill_n也是三个参数，第一个是开始点，第二个是赋值数目，第三个为赋值初始化。<br>copy 拷贝算法，接收三个迭代器，前面两个表示输入范围，第三个为拷贝目标序列的起点。<br>replace 替换算法，将目标序列里面的某些值更改成某些值，接受四个参数，前面两个是目标序列的范围，第三个是要搜索的值，第四个是要将搜索到的第三个的值更改后的值。<br>remove 去除掉函数里面包括的参数的元素。<br>remove_if 自定义。<br>remove_copy 拷贝结果。<br>swap（）交换两个对象的值。<br>swap_range()交换两个序列的值。</p><ul><li><strong>重排容器的算法</strong></li></ul><p>其排序的算法中，定义的排序方式就在于自定义函数传入算法中。<br>有三种自定义函数：</p><ol><li>普通bool型自定义函数，比较排列顺序。</li><li>lambda 匿名小函数。</li><li>bind 函数 绑定谓词。灵活的应用自定义函数。</li></ol><p>unique 将容器中所有重复的值全部排列到后面去，接受目标序列的迭代器范围，返回指向第一个重复元素的迭代器。<br>sort 排序 本质上运用的是快速排序。<br>stable_sort 本质上运动的是归并排序。<br>stable_partition 前面进行排序后，把自定义排列的分割开来。<br>reverse 倒排函数。<br>reverse_copy 倒排函数。<br>rotate 接受三个参数，前面两个是要往后面排的范围。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul><li><p><strong>插入迭代器</strong><br>back_inserter 类似于push_back的迭代器，创建并且使用<br>front_inserter 创建并且使用一个push_front的迭代器<br>inserter 创建一个普通插入的迭代器</p></li><li><p><strong>流迭代器</strong><br>istream_iterator 输入迭代器<br><img src="/2018/12/01/STL的简单总结/15335260532129.jpg" alt=""></p></li></ul><p>ostream_iterator 输出迭代器<br><img src="/2018/12/01/STL的简单总结/15335260817218.jpg" alt=""></p><ul><li><strong>反向迭代器</strong><br>reverse_iterator</li><li><strong>移动迭代器</strong><br>后面复习到在总结 移动、拷贝、右值引用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="C++" scheme="http://wsx1128.xyz/categories/C/"/>
    
    
      <category term="acm" scheme="http://wsx1128.xyz/tags/acm/"/>
    
      <category term="数据结构" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="STL" scheme="http://wsx1128.xyz/tags/STL/"/>
    
  </entry>
  
</feed>
