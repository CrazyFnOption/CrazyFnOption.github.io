<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Magical Bean</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wsx1128.xyz/"/>
  <updated>2019-03-26T13:45:50.467Z</updated>
  <id>http://wsx1128.xyz/</id>
  
  <author>
    <name>五光君</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>effective java item 5</title>
    <link href="http://wsx1128.xyz/2019/03/26/effective-java-item-5/"/>
    <id>http://wsx1128.xyz/2019/03/26/effective-java-item-5/</id>
    <published>2019-03-26T13:20:33.000Z</published>
    <updated>2019-03-26T13:45:50.467Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Item-5-Prefer-dependency-injection-to-hardwiring-resources"><a href="#Item-5-Prefer-dependency-injection-to-hardwiring-resources" class="headerlink" title="Item 5: Prefer dependency injection to hardwiring resources"></a>Item 5: Prefer dependency injection to hardwiring resources</h3><blockquote><p>Many classes depend on one or more underlying resources. For example, a spell checker depends on a dictionary. It is not uncommon to see such classes imple- mented as static utility classes (Item 4):</p></blockquote><p>有一些类依赖一些潜在的资源，就像一个字符串检查器 依靠字典，所以也就不是很特殊见到一些类被翻译成静态的工具类。</p><blockquote><p>Similarly, it’s not uncommon to see them implemented as singletons (Item 3):</p></blockquote><p>就像一些类直接被翻译成单一实例类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inappropriate use of singleton - inflexible &amp; untestable! </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary = ...; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SpellChecker</span><span class="params">(...)</span> </span>&#123;&#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> INSTANCE = <span class="keyword">new</span> SpellChecker(...); </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String word)</span> </span>&#123; ... &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">suggestions</span><span class="params">(String typo)</span> </span>&#123; ... &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource.</p></blockquote><p>静态的工具类和单一实体类，会在存在多种参数替换给基础资源，（就像上面的检查器有多种版本的字典资源一样），那么这些类就会变得特别不合适。</p><blockquote><p>A simple pattern that satisfies this requirement is to pass the resource into the constructor when creating a new instance. This is one form of dependency injection: the dictionary is a dependency of the spell checker and is injected into the spell checker when it is created.</p></blockquote><p>只有一种办法就是在构建的时候 构建函数里面直接给予相应的构造器，这样既维护了单实例化，又解决了上面多版本的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dependency injection provides flexibility and testability </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">(Lexicon dictionary)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.dictionary = Objects.requireNonNull(dictionary);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String word)</span> </span>&#123; ... &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">suggestions</span><span class="params">(String typo)</span> </span>&#123; ... &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>In summary, do not use a singleton or static utility class to implement a class that depends on one or more underlying resources whose behavior affects that of the class, and do not have the class create these resources directly. Instead, pass the resources, or factories to create them, into the constructor (or static factory or builder). This practice, known as dependency injection, will greatly enhance the flexibility, reusability, and testability of a class.</p></blockquote><p>总而言之，不要在实现一个静态工具类或者一个单实例类的时候的同时去实现一个多个资源替换的类，这样会影响其他的类，并且违背了这个类最先开始的本意，好的解决办法就是在类的构造函数里面加上该资源或者带上该工厂方法。</p><p>另外对于上面一个函数进行讲解<br>Objects.requireNonNull;<br>其的代码形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">   <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://wsx1128.xyz/categories/java/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="effective_java" scheme="http://wsx1128.xyz/tags/effective-java/"/>
    
  </entry>
  
  <entry>
    <title>effective java item 4</title>
    <link href="http://wsx1128.xyz/2019/03/16/effective-java-item-4/"/>
    <id>http://wsx1128.xyz/2019/03/16/effective-java-item-4/</id>
    <published>2019-03-16T01:13:09.000Z</published>
    <updated>2019-03-16T01:37:00.577Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Item-4-Enforce-noninstantiability-with-a-private-constructor"><a href="#Item-4-Enforce-noninstantiability-with-a-private-constructor" class="headerlink" title="Item 4: Enforce noninstantiability with a private constructor"></a>Item 4: Enforce noninstantiability with a private constructor</h3><p>强迫不能实例化的类，拥有一个私有的构造函数。</p><blockquote><p>Occasionally you’ll want to write a class that is just a grouping of static methods and static fields. Such classes have acquired a bad reputation because some people abuse them to avoid thinking in terms of objects, but they do have valid uses.</p></blockquote><p>也许有的时候，你需要写一个类，拥有一些静态的变量与函数，而当有人给这些类实例化的时候，这些类往往就具有一些不太好的口碑。因为这些类并不是当成对象，仅仅只是当成一个工具。</p><blockquote><p>(As of Java 8, you can also put such methods in the interface, assuming it’s yours to modify.) Lastly, such classes can be used to group methods on a final class, since you can’t put them in a subclass</p></blockquote><p>在java8的时候你可以把一些函数直接放在接口里面，而最近一些类可以帮用做是一系列的函数群，不过你不能将他们放到可以继承的子类里面去。</p><blockquote><p>Such utility classes were not designed to be instantiated: an instance would be nonsensical. In the absence of explicit constructors, however, the compiler pro- vides a public, parameterless default constructor. To a user, this constructor is indistinguishable from any other.</p></blockquote><p>而一些功能类型的类不是被设计成可实例化的，是因为实例化往往没有意思，而这个时候编译器会自动的提供公开且没有参数的构造函数，对于客户及其使用者而言，必须使这类构造函数隐藏起来。</p><blockquote><p>Attempting to enforce noninstantiability by making a class abstract does not work. The class can be subclassed and the subclass instantiated.</p></blockquote><p>然后仅仅只是强迫这些类变成抽象类是完全达不到效果的，因为这些类还会被继承，而继承其的子类往往还会被实例化。</p><blockquote><p>A default construc- tor is generated only if a class contains no explicit constructors, so a class can be made noninstantiable by including a private constructor:</p></blockquote><p>然后最后的结果就是只能给类安置一个私有的构造函数才能避免以上问题。</p><p>就像如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Noninstantiable utility class </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123; </span><br><span class="line">    <span class="comment">// Suppress default constructor for noninstantiability </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(); </span><br><span class="line">    &#125; </span><br><span class="line">    ...<span class="comment">// Remainder omitted </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://wsx1128.xyz/categories/java/"/>
    
    
      <category term="effective_java" scheme="http://wsx1128.xyz/tags/effective-java/"/>
    
  </entry>
  
  <entry>
    <title>effective java item 3</title>
    <link href="http://wsx1128.xyz/2019/03/15/effective-java-item-3/"/>
    <id>http://wsx1128.xyz/2019/03/15/effective-java-item-3/</id>
    <published>2019-03-15T12:35:45.000Z</published>
    <updated>2019-03-15T13:27:25.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"><a href="#Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type" class="headerlink" title="Item 3: Enforce the singleton property with a private constructor or an enum type"></a>Item 3: Enforce the singleton property with a private constructor or an enum type</h3><blockquote><p>A singleton is simply a class that is instantiated exactly once [Gamma95]. Single- tons typically represent either a stateless object such as a function (Item 24) or a system component that is intrinsically unique.</p></blockquote><p>首先先解释一下 singleton 这个是表示一个类只会被实例化一次的类，一般用于一些函数类型的功能，以及某些一同的独一无二的重要组成成分。</p><blockquote><p>There are two common ways to implement singletons. Both are based on keeping the constructor private and exporting a public static member to provide access to the sole instance. In one approach, the member is a final field</p></blockquote><p>现在有两种办法去实现这种单实例的情况，基于保证其的构造函数私有化，和输出公开静态成员来保护唯一的实例，一般这个实例都是final的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Singleton with public final field </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis(); </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123; ... &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123; ... &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的例子就是在静态加载的过程中就直接调用这个实例类的函数，外部无法直接去构造这个类，所以也就直接造成这个类只能够被访问一次。</p><blockquote><p>In the second approach to implementing singletons, the public member is a static factory method</p></blockquote><p>第二种方法获得这种单实例化的类，直接使用一个get类型的函数，也可以使用一种你那个懒惰标记的方法，直到调用的时候才开始实例化这个类。</p><blockquote><p>One advantage of the static factory approach is that it gives you the flexibility to change your mind about whether the class is a singleton without changing its API. The factory method returns the sole instance, but it could be modified to return, say, a separate instance for each thread that invokes it.</p></blockquote><p>第一个函数就是给你灵活性去改变这个类是否是单实例化，其的静态工厂方法是返回这个类的唯一实例，但是其很容易被修改，比如说为每一次调用该方法的线程返回一个唯一的实例。</p><blockquote><p>A second advantage is that you can write a generic singleton factory if your application requires it (Item 30). A final advantage of using a static factory is that a method reference can be used as a supplier, for example Elvis::instance is a Supplier<elvis>. Unless one of these advantages is relevant, the public field approach is preferable</elvis></p></blockquote><p>第二个好事就是你可以写一个泛型类型的单实例化类，如果你的应用就此要求的话。就此的方法可以把这个单实例化当成一种提供者。</p><blockquote><p>To make a singleton class that uses either of these approaches serializable (Chapter 12), it is not sufficient merely to add implements Serializable to its declaration. To maintain the singleton guarantee, declare all instance fields transient and provide a readResolve method (Item 89). Otherwise, each time a serialized instance is deserialized, a new instance will be created, leading, in the case of our example, to spurious Elvis sightings.</p></blockquote><p>为了保证每一次访问到类里面的，去获得一个”只读函数“，这样就防止每一次访问到这个类的时候不会再生成一个新的类，确确实实的保证了类的单一性。</p><blockquote><p>A third way to implement a singleton is to declare a single-element enum:</p></blockquote><p>第三种方法实现单实例化是生成一个单个元素的枚举类</p><blockquote><p>This approach is similar to the public field approach, but it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks. This approach may feel a bit unnatural, but a single-element enum type is often the best way to implement a singleton.</p></blockquote><p>这种类型的方法就是类似于类的变量方法，但是这个更精细，提供的机器内存消耗几乎就是免费的，并且提供（这里后面的一句话 英文没怎么看懂 自动标红）。 这种方法可能有点不自然，但是这种方法往往是实现这种单实例化最好的方法。</p><blockquote><p>Note that you can’t use this approach if your singleton must extend a superclass other than Enum (though you can declare an enum to implement interfaces).</p></blockquote><p>记住如果你需要用单实例化类去继承一个类的话，那么就不能使用这种单枚举的方法了。<br>其的样例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Enum singleton - the preferred approach </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Elvis &#123; </span><br><span class="line">    INSTANCE; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        ... </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://wsx1128.xyz/categories/java/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="effective_java" scheme="http://wsx1128.xyz/tags/effective-java/"/>
    
  </entry>
  
  <entry>
    <title>effective java item 2</title>
    <link href="http://wsx1128.xyz/2019/03/14/effective-java-item-2/"/>
    <id>http://wsx1128.xyz/2019/03/14/effective-java-item-2/</id>
    <published>2019-03-14T06:32:00.000Z</published>
    <updated>2019-03-15T12:35:21.020Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters"><a href="#Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters" class="headerlink" title="Item 2: Consider a builder when faced with many constructor parameters"></a>Item 2: Consider a builder when faced with many constructor parameters</h3><p>条款二 当面临许多构造参数的时候，建议考虑一下一个构造器(builder)</p><blockquote><p>What sort of constructors or static factories should you write for such a class? Traditionally, programmers have used the telescoping constructor pattern, in which you provide a constructor with only the required parameters, another with a single optional parameter, a third with two optional parameters, and so on, culmi- nating in a constructor with all the optional parameters.</p></blockquote><p>经常会遇到构造函数中有多个参数，而这些参数，如果按照标准的方法来写的话，会特别的麻烦，于是就采用C++中的委托构造函数，利用其中一个构造函数，为其他所有的构造函数构造，相当于起到了一个构造器的作用(builder)</p><blockquote><p>Typically this constructor invocation will require many parameters that you don’t want to set, but you’re forced to pass a value for them anyway. In this case, we passed a value of 0 for fat.</p></blockquote><p>很多时候你不想设置那么多的参数，最简单的一个办法是给这个成员直接设置0。</p><blockquote><p>In short, the telescoping constructor pattern works, but it is hard to write client code when there are many parameters, and harder still to read it. The reader is left wondering what all those values mean and must carefully count parameters to find out. Long sequences of identically typed parameters can cause subtle bugs. If the client accidentally reverses two such parameters, the compiler won’t complain, but the program will misbehave at runtime (Item 51).</p></blockquote><p>简而言之，这种委托构造函数虽然可行，但是客户在写代码的时候很容易写错，就算写对了，也很难读出来，并且也会出现一种情况就是当参数够多的时候，写错了参数的顺序，这样造成的错误，编译器是不会轻易报错的。所以这里就很难被找出来。</p><blockquote><p>A second alternative when you’re faced with many optional parameters in a constructor is the JavaBeans pattern, in which you call a parameterless construc- tor to create the object and then call setter methods to set each required parameter and each optional parameter of interest</p></blockquote><p>还有第二种办法就是 给每一个私有成员设置一个set函数，一个外围的函数直接可以作用到内部私有成员，并且直接设置其的值。</p><blockquote><p>Unfortunately, the JavaBeans pattern has serious disadvantages of its own.Because construction is split across multiple calls, a JavaBean may be in an inconsistent state partway through its construction. The class does not have the option of enforcing consistency merely by checking the validity of the constructor parameters. Attempting to use an object when it’s in an inconsistent state may cause failures that are far removed from the code containing the bug and hence difficult to debug.</p></blockquote><p>不幸的是，这种模式的代码写法，将构造过程与赋值过程分开，也就意味着，当构造对象并没有赋值的时候会造成错误，另外，其还会在写一个immutable类的时候花费额外的工作保证线程安全。</p><blockquote><p>Luckily, there is a third alternative that combines the safety of the telescoping constructor pattern with the readability of the JavaBeans pattern. It is a form of the Builder pattern [Gamma95]. Instead of making the desired object directly, the client calls a constructor (or static factory) with all of the required parameters and gets a builder object. Then the client calls setter-like methods on the builder object to set each optional parameter of interest. Finally, the client calls a parameterless build method to generate the object, which is typically immutable.</p></blockquote><p>幸运的是 这里存在第三种构造方式，结合上述两种方法的优点，并且保证了线程安全，也不会有过多的参数的麻烦。按照下述的例子，直接在内的内部构造一个静态的builder的类，用一个其他的类来构造这个类，第一解决了immutable的问题，其次也解决了参数不能特意的问题。</p><blockquote><p>This client code is easy to write and, more importantly, easy to read. The Builder pattern simulates named optional parameters as found in Python and Scala.</p><blockquote><p>NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8) .calories(100).sodium(35).carbohydrate(27).build();<br>Check invariants involving multiple parameters in the constructor invoked by the build method. To ensure these invariants against attack, do the checks on object fields after copying parameters from the builder (Item 50). If a check fails, throw an IllegalArgumentException (Item 72) whose detail message indicates which parameters are invalid (Item 75).</p></blockquote></blockquote><p>这样的做法会造成代码清晰可读，并且最重要的是，可以在构造器这个类型里面进行一个check函数进行异常检查。</p><blockquote><p>The Builder pattern is well suited to class hierarchies. Use a parallel hier- archy of builders, each nested in the corresponding class. Abstract classes have abstract builders; concrete classes have concrete builders.</p></blockquote><p>这种构造模式，其实特别有利于类型继承，利用相应的类内的构造器帮助进行构造。<br>一般利用像如下形式的构造方法即可：记住这个地方时直接用过build 来返回外部的那个类。</p><p><strong>NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8) .calories(100).sodium(35).carbohydrate(27).build();</strong></p><blockquote><p>Here are two concrete subclasses of Pizza, one of which represents a standard New-York-style pizza, the other a calzone.</p></blockquote><p>后面的两种模式属于继承过程中出现的构造，注意构造的这个构造器 一定要满足如下形式。<br>最重要的是下面继承处的处理，调用基类的构造器 super(builder);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NyPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Size &#123; SMALL, MEDIUM, LARGE &#125; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Size size; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123; </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Size size; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Size size)</span> </span>&#123; </span><br><span class="line">            <span class="keyword">this</span>.size = Objects.requireNonNull(size); </span><br><span class="line">            &#125; </span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> NyPizza <span class="title">build</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NyPizza(<span class="keyword">this</span>); </span><br><span class="line">            &#125; </span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NyPizza</span><span class="params">(Builder builder)</span> </span>&#123; <span class="keyword">super</span>(builder); </span><br><span class="line">    size = builder.size; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calzone</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sauceInside; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123; </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> sauceInside = <span class="keyword">false</span>; <span class="comment">// Default </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sauceInside</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            sauceInside = <span class="keyword">true</span>; <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Calzone <span class="title">build</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Calzone(<span class="keyword">this</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Calzone</span><span class="params">(Builder builder)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(builder); sauceInside = builder.sauceInside; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>This technique, wherein a subclass method is declared to return a subtype of the return type declared in the super- class, is known as covariant return typing. It allows clients to use these builders without the need for casting.</p></blockquote><p>这项技术返回的类都是隶属于该类的，这样做的好处可以允许客户使用这些类而不需要使用转型。</p><blockquote><p>A single builder can be used repeatedly to build multiple objects. The parameters of the builder can be tweaked between invocations of the build method to vary the objects that are created. A builder can fill in some fields automatically upon object creation, such as a serial number that increases each time an object is created.</p></blockquote><p>由于是静态的类，所以只需要被构造一次，却可以造成多次使用，这里就是其的好处，，而这个构造器可以在这个对象被创建之后自动赋值。，比较方便。</p><blockquote><p>The Builder pattern has disadvantages as well. In order to create an object, you must first create its builder. While the cost of creating this builder is unlikely to be noticeable in practice, it could be a problem in performance-critical situations. Also, the Builder pattern is more verbose than the telescoping constructor pattern</p></blockquote><p>其存在的坏处就在于，其写出来的代码非常的复杂和冗杂，对于只有一点参数的构造器而言，完全没有这样写的必要，但是对于先开始只有一点参数，但是后面则变成很多参数的工程来说第一次使用这种构造器方便以后来写。</p><blockquote><p>In summary, the Builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters</p></blockquote><p>总而言之，使用这种办法的方便在于大工程，且一个类的构造参数过多的情况，即解决了参数冗杂的问题，又再次解决了类不能final的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://wsx1128.xyz/categories/java/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="effective_java" scheme="http://wsx1128.xyz/tags/effective-java/"/>
    
  </entry>
  
  <entry>
    <title>effective java item 1</title>
    <link href="http://wsx1128.xyz/2019/03/13/effective-java-item-1/"/>
    <id>http://wsx1128.xyz/2019/03/13/effective-java-item-1/</id>
    <published>2019-03-13T12:50:39.000Z</published>
    <updated>2019-03-26T13:20:15.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Item-1-Consider-static-factory-methods-instead-of-constructors"><a href="#Item-1-Consider-static-factory-methods-instead-of-constructors" class="headerlink" title="Item 1: Consider static factory methods instead of constructors"></a>Item 1: Consider static factory methods instead of constructors</h2><p>前面几个条款的内容是关于创建和销毁对象。</p><blockquote><p>The traditional way for a class to allow a client to obtain an instance is to provide a public constructor. There is another technique that should be a part of every programmer’s toolkit. A class can provide a public static factory method, which is simply a static method that returns an instance of the class. Here’s a simple example from Boolean (the boxed primitive class for boolean). This method translates a boolean primitive value into a Boolean object reference:</p></blockquote><p>考虑直接用一个静态的方法来完成构造函数的功能，比如接受一个对象，然后通过这个对象来构造一个新的对象。</p><blockquote><p>A class can provide its clients with static factory methods instead of, or in addition to, public constructors. Providing a static factory method instead of a public constructor has both advantages and disadvantages.</p></blockquote><p>提供一个静态方法作为构造函数的有额外相对于提供公开构造函数的好处以及坏处。</p><hr><blockquote><p>One advantage of static factory methods is that, unlike constructors, they have names. If the parameters to a constructor do not, in and of themselves, describe the object being returned, a static factory with a well-chosen name is easier to use and the resulting client code easier to read. </p></blockquote><p>第一个好处是静态的函数有独特的名字而构造函数没有名字，通过名字将构造函数的参数进行一个分类显示的更加耐用。</p><blockquote><p>the constructor BigInteger(int, int, Random), which returns a BigInteger that is probably prime, would have been better expressed as a static factory method named BigInteger.probablePrime. </p></blockquote><p>就像大整数类在里面就有一个构造一个趋近于自己值的质数的大整数类，然后这里直接用名字命名显得更加方便。</p><blockquote><p>Because they have names, static factory methods don’t share the restriction discussed in the previous paragraph. In cases where a class seems to require multiple constructors with the same signature, replace the constructors with static factory methods and carefully chosen names to highlight their differences.</p></blockquote><p>有的时候一些公开构造函数的参数类型，以及参数的顺序，代表着不同的构造函数，这样会容易弄混淆，于是这也是体现名字第二个好的地方。</p><hr><blockquote><p>A second advantage of static factory methods is that, unlike constructors, they are not required to create a new object each time they’re invoked.</p></blockquote><p>第二个好处就是相比于构造函数每次在被call的时候，会构造一个新的对象，而静态方法有的时候则会节省下这一笔开销。就像之前举了一个例子，Boolean.valueOf 从来没有构造一个新的对象。</p><blockquote><p>. Instance control allows a class to guarantee that it is a singleton (Item 3) or noninstantiable (Item 4). Also, it allows an immutable value class (Item 17) to make the guarantee that no two equal instances exist: a.equals(b) if and only if a == b. This is the basis of the Flyweight pattern . Enum types (Item 34) provide this guarantee.</p></blockquote><p>这种实例化重复使用一个对象，得到的两个好处，第一个好处就是保证其是一个singleton,另一个好处，就是保证在调用equal函数的时候只能允许相等的条件只会有一个，那么就可以直接使用==号进行操作，从而进行性能上面的提升。</p><hr><blockquote><p>A third advantage of static factory methods is that, unlike constructors, they can return an object of any subtype of their return type. This gives you great flexibility in choosing the class of the returned object.</p></blockquote><p>而其的第三点好处就体现在其的返回值可以为任意该类型的子类型对象，这样在类型的返回的时候会提供很大的灵活性。</p><blockquote><p>One application of this flexibility is that an API can return objects without making their classes public. Hiding implementation classes in this fashion leads to a very compact API.</p></blockquote><p>而其中的第一点应用就在于返回API接口的时候可以不需要将这个类弄成公开的，隐藏其的实现。</p><blockquote><p>For example, the Java Collections Framework has forty-five utility implementations of its interfaces, providing unmodifiable collections, synchronized collections, and the like. Nearly all of these implemen- tations are exported via static factory methods in one noninstantiable class (java.util.Collections). The classes of the returned objects are all nonpublic.</p></blockquote><p>java在实现其的接口的时候，在接口里面采用静态的方法，导出的类往往都是没有公有化的，这样实现了 类的实现过程的隐藏。</p><blockquote><p>one for each convenience implemen- tation. It is not just the bulk of the API that is reduced but the conceptual weight: the number and difficulty of the concepts that programmers must master in order to use the API. The programmer knows that the returned object has precisely the API specified by its interface, so there is no need to read additional class docu- mentation for the implementation class. Furthermore, using such a static factory method requires the client to refer to the returned object by interface rather than implementation class, which is generally good practice (Item 64).</p></blockquote><p>开发者在接口的使用过程中，通过其的返回类型可以逐渐了解到其API的真实用途，这样来就不需要阅读额外的开发者文档。</p><blockquote><p>As of Java 8, the restriction that interfaces cannot contain static methods was eliminated, so there is typically little reason to provide a noninstantiable compan- ion class for an interface. Many public static members that would have been at home in such a class should instead be put in the interface itself. Note, however, that it may still be necessary to put the bulk of the implementation code behind these static methods in a separate package-private class. This is because Java 8 requires all static members of an interface to be public. Java 9 allows private static methods, but static fields and static member classes are still required to be public.</p></blockquote><p>java8的时候就同样将 接口里面不能放静态类型的函数规定给消除了，所以这个时候就没有理由去提供一个不可实例化的类给一个接口了，而许多静态成员应该被放在这样一个接口本身里，记住，现在还是最重要的是将实现的代码放在这些静态实现方法之后。这是因为java8 所有的静态成员都必须公开，而java9 则允许私有的静态函数，其他则是公开的。</p><hr><blockquote><p>A fourth advantage of static factories is that the class of the returned object can vary from call to call as a function of the input parameters. Any sub- type of the declared return type is permissible. The class of the returned object can also vary from release to release.</p></blockquote><p>第四个好处就在于返回的子类型中可以根据参数的形式来进行改变 一一对应的关系，这里举出了一个enumset的例子 （我看的不是很懂 所以这里标红，以后有时间再次来了解一下。）</p><hr><blockquote><p>A fifth advantage of static factories is that the class of the returned object need not exist when the class containing the method is written. Such flexible static factory methods form the basis of service provider frameworks, like the Java Database Connectivity API (JDBC). A service provider framework is a system in which providers implement a service, and the system makes the implementations available to clients, decoupling the clients from the implementations.</p></blockquote><p>第五个好处就是当类中包含的函数已经被写了，然后这返回对象不需要存在，（这一点也没有看懂，等以后拜读了中文版再来解释，手动标红）</p><hr><blockquote><p>The main limitation of providing only static factory methods is that classes without public or protected constructors cannot be subclassed. For example, it is impossible to subclass any of the convenience implementation classes in the Collections Framework. Arguably this can be a blessing in disguise because it encourages programmers to use composition instead of inheritance (Item 18), and is required for immutable types (Item 17).</p></blockquote><p>其实这个地方最大的一个局限的地方就在于，如果一个类没有公开或者保护的构造函数的话 那么这个类是不允许被继承的，意思就是对于被静态函数得来的类，因为不具有公开的构造函数 所以不能够被子类化。</p><blockquote><p>A second shortcoming of static factory methods is that they are hard for programmers to find. They do not stand out in API documentation in the way that constructors do, so it can be difficult to figure out how to instantiate a class that provides static factory methods instead of constructors.</p></blockquote><p>第二个缺点就在于可能开发者会很不容易找到这些静态方法，而且他们不会像平常构造函数一样，所以很难理解实例化一个类提供的静态函数而不是此构造函数。</p><p>不过有一些静态函数的样例 类似的模板 可以自己在书中去查找。</p><blockquote><p>In summary, static factory methods and public constructors both have their uses, and it pays to understand their relative merits. Often static factories are preferable, so avoid the reflex to provide public constructors without first consid- ering static factories.</p></blockquote><p>总之 两种构造函数都有相应的好处与坏处，具体样例具体分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://wsx1128.xyz/categories/java/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="effective_java" scheme="http://wsx1128.xyz/tags/effective-java/"/>
    
  </entry>
  
  <entry>
    <title>大数专题的java方法总结</title>
    <link href="http://wsx1128.xyz/2019/03/13/%E5%A4%A7%E6%95%B0%E4%B8%93%E9%A2%98%E7%9A%84java%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.xyz/2019/03/13/大数专题的java方法总结/</id>
    <published>2019-03-13T05:19:38.000Z</published>
    <updated>2019-03-13T05:36:06.724Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>其实这里题目类型都差不多<br>仅仅只贴出几道题的代码，并且对这些题目所用到的函数进行一个总结。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">            BigDecimal r;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            r = in.nextBigDecimal();</span><br><span class="line">            n = in.nextInt();</span><br><span class="line">            BigDecimal ans;</span><br><span class="line">            ans = r.pow(n);</span><br><span class="line">            ans = ans.stripTrailingZeros();</span><br><span class="line">            String res = ans.toPlainString();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (res.startsWith(<span class="string">"0"</span>)) &#123;res =res.substring(<span class="number">1</span>);&#125;</span><br><span class="line">            System.out.println(res);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>stripTrailingZeros()</code> 这个函数的意思是去除多余的0。<br><code>toPlainString()</code> 这个函数的意思是将某些科学计数法，给全部展开。<br><code>startsWith(&quot;0&quot;)</code> 这个函数的意思就是 判断字符串到底以什么函数为前提。<br><code>substring(1)</code> 这个函数的意思就是字符串进行一个有效的替换。</p><p><strong>另外 java 里面大数的大数幂次方必须要规定一个mod对象 实现函数则为modpow()</strong></p><p>最后再累积点 C++ 知识：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A*B % C = (A%C * B%C)%C</span><br><span class="line">(A+B)%C = (A%C + B%C)%C</span><br><span class="line"></span><br><span class="line">如 532 mod 7 =（500%7+30%7+2%7)%7;</span><br><span class="line"></span><br><span class="line">当然还有</span><br><span class="line"></span><br><span class="line">a*b mod c=(a mod c+b mod c)mod c;</span><br><span class="line"></span><br><span class="line">如35 mod 3=((5%3)*(7%3))%3</span><br></pre></td></tr></table></figure></p><h3 id="还有一道题目-具体看代码"><a href="#还有一道题目-具体看代码" class="headerlink" title="还有一道题目 具体看代码"></a>还有一道题目 具体看代码</h3><p>这道题展现了 java在求余数方面的缺陷。</p><p><strong>重要的就是这一步 v = (v * 10 + s[i] - ‘0’) % mod</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        BigInteger a;</span><br><span class="line">        String b,c;</span><br><span class="line">        <span class="keyword">int</span> Case = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (cin.hasNext()) &#123;</span><br><span class="line">            </span><br><span class="line">            a = cin.nextBigInteger();</span><br><span class="line">            b = a.mod(<span class="keyword">new</span> BigInteger(<span class="string">"137"</span>)).toString();</span><br><span class="line">            c = a.mod(<span class="keyword">new</span> BigInteger(<span class="string">"73"</span>)).toString();</span><br><span class="line">            <span class="keyword">if</span> (b.equals(<span class="string">"0"</span>) &amp;&amp; c.equals(<span class="string">"0"</span>) )   System.out.println(<span class="string">"Case #"</span> + Case++ + <span class="string">": YES"</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(<span class="string">"Case #"</span> + Case++ + <span class="string">": NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于这道题，不知道为什么用java 提交就是没有办法过，全部都是爆内存，我个人觉得可能在大数，求余数这方面，可能存在缺陷。</span></span><br><span class="line"><span class="comment">下面提供几个 AC的 C++代码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstring&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment">const int maxn = 10000000 + 1;</span></span><br><span class="line"><span class="comment">const int mod = 10001;</span></span><br><span class="line"><span class="comment">char s[maxn];</span></span><br><span class="line"><span class="comment">int main()&#123;</span></span><br><span class="line"><span class="comment">    int kase = 0;</span></span><br><span class="line"><span class="comment">    while(scanf("%s",s) == 1)&#123;</span></span><br><span class="line"><span class="comment">        int len = strlen(s);</span></span><br><span class="line"><span class="comment">        int v = 0;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; len; ++i)&#123;</span></span><br><span class="line"><span class="comment">            v = (v*10 + s[i]-48) % mod;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if (v == 0)printf("Case #%d: YES\n",++kase);</span></span><br><span class="line"><span class="comment">        else printf("Case #%d: NO\n",++kase);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="题解" scheme="http://wsx1128.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>四道关于BFS的情况变换题目</title>
    <link href="http://wsx1128.xyz/2019/03/13/%E5%9B%9B%E9%81%93%E5%85%B3%E4%BA%8EBFS%E7%9A%84%E6%83%85%E5%86%B5%E5%8F%98%E6%8D%A2%E9%A2%98%E7%9B%AE/"/>
    <id>http://wsx1128.xyz/2019/03/13/四道关于BFS的情况变换题目/</id>
    <published>2019-03-13T04:44:39.000Z</published>
    <updated>2019-03-13T05:18:53.211Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这个专题 同样还是总结一些BFS的题目，但是这些BFS的题目都存在一个特定的特点，也就是你真的没有办法猜到，原来这道题目最后是通过BFS的方法做的。</p><h3 id="第一题-Fliptile"><a href="#第一题-Fliptile" class="headerlink" title="第一题 Fliptile"></a>第一题 Fliptile</h3><p><a href="https://vjudge.net/problem/POJ-3279" target="_blank" rel="noopener">Fliptile</a></p><p>这道题 个人是觉得很有必要来做一遍，这道题不太属于一个严格的bfs，但是这道题的递归解题思路很有意思。</p><p>题目大意就是两种颜色的格子，给定一个初始图，翻动最小的步数，使得全部为白色，并且最后给出翻动与不翻动的图片</p><p>这道题最好玩的是 我们需要明白一个前提，第i行的格子在竖排上只能被上面的颜色改变，意思是 最后一排的只能根据倒数第二排的位置来确定。<br>那我们通过递归确定第一排便利下去的每一种方法，然后判断是否会进行改变，最后保证最后一排全部为白色，也就达到了全部为白色的效果。</p><p><strong>需要注意的是，里面有一个<code>&amp; 1</code>的操作，这个意思就是对2求余，最终导致的结果就是可以判断该位置的格子该不该重复翻转过来。</strong></p><p>代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cpy[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> res[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> Min;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = cpy[n][i] + cpy[n][i - <span class="number">1</span>] + cpy[n][i + <span class="number">1</span>] + cpy[n - <span class="number">1</span>][i];</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">map</span>[n][i] + tmp) &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (num &gt; Min) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (judge() &amp;&amp; Min &gt; num) &#123;</span><br><span class="line">            Min = num;</span><br><span class="line">            <span class="built_in">memcpy</span>(res,cpy,<span class="keyword">sizeof</span> (cpy));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> _time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="built_in">map</span>[a - <span class="number">1</span>][i] + cpy[a - <span class="number">1</span>][i] + cpy[a - <span class="number">2</span>][i] + cpy[a - <span class="number">1</span>][i - <span class="number">1</span>] + cpy[a - <span class="number">1</span>][i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (tmp &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            cpy[a][i] = <span class="number">1</span>;</span><br><span class="line">            _time ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> cpy[a][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(a + <span class="number">1</span>, num + _time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; m) &#123;</span><br><span class="line">        dfs(<span class="number">2</span>,num);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cpy[<span class="number">1</span>][a] = <span class="number">0</span>;</span><br><span class="line">    solve(a + <span class="number">1</span>,num);</span><br><span class="line">    cpy[<span class="number">1</span>][a] = <span class="number">1</span>;</span><br><span class="line">    solve(a + <span class="number">1</span>,num + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Min = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="built_in">memset</span>(cpy,<span class="number">0</span>,<span class="keyword">sizeof</span>(cpy));</span><br><span class="line">        solve(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (Min == <span class="number">0x3f3f3f3f</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; res[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    get();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第二题-pots"><a href="#第二题-pots" class="headerlink" title="第二题 pots"></a>第二题 pots</h3><p><a href="https://vjudge.net/problem/POJ-3414" target="_blank" rel="noopener">pots</a></p><p>这道题刚开始看的第一眼完全想象不到这竟然是一个BFS的题目，因为相互之间倒水，当时是完全没有一点思路的，不过后来根据BFS层序查找的性质，可以逐渐发现，原来这个地方的一共有六种情况，然后将已经遍历过的和不符合条件的全部去除，然后将返回到原来的位置的情况直接失败，很容易就可以用BFS给弄出来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A,B,C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> s[<span class="number">6</span>] = &#123;<span class="string">"FILL(1)"</span>, <span class="string">"FILL(2)"</span>, <span class="string">"DROP(1)"</span>, <span class="string">"DROP(2)"</span>, <span class="string">"POUR(1,2)"</span>, <span class="string">"POUR(2,1)"</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v_a,v_b;</span><br><span class="line">    <span class="keyword">int</span> step;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</span><br><span class="line">    Node() &#123;&#125;;</span><br><span class="line">    Node (<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c) : v_a(a), v_b(b), step(c) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    Node now(0,0,0),next;</span><br><span class="line">    vis[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    q.push(now);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; * tmp;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) </span><br><span class="line">    &#123;</span><br><span class="line">        Node now = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (now.v_a == C || now.v_b == C) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; now.step &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> it = <span class="number">0</span>; it != now.vs.size(); it++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; now.vs[it] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now.v_a != A) &#123;</span><br><span class="line">            next.v_a = A;</span><br><span class="line">            next.v_b = now.v_b;</span><br><span class="line">            next.step = now.step + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!vis[next.v_a][next.v_b])&#123;</span><br><span class="line">                vis[next.v_a][next.v_b] = <span class="literal">true</span>;</span><br><span class="line">                next.vs = now.vs;</span><br><span class="line">                next.vs.push_back(s[<span class="number">0</span>]);</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now.v_b != B) &#123;</span><br><span class="line">            next.v_b = B;</span><br><span class="line">            next.v_a = now.v_a;</span><br><span class="line">            next.step = now.step + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!vis[next.v_a][next.v_b])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[next.v_a][next.v_b] = <span class="literal">true</span>;</span><br><span class="line">                next.vs = now.vs;</span><br><span class="line">                next.vs.push_back(s[<span class="number">1</span>]);</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now.v_a != <span class="number">0</span>)&#123;</span><br><span class="line">            next.v_a = <span class="number">0</span>;</span><br><span class="line">            next.v_b = now.v_b;</span><br><span class="line">            next.step = now.step + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!vis[next.v_a][next.v_b])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[next.v_a][next.v_b] = <span class="literal">true</span>;</span><br><span class="line">                next.vs = now.vs;</span><br><span class="line">                next.vs.push_back(s[<span class="number">2</span>]);</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now.v_b != <span class="number">0</span>)&#123;</span><br><span class="line">            next.v_b = <span class="number">0</span>;</span><br><span class="line">            next.v_a = now.v_a;</span><br><span class="line">            next.step = now.step + <span class="number">1</span>;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> (!vis[next.v_a][next.v_b])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[next.v_a][next.v_b] = <span class="literal">true</span>;</span><br><span class="line">                next.vs = now.vs;</span><br><span class="line">                next.vs.push_back(s[<span class="number">3</span>]);</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now.v_a != <span class="number">0</span> &amp;&amp; now.v_b != B) &#123;</span><br><span class="line">            next.v_a = now.v_a - (B - now.v_b);</span><br><span class="line">            next.v_b = now.v_a + now.v_b;</span><br><span class="line">            <span class="keyword">if</span> (next.v_b &gt; B) next.v_b = B;</span><br><span class="line">            <span class="keyword">if</span> (next.v_a &lt; <span class="number">0</span>) next.v_a = <span class="number">0</span>;</span><br><span class="line">            next.step = now.step + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!vis[next.v_a][next.v_b])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[next.v_a][next.v_b] = <span class="literal">true</span>;</span><br><span class="line">                next.vs = now.vs;</span><br><span class="line">                next.vs.push_back(s[<span class="number">4</span>]);</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now.v_a != A &amp;&amp; now.v_b != <span class="number">0</span>)&#123;</span><br><span class="line">            next.v_b = now.v_b - (A - now.v_a);</span><br><span class="line">            next.v_a = now.v_a + now.v_b;</span><br><span class="line">            <span class="keyword">if</span> (next.v_a &gt; A) next.v_a = A;</span><br><span class="line">            <span class="keyword">if</span> (next.v_b &lt; <span class="number">0</span>) next.v_b = <span class="number">0</span>;</span><br><span class="line">            next.step = now.step + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!vis[next.v_a][next.v_b])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[next.v_a][next.v_b] = <span class="literal">true</span>;</span><br><span class="line">                next.vs = now.vs;</span><br><span class="line">                next.vs.push_back(s[<span class="number">5</span>]);</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B &gt;&gt; C) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">if</span> (!bfs()) <span class="built_in">cout</span> &lt;&lt; <span class="string">"impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三题-非常可乐"><a href="#第三题-非常可乐" class="headerlink" title="第三题 非常可乐"></a>第三题 非常可乐</h3><p><a href="https://vjudge.net/problem/HDU-1495" target="_blank" rel="noopener">非常可乐</a></p><p>这一道题，其实与上面一道题很类似的地方就在于，也是将诸多情况进行一个总结与分布，符合条件的入队列，不符合条件的直接出队列。<br>关键就是这道题的条件设置方面与上面一题有些不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">L_</span>非常可乐 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line">    <span class="comment">// 标志数组来标记路径，三个杯子三维数组即可</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][][] visited = <span class="keyword">new</span> <span class="keyword">int</span>[maxn][maxn][maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxn; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; maxn; ++k)</span><br><span class="line">                    visited[i][j][k] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a b c为三个容器的最大容量</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记住这里可以直接写queue的接口 来声明类型 并且在后面 new 的时候 以LinkedList来实现 其的接口</span></span><br><span class="line">        Queue&lt;Node&gt; que = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        <span class="comment">// 初始</span></span><br><span class="line">        que.add(<span class="keyword">new</span> Node(a, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 取队头并弹出</span></span><br><span class="line">            Node t = que.poll();</span><br><span class="line">            visited[t.a][t.b][t.c] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 判断是否符合条件</span></span><br><span class="line">            <span class="keyword">if</span> (t.a == t.b &amp;&amp; t.c == <span class="number">0</span> || t.a == t.c &amp;&amp; t.b == <span class="number">0</span> || t.b == t.c &amp;&amp; t.a == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(t.step);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 倒水过程，注意倒水的前提是杯子里面有水</span></span><br><span class="line">            <span class="comment">// b -&gt; a</span></span><br><span class="line">            <span class="keyword">if</span> (t.b != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 因为没有刻度， 所以每次倒水都有两种情况</span></span><br><span class="line">                <span class="comment">// 第一种情况是把自己倒完</span></span><br><span class="line">                <span class="keyword">if</span> (t.a + t.b &lt;= a) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[t.a + t.b][<span class="number">0</span>][t.c] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(t.a + t.b, <span class="number">0</span>, t.c, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[t.a + t.b][<span class="number">0</span>][t.c] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 第二种情况是把对方倒满</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (t.a != a) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[a][t.b - (a - t.a)][t.c] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(a, t.b - (a - t.a), t.c, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[a][t.b - (a - t.a)][t.c] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// c -&gt; a</span></span><br><span class="line">            <span class="keyword">if</span> (t.c != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.a + t.c &lt;= a) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[t.a + t.c][t.b][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(t.a + t.c, t.b, <span class="number">0</span>, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[t.a + t.c][t.b][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.a != a) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[a][t.b][t.c - (a - t.a)] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(a, t.b, t.c - (a - t.a), t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[a][t.b][t.c - (a - t.a)] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// b -&gt; c</span></span><br><span class="line">            <span class="keyword">if</span> (t.b != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.b + t.c &lt;= c) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[t.a][<span class="number">0</span>][t.b + t.c] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(t.a, <span class="number">0</span>, t.b + t.c, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[t.a][<span class="number">0</span>][t.b + t.c] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.c != c) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[t.a][t.b - (c - t.c)][c] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(t.a, t.b - (c - t.c), c, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[t.a][t.b - (c - t.c)][c] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// c -&gt; b</span></span><br><span class="line">            <span class="keyword">if</span> (t.c != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.c + t.b &lt;= b) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[t.a][t.c + t.b][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(t.a, t.c + t.b, <span class="number">0</span>, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[t.a][t.c + t.b][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.b != b) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[t.a][b][t.c - (b - t.b)] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(t.a, b, t.c - (b - t.b), t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[t.a][b][t.c - (b - t.b)] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// a -&gt; b</span></span><br><span class="line">            <span class="keyword">if</span> (t.a != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.a + t.b &lt;= b) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[<span class="number">0</span>][t.a + t.b][t.c] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(<span class="number">0</span>, t.a + t.b, t.c, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[<span class="number">0</span>][t.a + t.b][t.c] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.b != b) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[t.a - (b - t.b)][b][t.c] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(t.a - (b - t.b), b, t.c, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[t.a - (b - t.b)][b][t.c] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// a -&gt; c</span></span><br><span class="line">            <span class="keyword">if</span> (t.a != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.a + t.c &lt;= c) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[<span class="number">0</span>][t.b][t.a + t.c] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(<span class="number">0</span>, t.b, t.a + t.c, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[<span class="number">0</span>][t.b][t.a + t.c] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.c != c) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited[t.a - (c - t.c)][t.b][c] == <span class="number">0</span>) &#123;</span><br><span class="line">                        que.add(<span class="keyword">new</span> Node(t.a - (c - t.c), t.b, c, t.step + <span class="number">1</span>));</span><br><span class="line">                        visited[t.a - (c - t.c)][t.b][c] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = in.nextInt(), b = in.nextInt(), c = in.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span> &amp;&amp; c == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            init();</span><br><span class="line">            bfs(a, b, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">// a b c 代表实际拥有水的体积</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c, step;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> step) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">        <span class="keyword">this</span>.step = step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四题-prime-path"><a href="#第四题-prime-path" class="headerlink" title="第四题 prime path"></a>第四题 prime path</h3><p><a href="https://vjudge.net/problem/POJ-3126" target="_blank" rel="noopener">prime path</a></p><p>这道题 同样看题目这的没有办法观察到这是一个BFS的题目，只有看到后面才逐渐发现这道题目 其实是通过搜寻每个部位的变化，最终导致输出结果<br>不过这里会借助到一些筛选质数的办法 比如欧拉筛 比如埃式筛</p><p>只不过后面是直接用暴力枚举这部分 我是真的没有想到，暴力枚举了四十种情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxn];</span><br><span class="line"><span class="keyword">bool</span> check[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,step;</span><br><span class="line">    Node()&#123;&#125;;</span><br><span class="line">    Node(<span class="keyword">int</span> a,<span class="keyword">int</span> c):x(a),step(c)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(check,<span class="literal">false</span>,<span class="keyword">sizeof</span>(check));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!check[i]) prime[tot++] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * prime[j] &gt; maxn) <span class="keyword">break</span>;</span><br><span class="line">            check[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    Node o1(a,0),o2,o3;</span><br><span class="line">    q.push(o1);</span><br><span class="line">    vis[a] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        o2 = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (o2.x == b) <span class="keyword">return</span> o2.step;</span><br><span class="line">        <span class="keyword">int</span> num[<span class="number">4</span>];</span><br><span class="line">        num[<span class="number">0</span>] = o2.x / <span class="number">1000</span>;</span><br><span class="line">        num[<span class="number">1</span>] = o2.x / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">        num[<span class="number">2</span>] = o2.x / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        num[<span class="number">3</span>] = o2.x % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = num[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                num[i] = j;</span><br><span class="line">                <span class="keyword">int</span> yy = num[<span class="number">0</span>] * <span class="number">1000</span> + num[<span class="number">1</span>] * <span class="number">100</span> + num[<span class="number">2</span>] *<span class="number">10</span> + num[<span class="number">3</span>];</span><br><span class="line">                <span class="keyword">if</span> (!vis[yy] &amp;&amp; !check[yy] &amp;&amp; yy &gt; <span class="number">1000</span> &amp;&amp; yy &lt; <span class="number">9999</span>) &#123;</span><br><span class="line">                    vis[yy] = <span class="literal">true</span>;</span><br><span class="line">                    o3.x = yy;</span><br><span class="line">                    o3.step = o2.step + <span class="number">1</span>;</span><br><span class="line">                    q.push(o3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num[i] =  tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    get_prime();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        ans = bfs(a,b);</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">-1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="http://wsx1128.xyz/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>两道与fire有关的基础BFS</title>
    <link href="http://wsx1128.xyz/2019/03/13/%E4%B8%A4%E9%81%93%E4%B8%8Efire%E6%9C%89%E5%85%B3%E7%9A%84%E5%9F%BA%E7%A1%80BFS/"/>
    <id>http://wsx1128.xyz/2019/03/13/两道与fire有关的基础BFS/</id>
    <published>2019-03-12T16:04:39.000Z</published>
    <updated>2019-03-13T03:39:17.932Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第一道题"><a href="#第一道题" class="headerlink" title="第一道题"></a>第一道题</h3><p><a href="https://vjudge.net/problem/FZU-2150" target="_blank" rel="noopener">fire game</a></p><p>这道题目其实就是一个简单的bfs，但是令我特别困惑的是，我不知道怎么去取每一个火苗向四周扩散的时间，然后最后才知道，原来是直接计算那个最长的路线就行了，这道题目的意思就是根据每一个点的遍历，去寻找最长的那一个点，将每个点放进去，然后找距离这个点最长的距离就是其扩散的最终时间，然后到最后依次枚举两个点，按照各自两个点之间的最快的时间来决定最终的时间。</p><p><strong>其实这道题不难，一道bfs的模拟题目，只不过就是后面决策的那个地方不太好下。</strong></p><p>代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,pos;</span><br><span class="line">    point ()&#123;&#125;</span><br><span class="line">    point (<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c) : x(a),y(b),pos(c) &#123;&#125;</span><br><span class="line">    <span class="function">point <span class="title">move</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="function">point <span class="title">tmp</span><span class="params">(x,y,pos)</span></span>;</span><br><span class="line">        <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">                tmp.x = x + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.x = x - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.y = y + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.y = y - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.pos++;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(point a,point b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;point&gt; q;</span><br><span class="line">    point now,next;</span><br><span class="line">    q.push(a);</span><br><span class="line">    q.push(b);</span><br><span class="line">    <span class="built_in">memset</span>(vis,inf,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    vis[a.x][a.y] = <span class="number">0</span>;</span><br><span class="line">    vis[b.x][b.y] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        now = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            next = now.move(i);</span><br><span class="line">            <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; n &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; m </span><br><span class="line">            &amp;&amp; <span class="built_in">map</span>[next.x][next.y] == <span class="string">'#'</span> &amp;&amp; vis[next.x][next.y] == inf) &#123;</span><br><span class="line">                vis[next.x][next.y] = next.pos;</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'#'</span>) </span><br><span class="line">            <span class="comment">//这里就是找在层序遍历中距离res最大的每一个点，即最后的时间。</span></span><br><span class="line">                res = max(res,vis[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">int</span> Case = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'#'</span>) &#123;</span><br><span class="line">                    cnt ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cnt &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; Case++ &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'#'</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; n; l++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (l &lt;= i &amp;&amp; k &lt;= j) <span class="keyword">continue</span>;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">map</span>[l][k] == <span class="string">'#'</span>)&#123;</span><br><span class="line">                                <span class="function">point <span class="title">p1</span><span class="params">(i,j,<span class="number">0</span>)</span></span>;</span><br><span class="line">                                <span class="function">point <span class="title">p2</span><span class="params">(l,k,<span class="number">0</span>)</span></span>;</span><br><span class="line">                                <span class="comment">//这里就是找每一个距离最远的点中最小的那个值。</span></span><br><span class="line">                                <span class="keyword">int</span> ans = bfs(p1,p2);</span><br><span class="line">                                res = min(ans,res);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == inf)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; Case++ &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; Case++ &lt;&lt; <span class="string">": "</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第二道题"><a href="#第二道题" class="headerlink" title="第二道题"></a>第二道题</h3><p><a href="https://vjudge.net/problem/UVA-11624" target="_blank" rel="noopener">Fire!</a></p><p>其实吧，这道题刚出来的时候，我在想，因为两个BFS嘛，会不会用到并发编程,(原谅我的天真烂漫)，后面是直接用两个BFS分开放，用一个二维数组来记录火蔓延的时间，然后再用一个BFS来记录其的走向位置，。</p><p><strong>本质上，还是属于一个bfs的模板题目。</strong></p><p>代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,step;</span><br><span class="line">    point() &#123;&#125;</span><br><span class="line">    point (<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c) : x(a),y(b), step(c) &#123;&#125;</span><br><span class="line">    <span class="function">point <span class="title">move</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="function">point <span class="title">tmp</span><span class="params">(x, y, step)</span></span>;</span><br><span class="line">        <span class="keyword">switch</span> (i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            tmp.x = x + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            tmp.x = x - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            tmp.y = y + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            tmp.y = y - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.step++;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> _time[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;point&gt; q_fire;</span><br><span class="line"><span class="built_in">queue</span>&lt;point&gt; q_joe;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs_fire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point now, next;</span><br><span class="line">    <span class="keyword">while</span> (!q_fire.empty()) &#123;</span><br><span class="line">        now = q_fire.front();</span><br><span class="line">        q_fire.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span> ; i++) &#123;</span><br><span class="line">            next = now.move(i);</span><br><span class="line">            <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; m &amp;&amp; next.y &lt; n </span><br><span class="line">                &amp;&amp; _time[next.x][next.y] &gt; next.step &amp;&amp; (<span class="built_in">map</span>[next.x][next.y] == <span class="string">'.'</span> || <span class="built_in">map</span>[next.x][next.y] == <span class="string">'J'</span>)) &#123;</span><br><span class="line">                    q_fire.push(next);</span><br><span class="line">                    _time[next.x][next.y] = next.step;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x == <span class="number">0</span> || y == <span class="number">0</span> || x == m - <span class="number">1</span> || y == n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs_joe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point now,next;</span><br><span class="line">    <span class="keyword">while</span> (!q_joe.empty()) &#123;</span><br><span class="line">        now = q_joe.front();</span><br><span class="line">        q_joe.pop();</span><br><span class="line">        <span class="keyword">if</span> (is_ok(now.x,now.y)) <span class="keyword">return</span> now.step + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">            next = now.move(i);</span><br><span class="line">            <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; m &amp;&amp; next.y &lt; n </span><br><span class="line">            &amp;&amp; !vis[next.x][next.y] &amp;&amp; <span class="built_in">map</span>[next.x][next.y] == <span class="string">'.'</span> &amp;&amp; next.step &lt; _time[next.x][next.y])&#123;</span><br><span class="line">                q_joe.push(next);</span><br><span class="line">                vis[next.x][next.y] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">while</span> (!q_fire.empty())</span><br><span class="line">        q_fire.pop();</span><br><span class="line">    <span class="keyword">while</span> (!q_joe.empty())</span><br><span class="line">        q_joe.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        clear();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">                _time[i][j] = inf;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'J'</span>) &#123;</span><br><span class="line">                    q_joe.push(point (i,j,<span class="number">0</span>));</span><br><span class="line">                    vis[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'F'</span>) &#123;</span><br><span class="line">                    q_fire.push(point(i,j,<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        bfs_fire();</span><br><span class="line">        <span class="keyword">int</span> t = bfs_joe();</span><br><span class="line">        <span class="keyword">if</span> (t) <span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>质数筛选问题</title>
    <link href="http://wsx1128.xyz/2019/03/05/%E8%B4%A8%E6%95%B0%E7%AD%9B%E9%80%89%E9%97%AE%E9%A2%98/"/>
    <id>http://wsx1128.xyz/2019/03/05/质数筛选问题/</id>
    <published>2019-03-05T10:25:53.000Z</published>
    <updated>2019-03-05T11:28:37.369Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于质数的筛选问题，就像最先开始学习C语言一样，最先开始都是从1遍历到本身。</p><p>后来的优化版本就体现在遍历到本身的 根号下的倍数关系。但是 后来则发现有太多的重复循环次数，这里反而显得不是特别好，所以就出来一种新的筛选方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最普通的埃式筛法</span></span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!check[i])</span><br><span class="line">    &#123;</span><br><span class="line">        prime[tot++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下面其实用乘法和用加法都是一样的，而这里就是乘法的原因就在于，减少了循环次数</span></span><br><span class="line">    <span class="comment">// 唯一没有被优化的地方就在于 每一个数字被重复标记了很多次，而后面的欧拉筛就会限制标记次数为一次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt;= n; j *= i)</span><br><span class="line">    &#123;</span><br><span class="line">        check[j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>鉴于上面所说的在进行一次优化，则优化体现在了减少重复次数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进阶版的线性筛法</span></span><br><span class="line"><span class="comment">//质数数组</span></span><br><span class="line"><span class="keyword">int</span> prime[MAXN];</span><br><span class="line"><span class="comment">//判断每一个数 数组</span></span><br><span class="line"><span class="keyword">int</span> check[MAXL];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAXL; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!check[i])</span><br><span class="line">    &#123;</span><br><span class="line">        prime[tot++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//大致意思就在于 将每一个数的与质数数组里面的数进行相乘，最后得到的结果存在check中去</span></span><br><span class="line">        <span class="comment">//需要注意的就是 一旦当前的数能被整除的时候 就立马退出，这样代表每一个数字都会被自己的最小质因数给整除出来。</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (i * prime[j] &gt; MAXL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接下来就是区间筛</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="质数筛选" scheme="http://wsx1128.xyz/tags/%E8%B4%A8%E6%95%B0%E7%AD%9B%E9%80%89/"/>
    
      <category term="欧拉筛" scheme="http://wsx1128.xyz/tags/%E6%AC%A7%E6%8B%89%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>分享几道简单搜索题目</title>
    <link href="http://wsx1128.xyz/2019/03/05/%E5%88%86%E4%BA%AB%E5%87%A0%E9%81%93%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E9%A2%98%E7%9B%AE/"/>
    <id>http://wsx1128.xyz/2019/03/05/分享几道简单搜索题目/</id>
    <published>2019-03-05T07:53:01.000Z</published>
    <updated>2019-03-05T08:04:35.047Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不多做分析，其基本上都是一些 dfs 与 bfs上面的简单题目</p><p><img src="/2019/03/05/分享几道简单搜索题目/11.png" alt="11"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">&gt; File Name: 棋盘问题.cpp</span></span><br><span class="line"><span class="comment">&gt; Author: wangshuxiao</span></span><br><span class="line"><span class="comment">&gt; Mail: wsx1128@outlook.com </span></span><br><span class="line"><span class="comment">&gt; Created Time: Sun  3 Mar 15:05:54 2019</span></span><br><span class="line"><span class="comment"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">char</span> board  [<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> total;</span><br><span class="line"><span class="keyword">bool</span> booked[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span>  cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>  cur)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == k) &#123;</span><br><span class="line">total ++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur &gt;= n) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (booked[j] == <span class="literal">false</span> &amp;&amp; board[cur][j] == <span class="string">'#'</span>) &#123;</span><br><span class="line">booked[j] = <span class="literal">true</span>;</span><br><span class="line">cnt ++;</span><br><span class="line">dfs(cur + <span class="number">1</span>);</span><br><span class="line">booked[j] = <span class="literal">false</span>;</span><br><span class="line">cnt --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这种情况是防范 没有在首置位 有满足符合条件的数据</span></span><br><span class="line">dfs(cur + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">   <span class="keyword">if</span> (n ==  <span class="number">-1</span> &amp;&amp; k == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;  i ++)  &#123;</span><br><span class="line">   booked[i] = <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;  n; j ++) &#123;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; board[i][j];</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   total = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">   dfs(<span class="number">0</span>);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; total &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/05/分享几道简单搜索题目/22.png" alt="22"><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">&gt; File Name: DungeonMaster.cpp</span></span><br><span class="line"><span class="comment">&gt; Author: wangshuxiao</span></span><br><span class="line"><span class="comment">&gt; Mail: wsx1128@outlook.com </span></span><br><span class="line"><span class="comment">&gt; Created Time: Sun  3 Mar 16:10:18 2019</span></span><br><span class="line"><span class="comment"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L,C,R;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[maxn][maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">position</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line">position () = <span class="keyword">default</span>;</span><br><span class="line">position(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z,<span class="keyword">int</span> pos) :  <span class="keyword">this</span>.x(x),</span><br><span class="line"><span class="keyword">this</span>.y(y),<span class="keyword">this</span>.z(z),<span class="keyword">this</span>.pos(pos) &#123;&#125;;</span><br><span class="line"><span class="function">position <span class="title">move</span> <span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">position position::move(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    position tmp = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">switch</span> (i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        tmp.x = x + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        tmp.x = x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        tmp.y = y + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        tmp.y = y - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        tmp.z = z + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        tmp.z = z - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span> <span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="function">position <span class="title">beg</span> <span class="params">(i,j,k,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;position&gt; q;</span><br><span class="line">q.push(beg);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">position now = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">dis[now.x][now.y][now.z] = now.pos;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">position next = now.move(i);</span><br><span class="line"><span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; L &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; R</span><br><span class="line">            &amp;&amp; next.z &gt;= <span class="number">0</span> &amp;&amp; next.z &lt; C &amp;&amp; dis[next.x][next.y][next.z]</span><br><span class="line">== <span class="number">-1</span> &amp;&amp; <span class="built_in">map</span>[next.x][next.y][next.z] != <span class="string">'#'</span>) &#123;</span><br><span class="line"><span class="function">position <span class="title">empt</span> <span class="params">(next.x,next.y,next.z,now.pos + <span class="number">1</span>)</span></span>;</span><br><span class="line">q.push(empt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; L &gt;&gt; R &gt;&gt; C) &#123;</span><br><span class="line"><span class="keyword">if</span> (L == <span class="number">0</span> &amp;&amp; R == <span class="number">0</span> &amp;&amp; C == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> x1,y1,z1;</span><br><span class="line"><span class="keyword">int</span> x2,y2,z2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != L; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != R; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != C; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j][k];</span><br><span class="line">                    dis[i][j][k] = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">map</span>[i][j][k] == <span class="string">'S'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        x1 = i;</span><br><span class="line">                        y1 = j;</span><br><span class="line">                        z1 = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">map</span>[i][j][k] == <span class="string">'E'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        x2 = i;</span><br><span class="line">                        y2 = j;</span><br><span class="line">                        z2 = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     bfs(x1, y1, z1);</span><br><span class="line"><span class="keyword">if</span> (dis[x2][y2][z2] == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Trapped!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Escaped in "</span> &lt;&lt; dis[x2][y2][z2] &lt;&lt; <span class="string">" minute(s)."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/03/05/分享几道简单搜索题目/33.png" alt="33"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span> [maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> &amp;&amp; i &gt;= m) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (j &lt; <span class="number">0</span> &amp;&amp; j &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'@'</span>) &#123;</span><br><span class="line">        <span class="built_in">map</span>[i][j] = <span class="string">'.'</span>;</span><br><span class="line">        dfs(i<span class="number">-1</span>,j);</span><br><span class="line">        dfs(i+<span class="number">1</span>,j);</span><br><span class="line">        dfs(i,j<span class="number">-1</span>);</span><br><span class="line">        dfs(i,j+<span class="number">1</span>);</span><br><span class="line">        dfs(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line">        dfs(i<span class="number">-1</span>,j+<span class="number">1</span>);</span><br><span class="line">        dfs(i+<span class="number">1</span>,j<span class="number">-1</span>);</span><br><span class="line">        dfs(i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; m &amp;&amp; m != <span class="number">0</span> &amp;&amp; <span class="built_in">cin</span> &gt;&gt; n) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'@'</span>)&#123;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/05/分享几道简单搜索题目/44.png" alt="44"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> dis_Y[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> dis_M[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, pos;</span><br><span class="line">    point()&#123;&#125;;</span><br><span class="line">    point(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) : x(a), y(b), pos(c) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _move[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="built_in">queue</span>&lt;point&gt; *q, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">beg</span><span class="params">(x, y, <span class="number">0</span>)</span></span>;</span><br><span class="line">    q-&gt;push(beg);</span><br><span class="line">    </span><br><span class="line">    point now, next;</span><br><span class="line">    <span class="keyword">while</span> (!q-&gt;empty())</span><br><span class="line">    &#123;</span><br><span class="line">        now = q-&gt;front();</span><br><span class="line">        q-&gt;pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            next.x = now.x + _move[i][<span class="number">0</span>];</span><br><span class="line">            next.y = now.y + _move[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> ( next.x &lt; n &amp;&amp; next.x &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; m &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[next.x][next.y] != <span class="string">'#'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dis_Y[next.x][next.y] == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        next.pos = now.pos + <span class="number">1</span>;</span><br><span class="line">                        q -&gt; push(next);</span><br><span class="line">                        dis_Y[now.x][now.y] = now.pos + <span class="number">1</span>; </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dis_M[next.x][next.y] == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        next.pos = now.pos + <span class="number">1</span>;</span><br><span class="line">                        q -&gt; push(next);</span><br><span class="line">                        dis_M[now.x][now.y] = now.pos + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> yi_x, yi_y;</span><br><span class="line">    <span class="keyword">int</span> m_x, m_y;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;v;</span><br><span class="line">        <span class="built_in">queue</span>&lt;point&gt; qm;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">                dis_M[i][j] = <span class="number">-1</span>;</span><br><span class="line">                dis_Y[i][j] = <span class="number">-1</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'Y'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    yi_x = i;</span><br><span class="line">                    yi_y = j;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'M'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m_x = i;</span><br><span class="line">                    m_y = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'@'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    </span><br><span class="line">                    v.push_back(make_pair(i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        dis_Y[yi_x][yi_y] = <span class="number">0</span>;</span><br><span class="line">        dis_M[m_x][m_y] = <span class="number">0</span>;</span><br><span class="line">        bfs(&amp;qm, yi_x, yi_y, <span class="literal">true</span>);</span><br><span class="line">        bfs(&amp;qm, m_x, m_y, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> Min = <span class="number">9999999</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = v.begin(); it != v.end(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = dis_M[it-&gt;first][it-&gt;second] + dis_Y[it-&gt;first][it-&gt;second];</span><br><span class="line">            <span class="keyword">if</span> (Min &gt; tmp)</span><br><span class="line">                Min = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Min * <span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/05/分享几道简单搜索题目/55.png" alt="55"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span> [maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x , y , pos;</span><br><span class="line">    pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span> &gt; p;</span><br><span class="line">    point()&#123;&#125;;</span><br><span class="line">    point(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c) : x(a),y(b),pos(c) &#123;&#125;</span><br><span class="line">    <span class="function">point <span class="title">move</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        point tmp = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                tmp.x += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                tmp.x -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                tmp.y += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                tmp.y -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point m[maxn][maxn];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">            m[i][j].x = i;</span><br><span class="line">            m[i][j].y = j;</span><br><span class="line">            m[i][j].pos = <span class="number">-1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;point&gt;q;</span><br><span class="line">    <span class="function">point <span class="title">beg</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    q.push(beg);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        point now = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">//m[now.x][now.y].pos = now.pos;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            point next = now.move(i);</span><br><span class="line">            <span class="keyword">if</span> (next.x &lt; <span class="number">5</span> &amp;&amp; next.x &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; <span class="number">5</span> &amp;&amp; next.y &gt;= <span class="number">0</span> </span><br><span class="line">            &amp;&amp; <span class="built_in">map</span>[next.x][next.y] != <span class="number">1</span> &amp;&amp; m[next.x][next.y].pos == <span class="number">-1</span>) &#123;</span><br><span class="line">                m[next.x][next.y].pos = now.pos+<span class="number">1</span>;</span><br><span class="line">                m[next.x][next.y].p = make_pair(now.x,now.y);</span><br><span class="line">                q.push(m[next.x][next.y]);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt; &gt; s;</span><br><span class="line">    s.push(make_pair(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;x = m[<span class="number">4</span>][<span class="number">4</span>].p;</span><br><span class="line">    <span class="keyword">int</span> y = m[<span class="number">4</span>][<span class="number">4</span>].pos;</span><br><span class="line">    <span class="keyword">while</span> (y --) &#123;</span><br><span class="line">        </span><br><span class="line">        s.push(x);</span><br><span class="line">        x = m[x.first][x.second].p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        x = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; x.first &lt;&lt; <span class="string">", "</span> &lt;&lt; x.second &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="bfs" scheme="http://wsx1128.xyz/tags/bfs/"/>
    
      <category term="dfs" scheme="http://wsx1128.xyz/tags/dfs/"/>
    
      <category term="搜索" scheme="http://wsx1128.xyz/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>8_pazzle</title>
    <link href="http://wsx1128.xyz/2019/02/26/8-pazzle/"/>
    <id>http://wsx1128.xyz/2019/02/26/8-pazzle/</id>
    <published>2019-02-25T17:23:10.000Z</published>
    <updated>2019-02-26T15:08:41.466Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="此为第四周普林斯顿算法课大作业，基本思路是基于优先队列的A-算法。"><a href="#此为第四周普林斯顿算法课大作业，基本思路是基于优先队列的A-算法。" class="headerlink" title="此为第四周普林斯顿算法课大作业，基本思路是基于优先队列的A*算法。"></a>此为第四周普林斯顿算法课大作业，基本思路是基于优先队列的A*算法。</h2><p>所谓A*算法，就是启发式算法，人工智能基础，就是将每一步周围的一步之类的情况全部存储起来，然后放进优先队列里面进行比较，然后依次出队，算出最终的结果<br>相当于一个小博弈。</p><p>首先，先看题目。<br><img src="/2019/02/26/8-pazzle/11.png" alt="11"><br><img src="/2019/02/26/8-pazzle/22.png" alt="22"><br><img src="/2019/02/26/8-pazzle/33.png" alt="33"></p><p>直接贴出代码</p><p><strong>Board.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> [][] blocks;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> dimension;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Board</span><span class="params">(<span class="keyword">int</span>[][] blocks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (blocks == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Null blocks"</span>);</span><br><span class="line">        dimension = blocks.length;</span><br><span class="line">        <span class="keyword">this</span>.blocks = <span class="keyword">new</span> <span class="keyword">int</span>[dimension][dimension];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.blocks[i] = blocks[i].clone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dimension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dimension;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hamming</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] != i  * dimension + j + <span class="number">1</span>) cnt ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">manhattan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] != i  * dimension + j + <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> val = blocks[i][j];</span><br><span class="line">                    <span class="keyword">int</span> row = (val - <span class="number">1</span>) / dimension;</span><br><span class="line">                    <span class="keyword">int</span> col = (val - <span class="number">1</span>) % dimension;</span><br><span class="line">                    <span class="keyword">int</span> dif = Math.abs(row - i)  + Math.abs(col - j);</span><br><span class="line">                    cnt += dif;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGoal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hamming() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="keyword">int</span> i1,<span class="keyword">int</span> r1,<span class="keyword">int</span> i2,<span class="keyword">int</span> r2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = blocks[i1][r1];</span><br><span class="line">        blocks[i1][r1] = blocks[i2][r2];</span><br><span class="line">        blocks[i2][r2] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Board <span class="title">twin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Board twinBoard = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>,col = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (blocks[row][col] == <span class="number">0</span>) col++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] != <span class="number">0</span> &amp;&amp; blocks[i][j] != blocks[row][col]) &#123;</span><br><span class="line">                    twinBoard.swap(i,j,row,col);</span><br><span class="line">                    <span class="keyword">return</span> twinBoard;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> twinBoard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object y)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (y == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         <span class="keyword">if</span> (y.getClass().isInstance(<span class="keyword">this</span>)) &#123;</span><br><span class="line">             Board tmp = (Board) y;</span><br><span class="line">             <span class="keyword">if</span> (tmp.dimension != <span class="keyword">this</span>.dimension)</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">                 <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (tmp.blocks[i][j] != <span class="keyword">this</span>.blocks[i][j])</span><br><span class="line">                         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Board&gt; <span class="title">neighbors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Board&gt; neighbors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimension; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimension; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blocks[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Board tmpUp = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">                        tmpUp.swap(i,j,i - <span class="number">1</span>,j);</span><br><span class="line">                        neighbors.add(tmpUp);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i &lt; dimension - <span class="number">1</span>) &#123;</span><br><span class="line">                        Board tmpDown = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">                        tmpDown.swap(i,j,i + <span class="number">1</span>,j);</span><br><span class="line">                        neighbors.add(tmpDown);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Board tmpLeft = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">                        tmpLeft.swap(i,j,i,j - <span class="number">1</span>);</span><br><span class="line">                        neighbors.add(tmpLeft);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (j &lt; dimension - <span class="number">1</span>) &#123;</span><br><span class="line">                        Board tmpRight = <span class="keyword">new</span> Board(blocks);</span><br><span class="line">                        tmpRight.swap(i,j,i,j + <span class="number">1</span>);</span><br><span class="line">                        neighbors.add(tmpRight);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> neighbors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(dimension + <span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; dimension; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; dimension; col++) &#123;</span><br><span class="line">                sb.append(String.format(<span class="string">"%2d "</span>, blocks[row][col]));</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Programming_Assignment_4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.MinPQ;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Stack;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BoardNode current;</span><br><span class="line">    <span class="keyword">private</span> BoardNode twinCurrent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardNode</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">BoardNode</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Board item;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> priority;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> move;</span><br><span class="line">        <span class="keyword">private</span> BoardNode preBoard;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BoardNode</span> <span class="params">(Board item,BoardNode preBoard)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.preBoard = preBoard;</span><br><span class="line">            <span class="keyword">if</span> (preBoard == <span class="keyword">null</span>) <span class="keyword">this</span>.move = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">this</span>.move = preBoard.move + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.priority = <span class="keyword">this</span>.move + item.manhattan();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(BoardNode b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.priority,b.priority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putNeighbors</span> <span class="params">(BoardNode current,MinPQ&lt;BoardNode&gt;pq)</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Board&gt; neighbors = current.item.neighbors();</span><br><span class="line">        <span class="keyword">for</span> (Board it : neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.preBoard == <span class="keyword">null</span> || !it.equals(current.preBoard.item)) &#123;</span><br><span class="line">                pq.insert(<span class="keyword">new</span> BoardNode(it,current));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solver</span><span class="params">(Board initial)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initial == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Constructor argument Board is null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        current = <span class="keyword">new</span> BoardNode(initial,<span class="keyword">null</span>);</span><br><span class="line">        twinCurrent = <span class="keyword">new</span> BoardNode(initial.twin(),<span class="keyword">null</span>);</span><br><span class="line">        MinPQ&lt;BoardNode&gt; pq = <span class="keyword">new</span> MinPQ&lt;BoardNode&gt;();</span><br><span class="line">        MinPQ&lt;BoardNode&gt; twinpq = <span class="keyword">new</span> MinPQ&lt;BoardNode&gt;();</span><br><span class="line">        pq.insert(current);</span><br><span class="line">        twinpq.insert(twinCurrent);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            current = pq.delMin();</span><br><span class="line">            <span class="keyword">if</span> (current.item.isGoal()) <span class="keyword">break</span>;</span><br><span class="line">            putNeighbors(current,pq);</span><br><span class="line"></span><br><span class="line">            twinCurrent = twinpq.delMin();</span><br><span class="line">            <span class="keyword">if</span> (twinCurrent.item.isGoal()) <span class="keyword">break</span>;</span><br><span class="line">            putNeighbors(twinCurrent,twinpq);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSolvable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current.item.isGoal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">moves</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current.item.isGoal())   <span class="keyword">return</span> current.move;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Board&gt; <span class="title">solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isSolvable()) &#123;</span><br><span class="line">            Stack&lt;Board&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            BoardNode node = current;</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.item);</span><br><span class="line">                node = node.preBoard;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stack;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
      <category term="A*算法" scheme="http://wsx1128.xyz/tags/A-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>基于java的碰撞物理引擎</title>
    <link href="http://wsx1128.xyz/2019/02/26/%E5%9F%BA%E4%BA%8Ejava%E7%9A%84%E7%A2%B0%E6%92%9E%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E/"/>
    <id>http://wsx1128.xyz/2019/02/26/基于java的碰撞物理引擎/</id>
    <published>2019-02-25T16:44:48.000Z</published>
    <updated>2019-02-26T15:08:43.128Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="首先，贴出效果图，基于java的物理引擎。"><a href="#首先，贴出效果图，基于java的物理引擎。" class="headerlink" title="首先，贴出效果图，基于java的物理引擎。"></a>首先，贴出效果图，基于java的物理引擎。</h3><p><img src="/2019/02/26/基于java的碰撞物理引擎/11.png" alt="11"></p><p><strong>完成这个效果需要考虑几件事情。</strong></p><h3 id="第一步显示定义出每一个颗粒，具体的形状，颜色，位置，速度…"><a href="#第一步显示定义出每一个颗粒，具体的形状，颜色，位置，速度…" class="headerlink" title="第一步显示定义出每一个颗粒，具体的形状，颜色，位置，速度…"></a>第一步显示定义出每一个颗粒，具体的形状，颜色，位置，速度…</h3><p>具体API如下：<br><img src="/2019/02/26/基于java的碰撞物理引擎/22.png" alt="22"></p><p>其实这里最关键的是上面的预测碰撞时间的算法，应用了大学物理的相关知识。<br>将三种碰撞的预测时间算出来，另外并依次赋予三种碰撞的效果。<br>然后将其放入一个可比较的事件中，通过遍历每一个球与其他球预测碰撞情况，放入优先队列中再依次处理。</p><h4 id="第一种-两球相撞"><a href="#第一种-两球相撞" class="headerlink" title="第一种 两球相撞"></a>第一种 两球相撞</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//时间</span></span><br><span class="line"><span class="comment">//注意下面几个地方的剪枝</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitBall</span> <span class="params">(Ball that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == that) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> dx = that.pos_x - <span class="keyword">this</span>.pos_x;</span><br><span class="line">        <span class="keyword">double</span> dy = that.pos_y - <span class="keyword">this</span>.pos_y;</span><br><span class="line">        <span class="keyword">double</span> dvx = that.vec_x - <span class="keyword">this</span>.vec_x;</span><br><span class="line">        <span class="keyword">double</span> dvy = that.vec_y - <span class="keyword">this</span>.vec_y;</span><br><span class="line">        <span class="keyword">double</span> dvdr = dx * dvx + dy * dvy;</span><br><span class="line">        <span class="keyword">if</span> (dvdr &gt; <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> dvdv = dvx * dvx + dvy * dvy;</span><br><span class="line">        <span class="keyword">if</span> (dvdv == <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> drdr = dx * dx + dy * dy;</span><br><span class="line">        <span class="keyword">double</span> sigma = <span class="keyword">this</span>.radius + that.radius;</span><br><span class="line">        <span class="keyword">double</span> d = (dvdr * dvdr) - dvdv * (drdr - sigma * sigma);</span><br><span class="line">        <span class="keyword">if</span> (d &lt; <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">return</span> -(dvdr + Math.sqrt(d)) / dvdv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//碰撞后的效果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceOff</span> <span class="params">(Ball that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dx = that.pos_x - <span class="keyword">this</span>.pos_x;</span><br><span class="line">        <span class="keyword">double</span> dy = that.pos_y - <span class="keyword">this</span>.pos_y;</span><br><span class="line">        <span class="keyword">double</span> dvx = that.vec_x - <span class="keyword">this</span>.vec_x;</span><br><span class="line">        <span class="keyword">double</span> dvy = that.vec_y - <span class="keyword">this</span>.vec_y;</span><br><span class="line">        <span class="keyword">double</span> dvdr = dx * dvx + dy * dvy;</span><br><span class="line">        <span class="keyword">double</span> dist = <span class="keyword">this</span>.radius + that.radius;</span><br><span class="line">        <span class="keyword">double</span> J = <span class="number">2</span> * <span class="keyword">this</span>.mass * that.mass * dvdr / ((<span class="keyword">this</span>.mass + that.mass) * dist);</span><br><span class="line">        <span class="keyword">double</span> Jx = J * dx / dist;</span><br><span class="line">        <span class="keyword">double</span> Jy = J * dy / dist;</span><br><span class="line">        <span class="keyword">this</span>.vec_x += Jx / <span class="keyword">this</span>.mass;</span><br><span class="line">        <span class="keyword">this</span>.vec_y += Jy / <span class="keyword">this</span>.mass;</span><br><span class="line">        that.vec_x -= Jx / that.mass;</span><br><span class="line">        that.vec_y -= Jy / that.mass;</span><br><span class="line">        <span class="keyword">this</span>.cnt ++;</span><br><span class="line">        that.cnt ++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="第二种与墙体发生碰撞"><a href="#第二种与墙体发生碰撞" class="headerlink" title="第二种与墙体发生碰撞"></a>第二种与墙体发生碰撞</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//碰撞垂直墙的时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitVerticalWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vec_x &gt; <span class="number">0</span>)  <span class="keyword">return</span> (border - pos_x - radius) / vec_x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vec_x &lt; <span class="number">0</span>) <span class="keyword">return</span> (radius - pos_x) / vec_x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> INFINITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//碰撞水平墙的时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitHorizontalWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vec_y &gt; <span class="number">0</span>)  <span class="keyword">return</span> (border - pos_y - radius) / vec_y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vec_y &lt; <span class="number">0</span>) <span class="keyword">return</span> (radius - pos_y) / vec_y;</span><br><span class="line">    <span class="keyword">return</span>  INFINITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//碰撞效果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceOffVerticalWall</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.cnt ++;</span><br><span class="line">   <span class="keyword">this</span>.vec_x = - <span class="keyword">this</span>.vec_x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceoffHorizontalWall</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cnt ++;</span><br><span class="line">    <span class="keyword">this</span>.vec_y = - <span class="keyword">this</span>.vec_y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以下便是第一个球体类型的完整代码"><a href="#以下便是第一个球体类型的完整代码" class="headerlink" title="以下便是第一个球体类型的完整代码"></a>以下便是第一个球体类型的完整代码</h3><p><strong>Ball.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdDraw;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//球的横纵坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> pos_x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> pos_y;</span><br><span class="line">    <span class="comment">//球的横纵方向上面的速度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> vec_x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> vec_y;</span><br><span class="line">    <span class="comment">//球的半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius;</span><br><span class="line">    <span class="comment">//球的质量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;</span><br><span class="line">    <span class="comment">//边界长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> border;</span><br><span class="line">    <span class="comment">//球的颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Color color;</span><br><span class="line">    <span class="comment">//碰撞次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//限定一个最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> INFINITY = Double.POSITIVE_INFINITY;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ball</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        pos_x     = StdRandom.uniform(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        pos_y     = StdRandom.uniform(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        vec_x     = StdRandom.uniform(-<span class="number">0.005</span>, <span class="number">0.005</span>);</span><br><span class="line">        vec_y     = StdRandom.uniform(-<span class="number">0.005</span>, <span class="number">0.005</span>);</span><br><span class="line">        radius    = <span class="number">0.01</span>;</span><br><span class="line">        mass      = <span class="number">0.5</span>;</span><br><span class="line">        border    = <span class="number">1</span>;</span><br><span class="line">        color     = Color.BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ball</span> <span class="params">(<span class="keyword">double</span> px,<span class="keyword">double</span> py,<span class="keyword">double</span> vx,<span class="keyword">double</span> vy,<span class="keyword">double</span> radius,<span class="keyword">double</span> mass,<span class="keyword">double</span> border,Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pos_x = px;</span><br><span class="line">        <span class="keyword">this</span>.pos_y = py;</span><br><span class="line">        <span class="keyword">this</span>.vec_x = vx;</span><br><span class="line">        <span class="keyword">this</span>.vec_y = vy;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        <span class="keyword">this</span>.mass = mass;</span><br><span class="line">        <span class="keyword">this</span>.border = border;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StdDraw.filledCircle(pos_x,pos_y,radius);</span><br><span class="line">        StdDraw.setPenColor(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span> <span class="params">(<span class="keyword">double</span> dt)</span> </span>&#123;</span><br><span class="line">        pos_x = pos_x + vec_x * dt;</span><br><span class="line">        pos_y = pos_y + vec_y * dt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitBall</span> <span class="params">(Ball that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == that) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> dx = that.pos_x - <span class="keyword">this</span>.pos_x;</span><br><span class="line">        <span class="keyword">double</span> dy = that.pos_y - <span class="keyword">this</span>.pos_y;</span><br><span class="line">        <span class="keyword">double</span> dvx = that.vec_x - <span class="keyword">this</span>.vec_x;</span><br><span class="line">        <span class="keyword">double</span> dvy = that.vec_y - <span class="keyword">this</span>.vec_y;</span><br><span class="line">        <span class="keyword">double</span> dvdr = dx * dvx + dy * dvy;</span><br><span class="line">        <span class="keyword">if</span> (dvdr &gt; <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> dvdv = dvx * dvx + dvy * dvy;</span><br><span class="line">        <span class="keyword">if</span> (dvdv == <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">double</span> drdr = dx * dx + dy * dy;</span><br><span class="line">        <span class="keyword">double</span> sigma = <span class="keyword">this</span>.radius + that.radius;</span><br><span class="line">        <span class="keyword">double</span> d = (dvdr * dvdr) - dvdv * (drdr - sigma * sigma);</span><br><span class="line">        <span class="keyword">if</span> (d &lt; <span class="number">0</span>) <span class="keyword">return</span> INFINITY;</span><br><span class="line">        <span class="keyword">return</span> -(dvdr + Math.sqrt(d)) / dvdv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitVerticalWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vec_x &gt; <span class="number">0</span>)  <span class="keyword">return</span> (border - pos_x - radius) / vec_x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vec_x &lt; <span class="number">0</span>) <span class="keyword">return</span> (radius - pos_x) / vec_x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> INFINITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">timeToHitHorizontalWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vec_y &gt; <span class="number">0</span>)  <span class="keyword">return</span> (border - pos_y - radius) / vec_y;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vec_y &lt; <span class="number">0</span>) <span class="keyword">return</span> (radius - pos_y) / vec_y;</span><br><span class="line">        <span class="keyword">return</span>  INFINITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceOff</span> <span class="params">(Ball that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dx = that.pos_x - <span class="keyword">this</span>.pos_x;</span><br><span class="line">        <span class="keyword">double</span> dy = that.pos_y - <span class="keyword">this</span>.pos_y;</span><br><span class="line">        <span class="keyword">double</span> dvx = that.vec_x - <span class="keyword">this</span>.vec_x;</span><br><span class="line">        <span class="keyword">double</span> dvy = that.vec_y - <span class="keyword">this</span>.vec_y;</span><br><span class="line">        <span class="keyword">double</span> dvdr = dx * dvx + dy * dvy;</span><br><span class="line">        <span class="keyword">double</span> dist = <span class="keyword">this</span>.radius + that.radius;</span><br><span class="line">        <span class="keyword">double</span> J = <span class="number">2</span> * <span class="keyword">this</span>.mass * that.mass * dvdr / ((<span class="keyword">this</span>.mass + that.mass) * dist);</span><br><span class="line">        <span class="keyword">double</span> Jx = J * dx / dist;</span><br><span class="line">        <span class="keyword">double</span> Jy = J * dy / dist;</span><br><span class="line">        <span class="keyword">this</span>.vec_x += Jx / <span class="keyword">this</span>.mass;</span><br><span class="line">        <span class="keyword">this</span>.vec_y += Jy / <span class="keyword">this</span>.mass;</span><br><span class="line">        that.vec_x -= Jx / that.mass;</span><br><span class="line">        that.vec_y -= Jy / that.mass;</span><br><span class="line">        <span class="keyword">this</span>.cnt ++;</span><br><span class="line">        that.cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceOffVerticalWall</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cnt ++;</span><br><span class="line">        <span class="keyword">this</span>.vec_x = - <span class="keyword">this</span>.vec_x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bounceoffHorizontalWall</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cnt ++;</span><br><span class="line">        <span class="keyword">this</span>.vec_y = - <span class="keyword">this</span>.vec_y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="其次，我们需要对以上球体类进行一个包装，将其赋予可比较的特性。"><a href="#其次，我们需要对以上球体类进行一个包装，将其赋予可比较的特性。" class="headerlink" title="其次，我们需要对以上球体类进行一个包装，将其赋予可比较的特性。"></a>其次，我们需要对以上球体类进行一个包装，将其赋予可比较的特性。</h3><p>因为从宏观上来看，我们需要比较的是每一个球体的碰撞情况，所以，用一个事件包含其诸多特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Collison_Event</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Collison_Event</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Ball a,b;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> time;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> countA,countB;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Collison_Event</span> <span class="params">(Ball a,Ball b,<span class="keyword">double</span> time)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">            <span class="keyword">this</span>.a = a;</span><br><span class="line">            <span class="keyword">this</span>.b = b;</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>) countA = a.count();</span><br><span class="line">            <span class="keyword">else</span>           countA = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (b != <span class="keyword">null</span>) countB = b.count();</span><br><span class="line">            <span class="keyword">else</span>           countB = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Collison_Event that)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.compare(<span class="keyword">this</span>.time,that.time);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.time == Double.POSITIVE_INFINITY) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a != <span class="keyword">null</span> &amp;&amp; a.count() != countA) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (b != <span class="keyword">null</span> &amp;&amp; b.count() != countB) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="最后就是整个包含类，就称为一个系统"><a href="#最后就是整个包含类，就称为一个系统" class="headerlink" title="最后就是整个包含类，就称为一个系统"></a>最后就是整个包含类，就称为一个系统</h3><p>思路就是预测碰撞的时间，放入优先队列中，另外，需要注意的核心的一点就是，其采用了时间限制，大于某个时间的球体碰撞即不放进队列中，避免开销。<br>还有，不要忘记重绘的条件，在这里加入一个HZ变量控制帧数。</p><h4 id="以下是第二个类的全部代码"><a href="#以下是第二个类的全部代码" class="headerlink" title="以下是第二个类的全部代码"></a>以下是第二个类的全部代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.MinPQ;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdDraw;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollisionSystem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> MinPQ&lt;Collison_Event&gt; pq;</span><br><span class="line">    <span class="comment">//相当于一个总控时间的一个参数，后面所有关于时间的参数都需要加上一个这个</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> t = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">protected</span> Ball[] balls;</span><br><span class="line">    <span class="comment">//这里就相当于一个控制每一帧数的频率控制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> HZ = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollisionSystem</span><span class="params">(Ball[] balls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balls = balls.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里新加上的一个参数 limit 是控制一些完全没必要的事件</span></span><br><span class="line">    <span class="comment">//意思就是剔除那些需要太长时间才会相撞的球体</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pridict</span> <span class="params">(Ball b,<span class="keyword">double</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; balls.length;i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> dt = b.timeToHitBall(balls[i]);</span><br><span class="line">            <span class="keyword">if</span> (t + dt &lt;= limit)</span><br><span class="line">                pq.insert(<span class="keyword">new</span> Collison_Event(b,balls[i],dt + t));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> dxt = b.timeToHitHorizontalWall() + t;</span><br><span class="line">        <span class="keyword">double</span> dyt = b.timeToHitVerticalWall() + t;</span><br><span class="line">        <span class="keyword">if</span> (dxt &lt;= limit)</span><br><span class="line">            pq.insert(<span class="keyword">new</span> Collison_Event(b,<span class="keyword">null</span>,dxt));</span><br><span class="line">        <span class="keyword">if</span> (dyt &lt;= limit)</span><br><span class="line">            pq.insert(<span class="keyword">new</span> Collison_Event(<span class="keyword">null</span>,b,dyt));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">redrew</span><span class="params">(<span class="keyword">double</span> limit)</span> </span>&#123;</span><br><span class="line">        StdDraw.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; balls.length;i++) &#123;</span><br><span class="line">            balls[i].draw();</span><br><span class="line">        &#125;</span><br><span class="line">        StdDraw.show();</span><br><span class="line">        StdDraw.pause(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; limit) &#123;</span><br><span class="line">            pq.insert(<span class="keyword">new</span> Collison_Event(<span class="keyword">null</span>,<span class="keyword">null</span>,t + <span class="number">1.0</span> / HZ));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">simulate</span> <span class="params">(<span class="keyword">double</span> limit)</span> </span>&#123;</span><br><span class="line">        pq = <span class="keyword">new</span> MinPQ&lt;Collison_Event&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; balls.length; i++) &#123;</span><br><span class="line">            pridict(balls[i],limit);</span><br><span class="line">        &#125;</span><br><span class="line">        pq.insert(<span class="keyword">new</span> Collison_Event(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            Collison_Event event = pq.delMin();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!event.isValid()) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将其他的点全部移动</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; balls.length; i++) &#123;</span><br><span class="line">                balls[i].move(event.time - t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            t = event.time;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (event.a != <span class="keyword">null</span> &amp;&amp; event.b != <span class="keyword">null</span>) event.a.bounceOff(event.b);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event.a == <span class="keyword">null</span> &amp;&amp; event.b != <span class="keyword">null</span>) event.b.bounceOffVerticalWall();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event.a != <span class="keyword">null</span> &amp;&amp; event.b == <span class="keyword">null</span>) event.a.bounceoffHorizontalWall();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event.a == <span class="keyword">null</span> &amp;&amp; event.b == <span class="keyword">null</span>) redrew(limit);</span><br><span class="line"></span><br><span class="line">            pridict(event.a,limit);</span><br><span class="line">            pridict(event.b,limit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Collison_Event</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Collison_Event</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Ball a,b;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> time;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> countA,countB;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Collison_Event</span> <span class="params">(Ball a,Ball b,<span class="keyword">double</span> time)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">            <span class="keyword">this</span>.a = a;</span><br><span class="line">            <span class="keyword">this</span>.b = b;</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>) countA = a.count();</span><br><span class="line">            <span class="keyword">else</span>           countA = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (b != <span class="keyword">null</span>) countB = b.count();</span><br><span class="line">            <span class="keyword">else</span>           countB = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Collison_Event that)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.compare(<span class="keyword">this</span>.time,that.time);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.time == Double.POSITIVE_INFINITY) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a != <span class="keyword">null</span> &amp;&amp; a.count() != countA) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (b != <span class="keyword">null</span> &amp;&amp; b.count() != countB) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        StdDraw.setCanvasSize(<span class="number">600</span>,<span class="number">600</span>);</span><br><span class="line">        <span class="comment">//这个是清楚缓冲 帮助改善运动的</span></span><br><span class="line">        StdDraw.enableDoubleBuffering();</span><br><span class="line">        Ball[] balls = <span class="keyword">new</span> Ball[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            balls[i] = <span class="keyword">new</span> Ball();</span><br><span class="line">        &#125;</span><br><span class="line">        CollisionSystem system = <span class="keyword">new</span> CollisionSystem(balls);</span><br><span class="line">        system.simulate(<span class="number">100000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="物理引擎" scheme="http://wsx1128.xyz/tags/%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>普林斯顿算法课第四周小作业</title>
    <link href="http://wsx1128.xyz/2019/02/24/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%B0%8F%E4%BD%9C%E4%B8%9A/"/>
    <id>http://wsx1128.xyz/2019/02/24/普林斯顿算法课第四周小作业/</id>
    <published>2019-02-23T17:06:44.000Z</published>
    <updated>2019-02-23T17:17:01.483Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第四周的小作业主要围绕优先队列以及基于优先队列的Taxicabnumber。"><a href="#第四周的小作业主要围绕优先队列以及基于优先队列的Taxicabnumber。" class="headerlink" title="第四周的小作业主要围绕优先队列以及基于优先队列的Taxicabnumber。"></a>第四周的小作业主要围绕优先队列以及基于优先队列的<code>Taxicabnumber</code>。</h2><p>先贴出关于优先队列的代码<br><strong>MaxPQ.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week4.PQ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Key</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Key[] key;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;Key&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(<span class="keyword">int</span> init)</span></span>&#123;</span><br><span class="line">        key = (Key[]) <span class="keyword">new</span> Object[<span class="number">1</span> + init];</span><br><span class="line">        len = <span class="number">0</span> + init;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span> <span class="params">(<span class="keyword">int</span> init , Comparator&lt;Key&gt; rule)</span></span>&#123;</span><br><span class="line">        comparator = rule;</span><br><span class="line">        key = (Key[]) <span class="keyword">new</span> Object[<span class="number">1</span> + init];</span><br><span class="line">        len = <span class="number">0</span> + init;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> key[i].compareTo(key[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> comparator.compare(key[i],key[j]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Key temp = key[i];</span><br><span class="line">        key[i] = key[j];</span><br><span class="line">        key[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k * <span class="number">2</span> &lt;= len) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = k * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; len &amp;&amp; less(j,j+<span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(k,j)) <span class="keyword">break</span>;</span><br><span class="line">            change(k,j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k / <span class="number">2</span>,k)) &#123;</span><br><span class="line">            change(k, k / <span class="number">2</span>);</span><br><span class="line">            k = k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Key[] temp = (Key[]) <span class="keyword">new</span> Object[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len;i++) &#123;</span><br><span class="line">            temp[i] = key[i];</span><br><span class="line">        &#125;</span><br><span class="line">        key = temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> len == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">get</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"wrong"</span>);</span><br><span class="line">        <span class="keyword">if</span> (len + <span class="number">1</span> == key.length)  resize(<span class="number">2</span> * key.length);</span><br><span class="line">        key[++len] = item;</span><br><span class="line">        up(len);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxHeap</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是帮助后面完成一个assert判断而存在的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMaxHeap</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; len) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">2</span>*k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left  &lt;= len &amp;&amp; less(k, left))  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt;= len &amp;&amp; less(k, right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxHeap(left) &amp;&amp; isMaxHeap(right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())  <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Key item = key[<span class="number">1</span>];</span><br><span class="line">        key[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        change(<span class="number">1</span>,len--);</span><br><span class="line">        sink(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (len + <span class="number">1</span> &lt;= key.length / <span class="number">4</span> &amp;&amp; len &gt; <span class="number">0</span> ) resize(key.length / <span class="number">2</span>);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxHeap</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Key&gt; <span class="title">iterator</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> heapIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">heapIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Key</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> MaxPQ&lt;Key&gt; copy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">heapIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) &#123;</span><br><span class="line">                copy = <span class="keyword">new</span> MaxPQ&lt;Key&gt;(len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> copy = <span class="keyword">new</span> MaxPQ&lt;Key&gt;(len,comparator);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">                copy.insert(key[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isEmpty()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Key <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> copy.delMax();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        edu.princeton.cs.algs4.MaxPQ&lt;String&gt; pq = <span class="keyword">new</span> edu.princeton.cs.algs4.MaxPQ&lt;String&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            String item = StdIn.readString();</span><br><span class="line">            <span class="keyword">if</span> (!item.equals(<span class="string">"-"</span>)) pq.insert(item);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!pq.isEmpty()) StdOut.print(pq.delMax() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println(<span class="string">"("</span> + pq.size() + <span class="string">" left on pq)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机优先队列</p><p><strong>RandomPQ.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Interview_Question_Week4.PQ.MaxPQ;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">MaxPQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomPQ</span> <span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(n);</span><br><span class="line">        <span class="keyword">this</span>.len = <span class="keyword">super</span>.len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comparable&lt;Key&gt; <span class="title">sample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = StdRandom.uniform(len + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.get(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comparable&lt;Key&gt; <span class="title">randomRemove</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = StdRandom.uniform(len + <span class="number">1</span>);</span><br><span class="line">        Comparable&lt;Key&gt; item = key[n];</span><br><span class="line">        change(n,len--);</span><br><span class="line">        key[len + <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        sink(n);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先队列的一些应用<br><strong>PriorityQueue.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MaxPQ&lt;Integer&gt; left;</span><br><span class="line">    <span class="keyword">private</span> MinPQ&lt;Integer&gt; right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        left = <span class="keyword">new</span> MaxPQ&lt;Integer&gt;();</span><br><span class="line">        right = <span class="keyword">new</span> MinPQ&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = left.size();</span><br><span class="line">        <span class="keyword">int</span> R = right.size();</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> (left.max() + right.min()) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span> left.max();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> right.min();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> median = findMedian();</span><br><span class="line">        <span class="keyword">int</span> L = left.size();</span><br><span class="line">        <span class="keyword">int</span> R = right.size();</span><br><span class="line">        <span class="keyword">if</span> (key &lt;= median) &#123;</span><br><span class="line">            left.insert(key);</span><br><span class="line">            <span class="keyword">if</span> (L - R &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                right.insert(left.delMax());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            right.insert(key);</span><br><span class="line">            <span class="keyword">if</span> (R - L &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                left.insert(right.delMin());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = left.size();</span><br><span class="line">        <span class="keyword">int</span> R = right.size();</span><br><span class="line">        <span class="keyword">if</span> (L &gt; R) &#123;</span><br><span class="line">            left.delMax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            right.delMin();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>有四个数 a,b,c,d 满足 a^3 + b^3 = c^3 +d^3，然后再给一个数 n，求出 n之内所有满足上述等式的四个数</p></blockquote><p><strong>思路</strong><br>此处就是运用优先队列，将没两个数的立方和加起来，然后再以立方和的大小来进行排序，作为最后排序的标准，最后进行比较，可做优化。</p><p>代码如下：</p><p><strong>Taxicab</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.MinPQ;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Taxicab</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Taxicab</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> cube;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Taxicab</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = x;</span><br><span class="line">        <span class="keyword">this</span>.b = y;</span><br><span class="line">        <span class="keyword">this</span>.cube = x * x * x + y * y * y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Taxicab a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cube &lt; a.cube) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cube &gt; a.cube) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.a &lt; a.a) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.a &gt; a.a) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"number: "</span> + cube + <span class="string">" ("</span> + a + <span class="string">", "</span> + b + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findTaxicabNumber</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        MinPQ&lt;Taxicab&gt; candidate = <span class="keyword">new</span> MinPQ&lt;Taxicab&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= N;i++) &#123;</span><br><span class="line">            candidate.insert(<span class="keyword">new</span> Taxicab(i,i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        Taxicab pre = <span class="keyword">new</span> Taxicab(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (!candidate.isEmpty()) &#123;</span><br><span class="line">            Taxicab curr = candidate.delMin();</span><br><span class="line">            <span class="keyword">if</span> (curr == pre) &#123;</span><br><span class="line">                cnt ++;</span><br><span class="line">                <span class="keyword">if</span> (cnt == <span class="number">2</span>) &#123;</span><br><span class="line">                    StdOut.print(pre.cube + <span class="string">"="</span> + pre);</span><br><span class="line">                &#125;</span><br><span class="line">                StdOut.print(<span class="string">" = "</span> + curr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt &gt; <span class="number">1</span>) StdOut.println();</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = curr;</span><br><span class="line">            <span class="keyword">if</span> (curr.a &lt; N) candidate.insert(<span class="keyword">new</span> Taxicab(curr.a,curr.b + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>CollinearPoint</title>
    <link href="http://wsx1128.xyz/2019/02/24/CollinearPoint/"/>
    <id>http://wsx1128.xyz/2019/02/24/CollinearPoint/</id>
    <published>2019-02-23T16:49:33.000Z</published>
    <updated>2019-02-23T17:06:02.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CollinearPoint—–普林斯顿第三周大作业"><a href="#CollinearPoint—–普林斯顿第三周大作业" class="headerlink" title="CollinearPoint—–普林斯顿第三周大作业"></a>CollinearPoint—–普林斯顿第三周大作业</h2><p>第三周的大作业 有点意思，基于排序的一次简单优化，先看题目。</p><p><img src="/2019/02/24/CollinearPoint/11.png" alt="11"><br><img src="/2019/02/24/CollinearPoint/22.png" alt="22"><br><img src="/2019/02/24/CollinearPoint/33.png" alt="33"><br><img src="/2019/02/24/CollinearPoint/44.png" alt="44"></p><p>一步一步来，根据题目首先写出一个点的类，这个类要包含比较，并且，要包含求出两个类之间斜率的方法。<br><strong>Point.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdDraw;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StdDraw.point(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>   <span class="keyword">void</span> <span class="title">drawTo</span><span class="params">(Point that)</span> </span>&#123;</span><br><span class="line">        StdDraw.line(x,y,that.x,that.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span> + x + <span class="string">", "</span> + y + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Point that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; that.y)         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; that.y)    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; that.x)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; that.x)    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">slopeTo</span><span class="params">(Point that)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == that.x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (y == that.y) <span class="keyword">return</span> Double.NEGATIVE_INFINITY;</span><br><span class="line">            <span class="keyword">else</span>             <span class="keyword">return</span> Double.POSITIVE_INFINITY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y == that.y) <span class="keyword">return</span> <span class="number">0</span> / <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">return</span> (y - that.y) * <span class="number">1.0</span> / (x - that.x);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SlopeOrder</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Point</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Point p, Point q)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (slopeTo(p) &lt; slopeTo(q)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (slopeTo(p) &gt; slopeTo(q)) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comparator&lt;Point&gt; <span class="title">slopeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span>  SlopeOrder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x0 = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> y0 = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        StdDraw.setCanvasSize(<span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">        StdDraw.setXscale(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">        StdDraw.setYscale(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">        StdDraw.setPenRadius(<span class="number">0.005</span>);</span><br><span class="line">        StdDraw.enableDoubleBuffering();</span><br><span class="line"></span><br><span class="line">        Point[] points = <span class="keyword">new</span> Point[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = StdRandom.uniform(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">int</span> y = StdRandom.uniform(<span class="number">50</span>);</span><br><span class="line">            points[i] = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">            points[i].draw();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// draw p = (x0, x1) in red</span></span><br><span class="line">        Point p = <span class="keyword">new</span> Point(x0, y0);</span><br><span class="line"></span><br><span class="line">        StdDraw.setPenColor(StdDraw.RED);</span><br><span class="line">        StdDraw.setPenRadius(<span class="number">0.02</span>);</span><br><span class="line">        p.draw();</span><br><span class="line">        <span class="comment">// draw line segments from p to each point, one at a time, in polar order</span></span><br><span class="line">        StdDraw.setPenRadius();</span><br><span class="line">        StdDraw.setPenColor(StdDraw.BLUE);</span><br><span class="line">        Arrays.sort(points, p.slopeOrder());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            p.drawTo(points[i]);</span><br><span class="line">            StdDraw.show();</span><br><span class="line">            StdDraw.pause(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是直线的类，这两个类都比较简单，这里就直接贴出代码<br><strong>LineSegment.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSegment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Point a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Point b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineSegment</span><span class="params">(Point p, Point q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || q == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line">        a = p;</span><br><span class="line">        b = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a.drawTo(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="string">" -&gt; "</span> + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hasCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后就是问题的求解方法。<br>问题 需要知道平面上的点，有哪些点是在一条直线上的，第一种方法，暴力法，直接用四种循环写出答案。</p><p><strong>BruteCollinearPoints.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BruteCollinearPoints</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Point[] copies;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;LineSegment&gt; lineSegments = <span class="keyword">new</span> ArrayList&lt;LineSegment&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// finds all line segments containing 4 points</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BruteCollinearPoints</span><span class="params">(<span class="keyword">final</span> Point[] points)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (points == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        copies = <span class="keyword">new</span> Point[points.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            copies[i] = points[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sort by y-coordinate</span></span><br><span class="line">        <span class="comment">// the endpoints are the first and last points</span></span><br><span class="line">        Arrays.sort(copies);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// after sort then can check if duplicate</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copies.length - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (copies[i].compareTo(copies[i+<span class="number">1</span>]) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ip = <span class="number">0</span>; ip &lt; copies.length-<span class="number">3</span>; ip++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> iq = ip + <span class="number">1</span>; iq &lt; copies.length-<span class="number">2</span>; iq++) &#123;</span><br><span class="line">                <span class="keyword">double</span> slopeP2Q = copies[ip].slopeTo(copies[iq]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> ir = iq + <span class="number">1</span>; ir &lt; copies.length-<span class="number">1</span>; ir++) &#123;</span><br><span class="line">                    <span class="keyword">double</span> slopeQ2R = copies[iq].slopeTo(copies[ir]);</span><br><span class="line">                    <span class="keyword">if</span> (slopeP2Q != slopeQ2R) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> is = ir + <span class="number">1</span>; is &lt; copies.length; is++) &#123;</span><br><span class="line">                        <span class="keyword">double</span> slopeR2S = copies[ir].slopeTo(copies[is]);</span><br><span class="line">                        <span class="comment">// if 3 of 4's slopes are equal then 4 points are colllinear</span></span><br><span class="line">                        <span class="keyword">if</span> (slopeP2Q == slopeR2S)</span><br><span class="line">                            lineSegments.add(<span class="keyword">new</span> LineSegment(copies[ip], copies[is]));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the number of line segments</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfSegments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lineSegments.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the line segments</span></span><br><span class="line">    <span class="keyword">public</span> LineSegment[] segments() &#123;</span><br><span class="line">        LineSegment[] result = <span class="keyword">new</span> LineSegment[lineSegments.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lineSegments.size(); i++) &#123;</span><br><span class="line">            result[i] = lineSegments.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>优化的方法就是基于排序，将每一个点都与已经排好序的点集进行比较，按照一定的顺序进行比较可以省略很多。<br><strong>FastCollinearPoints.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Programming_Assignment_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastCollinearPoints</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Point[] copies;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;LineSegment&gt; lineSegments = <span class="keyword">new</span> ArrayList&lt;LineSegment&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// finds all line segments containing 4 or more points</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastCollinearPoints</span><span class="params">(Point[] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (points == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        copies = <span class="keyword">new</span> Point[points.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            copies[i] = points[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sort by y-coordinate</span></span><br><span class="line">        <span class="comment">// the endpoints are the first and last points</span></span><br><span class="line">        Arrays.sort(copies);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// after sort then can check if duplicate</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copies.length - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (copies[i].compareTo(copies[i+<span class="number">1</span>]) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copies.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            Point origin = copies[i];             <span class="comment">// Think of p as the origin.</span></span><br><span class="line">            <span class="keyword">double</span>[] slopes = <span class="keyword">new</span> <span class="keyword">double</span>[copies.length - <span class="number">1</span> - i];</span><br><span class="line">            Point[] others = <span class="keyword">new</span> Point[copies.length - <span class="number">1</span> - i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; copies.length - <span class="number">1</span> - i; j++)</span><br><span class="line">                others[j] = copies[j + <span class="number">1</span> + i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// For each other point q, determine the slope it makes with p</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; others.length; j++)</span><br><span class="line">                slopes[j] = origin.slopeTo(others[j]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Sort the points according to the slopes they makes with p</span></span><br><span class="line">            Arrays.sort(others, origin.slopeOrder());</span><br><span class="line"></span><br><span class="line">            Arrays.sort(slopes);</span><br><span class="line">            <span class="comment">// Check if any 3 (or more) adjacent points in the</span></span><br><span class="line">            <span class="comment">// sorted order have equal slopes with respect to p</span></span><br><span class="line">            <span class="comment">// If so, these points, together with p, are collinear</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> cnt_same = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; slopes.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (slopes[j] == slopes[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    cnt_same++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cnt_same &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    lineSegments.add(<span class="keyword">new</span> LineSegment(origin, others[j + <span class="number">1</span>]));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the number of line segments</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfSegments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lineSegments.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the line segments</span></span><br><span class="line">    <span class="keyword">public</span> LineSegment[] segments() &#123;</span><br><span class="line">        LineSegment[] result = <span class="keyword">new</span> LineSegment[lineSegments.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lineSegments.size(); i++) &#123;</span><br><span class="line">            result[i] = lineSegments.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于暴力做法运算了很多原本不需要的循环，相当于是做了很多重复功，所以不招收待见，而基于优化的版本进行了优化，所以在实际应用中是可取的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>普林斯顿算法课第三周小作业</title>
    <link href="http://wsx1128.xyz/2019/02/24/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%AC%E4%B8%89%E5%91%A8%E5%B0%8F%E4%BD%9C%E4%B8%9A/"/>
    <id>http://wsx1128.xyz/2019/02/24/普林斯顿算法课第三周小作业/</id>
    <published>2019-02-23T16:44:03.000Z</published>
    <updated>2019-02-23T16:48:28.167Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第三周主要讲的是归并排序和快速排序，这里在C-里面已经总结过，直接贴出代码。"><a href="#第三周主要讲的是归并排序和快速排序，这里在C-里面已经总结过，直接贴出代码。" class="headerlink" title="第三周主要讲的是归并排序和快速排序，这里在C++里面已经总结过，直接贴出代码。"></a>第三周主要讲的是归并排序和快速排序，这里在C++里面已经总结过，直接贴出代码。</h2><p><strong>CountInversions</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountInversions</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Comparable[] aux;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> inversion = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span> <span class="params">(Comparable a,Comparable b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">get_num</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        sort(a,<span class="number">0</span>,a.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> inversion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (lo + high) / <span class="number">2</span>;</span><br><span class="line">        sort(a,lo,mid);</span><br><span class="line">        sort(a,mid+<span class="number">1</span>,high);</span><br><span class="line">        merge(a,lo,mid,high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> mid,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= high;k++)&#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo;k &lt;= high;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; high) a[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (less (aux[i],aux[j]))&#123;</span><br><span class="line">                <span class="comment">// 这一步的目的就在于逆序对的个数，前面有多少个大于自己个数，就有多少个逆序对</span></span><br><span class="line">                inversion += mid + <span class="number">1</span> - i;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> a[k] = aux[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        Integer []a = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> CountInversions().get_num(a));</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LinkedMergedArrays</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedMergedArrays</span> &lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Node last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Node next;</span><br><span class="line">        T item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span> <span class="params">(Comparable a,Comparable b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            T t = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node();</span><br><span class="line">        node.item = t;</span><br><span class="line">        node.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(first == <span class="keyword">null</span> &amp;&amp; last == <span class="keyword">null</span>)&#123;</span><br><span class="line">            first = node;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(first != <span class="keyword">null</span> &amp;&amp; first == last)&#123;</span><br><span class="line">            first.next = node;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            last.next = node;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Iterator&lt;T&gt; iter = iterator();</span><br><span class="line">        String ret = iter.next().toString();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">            ret += <span class="string">", "</span>+ iter.next().toString() ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下代码是第一种方式的归并 还有第二种形式的归并 明天可以写一下。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        first = sort(first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">sort</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        Node slow = head;</span><br><span class="line">        Node fast = head;</span><br><span class="line">        <span class="comment">//取中间节点</span></span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node left = head;</span><br><span class="line">        Node right = slow.next;</span><br><span class="line">        slow.next = <span class="keyword">null</span>; <span class="comment">//将左右链表分开</span></span><br><span class="line">        left = sort(left);</span><br><span class="line">        right = sort(right);</span><br><span class="line">        <span class="keyword">return</span> merge(left,right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">merge</span><span class="params">(Node left, Node right)</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println("left="+left.element+",right="+right.element);</span></span><br><span class="line">        Node aux = <span class="keyword">new</span> Node(); <span class="comment">//需要耗费logn的额外空间</span></span><br><span class="line">        Node l= left;</span><br><span class="line">        Node r = right;</span><br><span class="line">        Node current = aux;</span><br><span class="line">        <span class="keyword">while</span>(l != <span class="keyword">null</span> &amp;&amp; r!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(less(r.item,l.item)) &#123;</span><br><span class="line">                current.next = r;</span><br><span class="line">                current = current.next;</span><br><span class="line">                r = r.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                current.next = l;</span><br><span class="line">                current = current.next;</span><br><span class="line">                l= l.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l!=<span class="keyword">null</span>) current.next = l; <span class="comment">// 如果左侧没遍历完，将其连接至current后</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r != <span class="keyword">null</span>) current.next = r; <span class="comment">//如果右侧没遍历完，将其连接至current后</span></span><br><span class="line">        <span class="keyword">return</span> aux.next; <span class="comment">//返回归并好的链表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>MergeSortedSubArray</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortedSubArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span> <span class="params">(Comparable a,Comparable b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = array.length / <span class="number">2</span>;</span><br><span class="line">        Comparable[] aux = <span class="keyword">new</span> Comparable[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            aux[i] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(aux));</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k&lt;<span class="number">2</span>*n;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l &gt;= n) <span class="keyword">break</span>;<span class="comment">//辅助元素数组全部用完，array右侧不需要挪动位置了</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(r&gt;=<span class="number">2</span>*n) array[k]=aux[l++];<span class="comment">//array原右侧元素全部放置合适位置，后面只需把辅助数组的元素挪到array右侧</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(less(array[r],aux[l])) array[k] = array[r++];</span><br><span class="line">            <span class="keyword">else</span> array[k] = aux[l++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>普林斯顿第二周小作业</title>
    <link href="http://wsx1128.xyz/2019/02/24/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%B0%8F%E4%BD%9C%E4%B8%9A/"/>
    <id>http://wsx1128.xyz/2019/02/24/普林斯顿第二周小作业/</id>
    <published>2019-02-23T16:35:56.000Z</published>
    <updated>2019-02-24T02:44:25.515Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第二周是关于队列与栈的相关实现，由于C-里面早就涉及到了，这里并不多说，直接贴代码"><a href="#第二周是关于队列与栈的相关实现，由于C-里面早就涉及到了，这里并不多说，直接贴代码" class="headerlink" title="第二周是关于队列与栈的相关实现，由于C++里面早就涉及到了，这里并不多说，直接贴代码"></a>第二周是关于队列与栈的相关实现，由于C++里面早就涉及到了，这里并不多说，直接贴代码</h1><p><strong>Elementary_Sorts</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week2.Elementary_Sorts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Ball &#123;</span><br><span class="line">    Red,</span><br><span class="line">    Blue,</span><br><span class="line">    White;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Backets</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Ball backets[];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Ball <span class="title">color</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> backets[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        Ball tmp = backets[i];</span><br><span class="line">        backets[i] = backets[j];</span><br><span class="line">        backets[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Backets</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        backets = <span class="keyword">new</span> Ball[n];</span><br><span class="line">        <span class="keyword">for</span> (Ball i : backets)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = StdRandom.uniform(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">switch</span> (x)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: &#123;i = Ball.Blue;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: &#123; i = Ball.Red;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: &#123;i = Ball.White;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = backets.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur &lt;= high)&#123;</span><br><span class="line">            <span class="keyword">switch</span> (color(cur))&#123;</span><br><span class="line">                <span class="keyword">case</span> Red: &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cur != low) &#123;</span><br><span class="line">                        swap(cur, low);</span><br><span class="line">                    &#125;</span><br><span class="line">                    cur++;</span><br><span class="line">                    low++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> White: &#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> Blue: &#123;</span><br><span class="line">                    swap (high,cur);</span><br><span class="line">                    high--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Interview_Question_Week2.Elementary_Sorts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Point;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Intersection_of_two_sets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Point&gt; same;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sameTimes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Intersection_of_two_sets</span><span class="params">(Point[]a , Point[]b,<span class="keyword">int</span> times)</span></span>&#123;</span><br><span class="line">        same = <span class="keyword">new</span> HashSet&lt;Point&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; times;i++)&#123;</span><br><span class="line">            same.add(a[i]);</span><br><span class="line">            same.add(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sameTimes = times * <span class="number">2</span> - same.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sameTimes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        Random ra = <span class="keyword">new</span> Random();</span><br><span class="line">        Point[] a = <span class="keyword">new</span> Point[<span class="number">10</span>];</span><br><span class="line">        Point[] b = <span class="keyword">new</span> Point[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            a[i] = <span class="keyword">new</span> Point();</span><br><span class="line">            b[i] = <span class="keyword">new</span> Point();</span><br><span class="line">            a[i].setLocation(ra.nextInt(<span class="number">10</span>)+<span class="number">1</span>,ra.nextInt(<span class="number">10</span>)+<span class="number">1</span>);</span><br><span class="line">            b[i].setLocation(ra.nextInt(<span class="number">10</span>)+<span class="number">1</span>,ra.nextInt(<span class="number">10</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Intersection_of_two_sets i = <span class="keyword">new</span> Intersection_of_two_sets(a,b,n);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        System.out.println(Arrays.toString(b));</span><br><span class="line">        System.out.println(i.same);</span><br><span class="line">        System.out.println(i.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>MaxArrayStack</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxArrayStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Max;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> []a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Max = -<span class="number">999999999</span>;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">1</span>];</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span> [capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i != sz;i++)&#123;</span><br><span class="line">            tmp[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sz == a.length) resize(a.length * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item &gt; Max) Max = item;</span><br><span class="line">        check();</span><br><span class="line">        a[sz++] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[--sz];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        MaxArrayStack mStack = <span class="keyword">new</span> MaxArrayStack();</span><br><span class="line">        mStack.push(<span class="number">4</span>);</span><br><span class="line">        mStack.push(<span class="number">5</span>);</span><br><span class="line">        mStack.push(<span class="number">6</span>);</span><br><span class="line">        mStack.push(<span class="number">2</span>);</span><br><span class="line">        mStack.push(<span class="number">1</span>);</span><br><span class="line">        mStack.push(<span class="number">10</span>);</span><br><span class="line">        mStack.push(<span class="number">7</span>);</span><br><span class="line">        mStack.push(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(mStack);</span><br><span class="line">        System.out.println(mStack.getMax());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>MaxLinkedStack</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Interview_Question_Week2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxLinkedStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="keyword">private</span> Node max;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> item;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxLinkedStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        N = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        max = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> max.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">double</span> item)</span> </span>&#123;</span><br><span class="line">        Node oldfirst = first;</span><br><span class="line">        first = <span class="keyword">new</span> Node();</span><br><span class="line">        first.item = item;</span><br><span class="line">        first.next = oldfirst;</span><br><span class="line">        N++;</span><br><span class="line">        <span class="keyword">if</span> (item &gt;= getMax()) &#123;</span><br><span class="line">            Node oldmax = max;</span><br><span class="line">            max = <span class="keyword">new</span> Node();</span><br><span class="line">            max.next = oldmax;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> tmp = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">if</span> (tmp == getMax()) &#123;</span><br><span class="line">            max = max.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>StackQueue</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Interview_Question_Week2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackQueue</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Item&gt; input = <span class="keyword">new</span> Stack &lt;Item&gt;();</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Item&gt; output = <span class="keyword">new</span> Stack &lt;Item&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input.size() + output.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"wrong enquene"</span>);</span><br><span class="line">        input.push(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"out of range"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (output.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span> (!input.isEmpty())&#123;</span><br><span class="line">                output.push(input.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        StackQueue&lt;Integer&gt; squeue = <span class="keyword">new</span> StackQueue&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">"Size: "</span> + squeue.size());</span><br><span class="line">        squeue.enqueue(i);</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Dequeue: "</span> + squeue.dequeue());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                squeue.enqueue(i);</span><br><span class="line">                System.out.println(<span class="string">"Enqueue: "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Size: "</span> + squeue.size());</span><br><span class="line">        <span class="keyword">while</span> (!squeue.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Dequeue: "</span> + squeue.dequeue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Size: "</span> + squeue.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Permutation</title>
    <link href="http://wsx1128.xyz/2019/02/24/Permutation/"/>
    <id>http://wsx1128.xyz/2019/02/24/Permutation/</id>
    <published>2019-02-23T16:14:38.000Z</published>
    <updated>2019-02-23T16:23:16.888Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Permutation——普林斯顿算法大作业第二次"><a href="#Permutation——普林斯顿算法大作业第二次" class="headerlink" title="Permutation——普林斯顿算法大作业第二次"></a>Permutation——普林斯顿算法大作业第二次</h1><p>总的来说第二次算法大作业比较简单，实现以下双端队列，以及随机出队的队列。<br>鉴于这个难度系数，我这里直接写了两种，基于数组与基于链表两种方式，首先先看题目。</p><p><img src="/2019/02/24/Permutation/11.png" alt="1"><br><img src="/2019/02/24/Permutation/22.png" alt="2"></p><p>由于比较简单 这里不多说 直接开始贴代码。</p><p><strong>Deque</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deque</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node first,last;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Item item;</span><br><span class="line">        Node next;</span><br><span class="line">        Node previous;</span><br><span class="line">        Node (Item i)&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = <span class="keyword">null</span>;</span><br><span class="line">            previous = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Deque</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first = last = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        Node oldFirst = first;</span><br><span class="line">        first = <span class="keyword">new</span> Node(item);</span><br><span class="line">        first.previous = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            last = first;</span><br><span class="line">            first.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.next = oldFirst;</span><br><span class="line">            oldFirst.previous = first;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        Node tmp = <span class="keyword">new</span> Node(item);</span><br><span class="line">        tmp.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            first = tmp;</span><br><span class="line">            last = tmp;</span><br><span class="line">            last.previous = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = tmp;</span><br><span class="line">            tmp.previous = last;</span><br><span class="line">            last = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        Item cnt = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">             last = first =<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.previous = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        Item cnt = last.item;</span><br><span class="line">        last = last.previous;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            first = last = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DequeIterator(first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DequeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DequeIterator</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">            current = first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext())&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">            Item cnt = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>RandomizedQueue</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="keyword">import</span> java.lang.UnsupportedOperationException;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//原本最初的打算是直接用链表进行实现的，</span></span><br><span class="line"><span class="comment">//但是后来才发现性能要求迭代器的next的方法必须是常数时间，</span></span><br><span class="line"><span class="comment">//而用链表实现不了，所以改用数组实现。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomizedQueue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomizedQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        array = (Item[]) <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= array.length)&#123;</span><br><span class="line">            resize(array.length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; array.length / <span class="number">4</span>)&#123;</span><br><span class="line">            resize(array.length / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Item[] tmp = (Item[]) <span class="keyword">new</span> Object[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; size;i++)&#123;</span><br><span class="line">            tmp[i] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        array = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"wrong input"</span>);</span><br><span class="line">        check();</span><br><span class="line">        array[size++] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">int</span> random = StdRandom.uniform(size);</span><br><span class="line">        Item cnt =array[random];</span><br><span class="line">        array[random] = array[size - <span class="number">1</span>];</span><br><span class="line">        array[--size] = <span class="keyword">null</span>;</span><br><span class="line">        check();</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">sample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> array[StdRandom.uniform(size)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> rank;</span><br><span class="line">        <span class="keyword">private</span> Item[] iarray;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RandomIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            rank = size;</span><br><span class="line">            iarray = (Item[]) <span class="keyword">new</span> Object[rank];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; rank;i++)&#123;</span><br><span class="line">                iarray[i] = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> rank &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span> <span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">int</span> random = StdRandom.uniform(rank);</span><br><span class="line">            rank--;</span><br><span class="line">            Item item = iarray[random];</span><br><span class="line">            iarray[random] = iarray[rank];</span><br><span class="line">            <span class="comment">//这里需要注意的是 与上面直接在原数组上面操作的区别就在于不能直接令后面等于null</span></span><br><span class="line">            <span class="comment">//如 iarray[rank] = null 这样造成的后果是多用几次迭代器使用不了了。</span></span><br><span class="line">            iarray[rank] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Permutation</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Programming_Assignment_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permutation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RandomizedQueue&lt;String&gt; rq = <span class="keyword">new</span> RandomizedQueue&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> k = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            rq.enqueue(StdIn.readString());</span><br><span class="line">            <span class="comment">// System.out.println(StdIn.readString());</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(rq.dequeue());</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Percolation</title>
    <link href="http://wsx1128.xyz/2019/02/08/Percolation/"/>
    <id>http://wsx1128.xyz/2019/02/08/Percolation/</id>
    <published>2019-02-08T14:46:58.000Z</published>
    <updated>2019-02-23T16:42:00.534Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Programming-Assignment-1-Percolation"><a href="#Programming-Assignment-1-Percolation" class="headerlink" title="Programming Assignment 1: Percolation"></a>Programming Assignment 1: Percolation</h2><p>第一次提交这样的全英文大作业，先开始完全看不懂题目，然后在网上看懂题目之后，于是写代码的时候也是混乱的，完全不知道该怎么用，看了别人提交的写了之后，自己也提交了几次，都是60分70分左右，到最后才发现数组的溢出，以及java输入输出的一些问题。</p><h2 id="接下来看题目"><a href="#接下来看题目" class="headerlink" title="接下来看题目"></a>接下来看题目</h2><p><strong>首先先看英文版的题目</strong></p><p><img src="/2019/02/08/Percolation/11.png" alt="11"><br><img src="/2019/02/08/Percolation/12.png" alt="12"></p><p><strong>看懂的大神可以不用看下面的中文版的题目了：</strong></p><p>通过蒙特卡洛模拟方法来估计渗流阈值。</p><p>Percolation. 给一个有随机分布的绝缘和金属材料的组成的复合系统。例如我们想知道哪些部分必须是金属材料才能让这个复合系统是一个电导体。或者在一个多孔的地形，在表面有水或者油，在什么情况下水或者油能够从最表面渗透到最底层。科学家把这种过程的模型叫做Percolation。</p><p>The model. 在Assignment中，用一个NxN的格子表示percolation系统，每一个格子是打开或者关闭，打开是白色关闭是黑色。如果一个格子是full，首先他必须是打开额，然后表示从最顶上通过相连(4方向)的打开的格子可以渗透到这个位置。当一个系统是percolates，表示能从最顶层渗透到最底层，也就是说，最底层存在打开的格子是full。</p><p><img src="/2019/02/08/Percolation/13.png" alt="13"></p><p>The Problem. 研究人员对一下的问题感兴趣，如果每一个格子是独立的，并且被打开的概率为p，那么系统percolates的概率是多少？p=0，percolates概率为0，p=100，percolates的概率为100。下图是20x20和100x100格子的概率p的分布：</p><p><img src="/2019/02/08/Percolation/14.png" alt="14"></p><p>当N足够大时, 有一个阈值P<em>, 使得当p &lt; p</em>时候，任意的N<em>N网格，几乎不能被渗透, 并且当p &gt; p</em>, 基本能够被渗透。p<em>没有准确的数值解。任务是写一个计算估计p</em>的算法。</p><p>题目给出了两个样版分别作为题目开始写的两个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Percolation</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Percolation</span><span class="params">(<span class="keyword">int</span> N)</span>              <span class="comment">// create N-by-N grid, with all sites blocked</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>         <span class="comment">// open site (row i, column j) if it is not already</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>    <span class="comment">// is site (row i, column j) open?</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>    <span class="comment">// is site (row i, column j) full?</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">percolates</span><span class="params">()</span>            <span class="comment">// does the system percolate?</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PercolationStats</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">PercolationStats</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> trials)</span>    <span class="comment">// perform trials independent experiments on an n-by-n grid</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mean</span><span class="params">()</span>                          <span class="comment">// sample mean of percolation threshold</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">stddev</span><span class="params">()</span>                        <span class="comment">// sample standard deviation of percolation threshold</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceLo</span><span class="params">()</span>                  <span class="comment">// low  endpoint of 95% confidence interval</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceHi</span><span class="params">()</span>                  <span class="comment">// high endpoint of 95% confidence interval</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>        <span class="comment">// test client (described below)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第一部分建立起一个数学模型来模拟这个系统"><a href="#第一部分建立起一个数学模型来模拟这个系统" class="headerlink" title="第一部分建立起一个数学模型来模拟这个系统"></a>第一部分建立起一个数学模型来模拟这个系统</h2><h3 id="class-Percolation"><a href="#class-Percolation" class="headerlink" title="class Percolation"></a><strong>class Percolation</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.WeightedQuickUnionUF;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Percolation</span> </span>&#123;</span><br><span class="line">    <span class="comment">//建立两个并查集 来控制 backwash 的虚拟节点所产生的问题</span></span><br><span class="line">    <span class="keyword">private</span> WeightedQuickUnionUF uf;</span><br><span class="line">    <span class="keyword">private</span> WeightedQuickUnionUF backwash;</span><br><span class="line">    <span class="comment">//打开的数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="comment">//这里用一维数组来表示整张图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] percolation;</span><br><span class="line">    <span class="comment">//总数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Percolation</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illeagal Argument"</span>);</span><br><span class="line">        len = n;</span><br><span class="line">        percolation = <span class="keyword">new</span> <span class="keyword">boolean</span>[n * n + <span class="number">2</span>];</span><br><span class="line">        uf = <span class="keyword">new</span> WeightedQuickUnionUF(n * n + <span class="number">2</span>);</span><br><span class="line">        backwash = <span class="keyword">new</span> WeightedQuickUnionUF(n * n + <span class="number">1</span>);</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n * n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            percolation[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        percolation[<span class="number">0</span>] = percolation[n * n + <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; len || j &lt; <span class="number">1</span> || j &gt; len)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"out of the range"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">get_position</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (i - <span class="number">1</span>) * len + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">        check(row,col);</span><br><span class="line">        <span class="keyword">if</span> (isOpen(row,col)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> index = get_position(row,col);</span><br><span class="line">        percolation[index] = <span class="keyword">true</span>;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="comment">//处理虚拟节点与实际中的点的关系</span></span><br><span class="line">        <span class="comment">//并且同时处理一下前后左右点之间的关系</span></span><br><span class="line">        <span class="keyword">if</span> (row == <span class="number">1</span>)&#123;</span><br><span class="line">            uf.union(<span class="number">0</span>,index);</span><br><span class="line">            backwash.union(<span class="number">0</span>,index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isOpen(index - len))&#123;</span><br><span class="line">            uf.union(index,index - len);</span><br><span class="line">            backwash.union(index,index - len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (row == len) uf.union(len * len + <span class="number">1</span>,index);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isOpen(index + len))&#123;</span><br><span class="line">            uf.union(index,index + len);</span><br><span class="line">            backwash.union(index,index + len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (col != <span class="number">1</span> &amp;&amp; isOpen(index - <span class="number">1</span>))&#123;</span><br><span class="line">            uf.union(index,index - <span class="number">1</span>);</span><br><span class="line">            backwash.union(index,index - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (col != len &amp;&amp; isOpen(index + <span class="number">1</span>))&#123;</span><br><span class="line">            uf.union(index,index + <span class="number">1</span>);</span><br><span class="line">            backwash.union(index,index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> percolation[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        check(row,col);</span><br><span class="line">        <span class="keyword">return</span> isOpen(get_position(row,col));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        check(row,col);</span><br><span class="line">        <span class="keyword">int</span> index = get_position(row,col);</span><br><span class="line">        <span class="keyword">if</span> (backwash.connected(index,<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfOpenSites</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">percolates</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uf.connected(<span class="number">0</span>,len * len + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于以上这个类 其实最初思考之处，完全就是借鉴并查集的思想，使用一个数组来存储当前的模块有没有被打开，然后根据这个模块进行改变，然后再使用并查集将第一个与当前位置相连接，前后左右都打开就相当于链接了，然后根据遍历就可以找出是否会遍历到最后一个位置去了。</p><p><strong>上面所说的办法有些麻烦，有一种方法所产生的两个问题，也就是上面所使用的方法</strong><br>使用虚拟节点，相当于预设一个起点和一个终点，最后只需要判断起点与终点是否是并查集相连接的即可</p><ol><li>并查集的使用方法，可以直接写一个类也可以使用自带好的类型。</li><li>会产生终点处的backwash问题，意思就是终点位置可能会与许多没有连接到起点的支点相连接，所以采用的解决办法就是使用两个并查集。</li></ol><h2 id="第二部分就是-解决数据的位置"><a href="#第二部分就是-解决数据的位置" class="headerlink" title="第二部分就是 解决数据的位置"></a>第二部分就是 解决数据的位置</h2><p>估计percolation的阈值，初始化时候格子都是关闭的，随机寻找一个关闭的位置打开，直到系统可以渗透为止，打开的格子比上总格子数就是阈值。</p><p><img src="/2019/02/08/Percolation/15.jpg" alt="15"><br><strong>运用一下这些公式：</strong><br><img src="/2019/02/08/Percolation/16.png" alt="16"></p><p>这个问题仅仅就是数学处理的问题，以及控制格式上面的输入输出。</p><h3 id="class-PercolationStats"><a href="#class-PercolationStats" class="headerlink" title="class PercolationStats"></a><strong>class PercolationStats</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdStats;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Stopwatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PercolationStats</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] results; <span class="comment">// estimated threshold for each trial</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> avg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PercolationStats</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> trials)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span> || trials &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">        results = <span class="keyword">new</span> <span class="keyword">double</span>[trials];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trials; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">            Percolation pr = <span class="keyword">new</span> Percolation(n);</span><br><span class="line">            <span class="keyword">while</span>(!pr.percolates())&#123;</span><br><span class="line">                <span class="keyword">int</span> row = StdRandom.uniform(n) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> col = StdRandom.uniform(n) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!pr.isOpen(row, col))&#123;</span><br><span class="line">                    pr.open(row, col);</span><br><span class="line">                    step++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            results[i] = (<span class="keyword">double</span>)step / (n * n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.avg = StdStats.mean(results);</span><br><span class="line">        <span class="keyword">this</span>.std = StdStats.stddev(results);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StdOut.printf(<span class="string">"%-25s\n"</span>, <span class="string">"Please input 2 integers"</span>);</span><br><span class="line">        <span class="keyword">int</span> N = StdIn.readInt();</span><br><span class="line">        <span class="keyword">int</span> T = StdIn.readInt();</span><br><span class="line"></span><br><span class="line">        Stopwatch wt = <span class="keyword">new</span> Stopwatch();</span><br><span class="line"></span><br><span class="line">        PercolationStats ps = <span class="keyword">new</span> PercolationStats(N, T);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// elapsed CPU time in seconds</span></span><br><span class="line">        <span class="keyword">double</span> elapsed = wt.elapsedTime();</span><br><span class="line"></span><br><span class="line">        StdOut.printf(<span class="string">"%-25s= %.15f\n"</span>, <span class="string">"elapsed CPU time"</span>, elapsed);</span><br><span class="line">        StdOut.printf(<span class="string">"%-25s= %.7f\n"</span>, <span class="string">"mean"</span>, ps.mean());</span><br><span class="line">        StdOut.printf(<span class="string">"%-25s= %.17f\n"</span>, <span class="string">"stddev"</span>, ps.stddev());</span><br><span class="line">        StdOut.printf(<span class="string">"%-25s= [%.15f, %.15f]\n"</span>, <span class="string">"%95 confidence interval"</span>,</span><br><span class="line">                ps.confidenceLo(), ps.confidenceHi());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.avg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">stddev</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.std;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceLo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mean() - <span class="number">1.96</span> * stddev() / Math.sqrt(results.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mean() + <span class="number">1.96</span> * stddev() / Math.sqrt(results.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>普林斯顿算法课之并查集</title>
    <link href="http://wsx1128.xyz/2019/02/08/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE%E4%B9%8B%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://wsx1128.xyz/2019/02/08/普林斯顿算法课之并查集/</id>
    <published>2019-02-08T13:33:26.000Z</published>
    <updated>2019-02-24T02:44:30.265Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="普林斯顿算法之并查集"><a href="#普林斯顿算法之并查集" class="headerlink" title="普林斯顿算法之并查集"></a>普林斯顿算法之并查集</h2><p>个人理解 并查集就是运用在联通路径中，需要压缩路径，从而快速判断接下里的几个位置是否相连.</p><p>根据以上的需求可以写出简单类似于并查集的操作</p><p>建立数学模型，用一维甚至是多维数组来表示两个位置是否相连，相连则用相同数字来进行表示，然后经过遍历来筛查。</p><p><strong>以上这种办法简单粗暴会花费很多无用功，所以这才产生了并查集的前身</strong></p><h3 id="简单来说就是根据叠加效应，如若两者相连，就将前者作为后者的值，然后依次累积，就会产生类似树形结构的根节点，也就是下面将会提到的root函数"><a href="#简单来说就是根据叠加效应，如若两者相连，就将前者作为后者的值，然后依次累积，就会产生类似树形结构的根节点，也就是下面将会提到的root函数" class="headerlink" title="简单来说就是根据叠加效应，如若两者相连，就将前者作为后者的值，然后依次累积，就会产生类似树形结构的根节点，也就是下面将会提到的root函数"></a>简单来说就是根据叠加效应，如若两者相连，就将前者作为后者的值，然后依次累积，就会产生类似树形结构的根节点，也就是下面将会提到的<code>root</code>函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i != point[i])</span><br><span class="line">        &#123;</span><br><span class="line">            i = point[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上代码在二者没有相连接的时候，每一个人的根节点都是自己，当使用<code>union</code>操作的时候，就是将前者接到后者上面即后者就变成前者的节点，而这里就进行循环，知道找到根节点（根节点的祖先是自己）</p><h3 id="接下来就是union操作"><a href="#接下来就是union操作" class="headerlink" title="接下来就是union操作"></a>接下来就是<code>union</code>操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> roota = root(a);</span><br><span class="line">        <span class="keyword">int</span> rootb = root(b);</span><br><span class="line">        <span class="keyword">if</span> (roota == rootb) <span class="keyword">return</span> ;</span><br><span class="line">        point[rootb] = roota;</span><br><span class="line">        cnt--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>找到两个所给点的祖先，并且把他们的祖先做一个连接行为，这样就完成了并查集的核心，而往往最多的变式就产生在这其中，一般涉及到祖先的赋值情况，后面优化的时候再说。</p><h3 id="最后一个就是connected的函数，主要用来判断是否两个点是否连接，直接判断他们两个的祖先点是否相等即可。"><a href="#最后一个就是connected的函数，主要用来判断是否两个点是否连接，直接判断他们两个的祖先点是否相等即可。" class="headerlink" title="最后一个就是connected的函数，主要用来判断是否两个点是否连接，直接判断他们两个的祖先点是否相等即可。"></a>最后一个就是<code>connected</code>的函数，主要用来判断是否两个点是否连接，直接判断他们两个的祖先点是否相等即可。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root(a)==root(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>优化主要分为两个方面<strong>路径压缩</strong>和<strong>路径树平衡</strong>。</p><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i != point[i])</span><br><span class="line">        &#123;</span><br><span class="line">            point[i] = point[point[i]];</span><br><span class="line">            i = point[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此处与上面相比仅仅只是多了一行代码，但是却可以让代码提高速度5倍以上，这里就是将本来要一个一个叠加的节点，变成了多支叠加，这样树的深度少了很多，所带来的结果就是效率的提高。</p><h3 id="路径树平衡"><a href="#路径树平衡" class="headerlink" title="路径树平衡"></a>路径树平衡</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> roota = root(a);</span><br><span class="line">        <span class="keyword">int</span> rootb = root(b);</span><br><span class="line">        <span class="keyword">if</span> (roota == rootb) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> (sz[roota] &lt; sz[rootb])&#123;</span><br><span class="line">            <span class="comment">//下面的意思就是让 roota 接到 rootb 上面</span></span><br><span class="line">            point[roota] = rootb;</span><br><span class="line">            sz[rootb] += sz[roota];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            point[rootb] = roota;</span><br><span class="line">            <span class="comment">//下面这个意思就是继续接头接上去</span></span><br><span class="line">            sz[roota] += sz[rootb];</span><br><span class="line">            <span class="keyword">if</span> (Max[rootb] &gt; Max[roota]) Max[roota] = Max[rootb];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里所带来的改变就是 使用了一个sz数组来记录每一个点在这个位置的深度，从而在每一次<code>union</code>操作的时候，都会有一个判断，就是树层次小的往树层次大的节点上面接，这样一来，同样减少了树的开销，加快效率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://wsx1128.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="普林斯顿算法课" scheme="http://wsx1128.xyz/tags/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Java中this和super的用法总结</title>
    <link href="http://wsx1128.xyz/2019/01/21/Java%E4%B8%ADthis%E5%92%8Csuper%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://wsx1128.xyz/2019/01/21/Java中this和super的用法总结/</id>
    <published>2019-01-21T02:52:21.000Z</published>
    <updated>2019-02-23T16:42:02.336Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。</p><p><strong>this的用法在java中大体可以分为3种：</strong></p><h4 id="1-类似于C-里面对于自身普通的引用，这种情况就不在多讲了"><a href="#1-类似于C-里面对于自身普通的引用，这种情况就不在多讲了" class="headerlink" title="1. 类似于C++里面对于自身普通的引用，这种情况就不在多讲了"></a>1. 类似于C++里面对于自身普通的引用，这种情况就不在多讲了</h4><h4 id="2-形参与成员名字重名，用this来区分"><a href="#2-形参与成员名字重名，用this来区分" class="headerlink" title="2. 形参与成员名字重名，用this来区分"></a>2. 形参与成员名字重名，用this来区分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"初始化年龄："</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person Harry = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">"Harry's age is "</span>+Harry.GetAge(<span class="number">12</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>运行结果：<br>初始化年龄：10<br>Harry’s age is 12</em></p><p><strong>可以看到，这里age是GetAge成员方法的形参，this.age是Person类的成员变量。</strong></p><h4 id="3-引用构造函数"><a href="#3-引用构造函数" class="headerlink" title="3. 引用构造函数"></a>3. 引用构造函数</h4><p>这个就放在下面与super一起讲。</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p><strong>super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。</strong></p><h4 id="1-类似于C-的普通对父类对象的引用。（这里也不在多说）"><a href="#1-类似于C-的普通对父类对象的引用。（这里也不在多说）" class="headerlink" title="1. 类似于C++的普通对父类对象的引用。（这里也不在多说）"></a>1. 类似于C++的普通对父类对象的引用。（这里也不在多说）</h4><h4 id="2-子类中的成员变量或方法与父类中的成员变量或方法同名（可以用该办法区分）"><a href="#2-子类中的成员变量或方法与父类中的成员变量或方法同名（可以用该办法区分）" class="headerlink" title="2. 子类中的成员变量或方法与父类中的成员变量或方法同名（可以用该办法区分）"></a>2. 子类中的成员变量或方法与父类中的成员变量或方法同名（可以用该办法区分）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       name = <span class="string">"China"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span> <span class="keyword">extends</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"Shanghai"</span>;</span><br><span class="line">    <span class="keyword">super</span>.value();      <span class="comment">//调用父类的方法</span></span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       City c=<span class="keyword">new</span> City();</span><br><span class="line">       c.value();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>运行结果:<br>Shanghai<br>China</em></p><p>可以看到，这里既调用了父类的方法，也调用了父类的变量。若不调用父类方法value()，只调用父类变量name的话，则父类name值为默认值null。</p><h4 id="3-引用构造函数-1"><a href="#3-引用构造函数-1" class="headerlink" title="3.引用构造函数"></a>3.引用构造函数</h4><p>super（参数）：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）。<br>this（参数）：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prt</span><span class="params">(String s)</span> </span>&#123; </span><br><span class="line">       System.out.println(s); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">    Person() &#123; </span><br><span class="line">       prt(<span class="string">"父类·无参数构造方法： "</span>+<span class="string">"A Person."</span>); </span><br><span class="line">    &#125;<span class="comment">//构造方法(1) </span></span><br><span class="line">    </span><br><span class="line">    Person(String name) &#123; </span><br><span class="line">       prt(<span class="string">"父类·含一个参数的构造方法： "</span>+<span class="string">"A person's name is "</span> + name); </span><br><span class="line">    &#125;<span class="comment">//构造方法(2) </span></span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line">    Chinese() &#123; </span><br><span class="line">       <span class="keyword">super</span>(); <span class="comment">// 调用父类构造方法（1） </span></span><br><span class="line">       prt(<span class="string">"子类·调用父类”无参数构造方法“： "</span>+<span class="string">"A chinese coder."</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    Chinese(String name) &#123; </span><br><span class="line">       <span class="keyword">super</span>(name);<span class="comment">// 调用父类具有相同形参的构造方法（2） </span></span><br><span class="line">       prt(<span class="string">"子类·调用父类”含一个参数的构造方法“： "</span>+<span class="string">"his name is "</span> + name); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    Chinese(String name, <span class="keyword">int</span> age) &#123; </span><br><span class="line">       <span class="keyword">this</span>(name);<span class="comment">// 调用具有相同形参的构造方法（3） </span></span><br><span class="line">       prt(<span class="string">"子类：调用子类具有相同形参的构造方法：his age is "</span> + age); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">       Chinese cn = <span class="keyword">new</span> Chinese(); </span><br><span class="line">       cn = <span class="keyword">new</span> Chinese(<span class="string">"codersai"</span>); </span><br><span class="line">       cn = <span class="keyword">new</span> Chinese(<span class="string">"codersai"</span>, <span class="number">18</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure><p><em>运行结果:<br>父类·无参数构造方法： A Person.<br>子类·调用父类”无参数构造方法“： A chinese coder.<br>父类·含一个参数的构造方法： A person’s name is codersai<br>子类·调用父类”含一个参数的构造方法“： his name is codersai<br>父类·含一个参数的构造方法： A person’s name is codersai<br>子类·调用父类”含一个参数的构造方法“： his name is codersai<br>子类：调用子类具有相同形参的构造方法：his age is 18</em></p><p>从本例可以看到，可以用super和this分别调用父类的构造方法和本类中其他形式的构造方法。</p><p>例子中Chinese类第三种构造方法调用的是本类中第二种构造方法，而第二种构造方法是调用父类的，因此也要先调用父类的构造方法，再调用本类中第二种，最后是重写第三种构造方法。</p><h2 id="super和this的异同："><a href="#super和this的异同：" class="headerlink" title="super和this的异同："></a>super和this的异同：</h2><ul><li>super（参数）：调用基类中的某一个构造函数（应该为构造函数中的第一条语句）</li><li>this（参数）：调用本类中另一种形成的构造函数（应该为构造函数中的第一条语句）</li><li>super:　它引用当前对象的直接父类中的成员（用来访问直接父类中被隐藏的父类中成员数据或函数，基类与派生类中有相同成员定义时如：super.变量名    super.成员函数据名（实参）</li><li>this：它代表当前对象名（在程序中易产生二义性之处，应使用this来指明当前对象；如果函数的形参与类中的成员数据同名，这时需用this来指明成员变量名）</li><li>调用super()必须写在子类构造方法的第一行，否则编译不通过。每个子类构造方法的第一条语句，都是隐含地调用super()，如果父类没有这种形式的构造函数，那么在编译的时候就会报错。</li><li>super()和this()类似,区别是，super()从子类中调用父类的构造方法，this()在同一类内调用其它方法。</li><li>super()和this()均需放在构造方法内第一行。</li><li>尽管可以用this调用一个构造器，但却不能调用两个。</li><li>this和super不能同时出现在一个构造函数里面，因为this必然会调用其它的构造函数，其它的构造函数必然也会有super语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也不会通过。</li><li>this()和super()都指的是对象，所以，均不可以在static环境中使用。包括：static变量,static方法，static语句块。</li><li>从本质上讲，this是一个指向本对象的指针, 然而super是一个Java关键字。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://wsx1128.xyz/categories/java/"/>
    
    
      <category term="数据结构" scheme="http://wsx1128.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="java" scheme="http://wsx1128.xyz/tags/java/"/>
    
      <category term="算法" scheme="http://wsx1128.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
